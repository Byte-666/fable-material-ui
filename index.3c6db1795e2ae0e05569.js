!function(i){function e(e){for(var n,t,r=e[0],a=e[1],s=e[2],o=0,p=[];o<r.length;o++)t=r[o],c[t]&&p.push(c[t][0]),c[t]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(i[n]=a[n]);for(d&&d(e);p.length;)p.shift()();return m.push.apply(m,s||[]),l()}function l(){for(var e,n=0;n<m.length;n++){for(var t=m[n],r=!0,a=1;a<t.length;a++){var s=t[a];0!==c[s]&&(r=!1)}r&&(m.splice(n--,1),e=o(o.s=t[0]))}return e}var t={},c={0:0},m=[];function o(e){if(t[e])return t[e].exports;var n=t[e]={i:e,l:!1,exports:{}};return i[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=i,o.c=t,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="";var n=window.webpackJsonp=window.webpackJsonp||[],r=n.push.bind(n);n.push=e,n=n.slice();for(var a=0;a<n.length;a++)e(n[a]);var d=r;m.push([644,1]),l()}(Array(214).concat([function(e,n){e.exports='# Installation\r\n<p class="description">Install Fable bindings for Material-UI</p>\r\n\r\n## Nuget\r\nFable Material-UI is available as [Nuget package](https://www.nuget.org/packages/Fable.MaterialUI/)\r\n```sh\r\ndotnet add package Fable.MaterialUI\r\n```\r\nor\r\n```sh\r\npaket add Fable.MaterialUI\r\n```\r\n\r\n## NPM\r\nYou also need to install [Material-UI](https://material-ui.com/getting-started/installation/) npm package\r\n```sh\r\nnpm install @material-ui/core\r\n```\r\nor\r\n```sh\r\nyarn add @material-ui/core\r\n```'},,function(e,n){e.exports="# Migration to version 2\r\n\r\n## Required dependency\r\nFable.MaterialUI v2 works only with **dotnet-fable** >= [2.0.6](https://www.nuget.org/packages/dotnet-fable/2.0.6)\r\n\r\nMake sure to use the correct version\r\n\r\n## Breaking changes\r\n\r\n`Styles.Custom` is now a function and has the signature: `string * CSSProp list -> Styles`. You don't need to manually convert the list of CSS props to an object\r\n\r\nPredefined `Styles` props matching class keys are moved to a nested module `Themes.Styles` and require either `open Fable.MaterialUI.Themes.Styles` or qualified access, e.g. `Styles.Root`\r\n\r\n`TransitionDuration` is removed from:\r\n* MenuProp\r\n* PopoverProp\r\n* StepContentProp\r\n\r\nand moved to `MaterialProp.TransitionDurationAuto` (compiled to `transitionDuration` but allows to pass `AutoEnum.Auto`)\r\n\r\n## Other\r\nSince `keyValueList` function is not recursive in Fable 2, there are several properties which have now been replaced with functions, converting a list of DU cases to an object. The usage of those props stays the same, except `Styles` (see above)."},function(e,n){e.exports='# Usage\r\n<p class="description">How to use the bindings</p>\r\n\r\nSimply open Fable.Helpers.MaterialUI and Props module\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n```\r\nThere are several components, such as `button`, which are also present in `Fable.Helpers.React`. To avoid conflicts you can assign module names:\r\n```fsharp\r\nmodule R = Fable.Helpers.React\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n```\r\n\r\n## Minimal example\r\n```fsharp\r\nmodule R = Fable.Helpers.React\r\nmodule Mui = Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\nlet view =\r\n    Mui.button [\r\n        ButtonProp.Variant ButtonVariant.Contained\r\n    ] [ R.str "Hello world!" ]\r\n```'},function(e,n){e.exports='# App Bar\r\n<p class="description">The App Bar displays information and actions relating to the current screen.</p>\r\n\r\nThe top App Bar provides content and actions related to the current screen. It’s used for branding, screen titles, navigation, and actions.\r\n\r\nIt can transform into a contextual action bar or used as a navbar.'},function(e,n){e.exports='# Buttons\r\n\r\n<p class="description">Buttons allow users to take actions, and make choices, with a single tap.</p>\r\n\r\n[Buttons](https://material.io/design/components/buttons.html) communicate actions that users can take. They are typically placed throughout your UI, in places like:\r\n- Dialogs\r\n- Modal windows\r\n- Forms\r\n- Cards\r\n- Toolbars'},function(e,n){e.exports='# Text Fields\r\n\r\n<p class="description">Text fields let users enter and edit text.</p>\r\n\r\n[Text fields](https://material.io/design/components/text-fields.html) allow users to enter text into a UI. They typically appear in forms and dialogs.\r\n'},function(e,n){e.exports='# Overrides\r\n\r\n<p class="description">As components can be used in different contexts, Material-UI supports different types of customization requirements going from the most specific to the most generic.</p>\r\n\r\n## 1. Specific variation for a one-time situation\r\n\r\nYou might need to change the style of a component in some very specific situation, for which you have the following solutions available:'},function(e,n){e.exports='# Themes\r\n\r\n<p class="description">Customize Material-UI with your theme. You can change the colors, the typography and much more.</p>\r\n\r\nThe theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc.\r\n\r\nThemes let you apply a consistent tone to your app. It allows you to **customize all design aspects** of your project in order to meet the specific needs of your business or brand.\r\n\r\nTo promote greater consistency between apps, light and dark theme types are available to choose from. By default, components use the light theme type.\r\n\r\n## Theme provider\r\n\r\nIf you wish to customize the theme, you need to use the `MuiThemeProvider` component in order to inject a theme into your application.\r\nHowever, this is optional; Material-UI components come with a default theme.\r\n\r\n`MuiThemeProvider` relies on the context feature of React to pass the theme down to the components,\r\nso you need to make sure that `MuiThemeProvider` is a parent of the components you are trying to customize.\r\nYou can learn more about this in the API section.\r\n\r\n## Theme configuration variables\r\n\r\nChanging the theme configuration variables is the most effective way to match Material-UI to your needs.\r\nThe following sections cover the most important theme variables.\r\n\r\n### Palette\r\n\r\n#### Intentions\r\n\r\nA color intention is a mapping of a palette to a given intention within your application.\r\n\r\nThe theme exposes the following color intentions:\r\n\r\n- primary - used to represent primary interface elements for a user.\r\n- secondary - used to represent secondary interface elements for a user.\r\n- error - used to represent interface elements that the user should be made aware of.\r\n\r\nThe default palette uses the shades prefixed with `A` (`A200`, etc.) for the secondary intention,\r\nand the un-prefixed shades for the other intentions.\r\n\r\nIf you want to learn more about color, you can check out [the color section](#/style/color/).\r\n\r\n#### Custom palette\r\n\r\nYou may override the default palette values by including a `palette` object as part of your theme.\r\n\r\nIf any of the [`palette.primary`](https://material-ui.com/customization/default-theme/?expend-path=$.palette.primary),\r\n[`palette.secondary`](https://material-ui.com/customization/default-theme/?expend-path=$.palette.secondary) or\r\n[`palette.error`](https://material-ui.com/customization/default-theme/?expend-path=$.palette.error)\r\n\'intention\' objects are provided, they will replace the defaults.\r\n\r\nThe intention value is list of props from the following discriminated union:\r\n\r\n```fsharp\r\ntype PaletteIntentionProp =\r\n    | Light of string\r\n    | Main of string\r\n    | Dark of string\r\n    | ContrastText of string\r\n```\r\n\r\n**Using a color object**\r\n\r\nThe simplest way to customize an intention is to import one or more of the provided colors\r\nand apply them to a palette intention. Unlike in JS version of Material-UI, you can only define a specific\r\n`PaletteIntentionProp`, however if you define just `Main`, other colors will be calculated automaticaly.\r\n\r\nThese code samples are identical:\r\n\r\n```js\r\nimport { createMuiTheme } from \'@material-ui/core/styles\';\r\nimport blue from \'@material-ui/core/colors/blue\';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n  },\r\n});\r\n```\r\n\r\n```fsharp\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.blue.``500``\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n\r\n**Providing the colors directly**\r\n\r\nIf you wish to provide more customized colors, you can directly supply colors to some or all of the intention\'s keys:\r\n\r\n```fsharp\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        // PaletteIntentionProp.Light will be calculated from Main\r\n                        PaletteIntentionProp.Main "#ff4400"\r\n                        // PaletteIntentionProp.Dark will be calculated from Main\r\n                        // PaletteIntentionProp.ContrastText will be calculated to contrast with Main\r\n                    ]\r\n                    PaletteProp.Secondary [\r\n                        PaletteIntentionProp.Light "#0066ff"\r\n                        PaletteIntentionProp.Main "#0044ff"\r\n                        // PaletteIntentionProp.Dark will be calculated from Main\r\n                        PaletteIntentionProp.ContrastText "#ffcc00"\r\n                    ]\r\n                    // PaletteProp.Error will use the default color\r\n                ]\r\n            ]\r\n```\r\n\r\nAs in the example above, if the intention object contains custom colors using any of the\r\n`Main`, `Light`, `Dark` or `ContrastText` keys, these map as follows:\r\n\r\n- If the `Dark` and / or `Light` keys are omitted, their value(s) will be calculated from `Main`,\r\naccording to the `TonalOffset` value.\r\n\r\n- If `ContrastText` is omitted, its value will be calculated to contrast with `Main`,\r\naccording to the`ContrastThreshold` value.\r\n\r\nBoth the `TonalOffset` and `ContrastThreshold` values may be customized as needed.\r\nA higher value for `TonalOffset` will make calculated values for `Light` lighter, and `Dark` darker.\r\nA higher value for `ContrastThreshold` increases the point at which a background color is considered\r\nlight, and given a dark `ContrastText`.\r\n\r\nNote that `ContrastThreshold` follows a non-linear curve.'},function(e,n){e.exports='# CSS in JS (F#)\r\n\r\n<p class="description">You can leverage our styling solution, even if you are not using our components.</p>\r\n\r\nMaterial-UI aims to provide strong foundations for building dynamic UIs.\r\nFor the sake of simplicity, **Material-UI exposes its styling solution to users**.\r\nYou can use it, but you don\'t have to. This styling solution is interoperable with all the other major solutions.'},function(e,n){e.exports='# Default Theme\r\n\r\nYou can find the default theme in [Material-UI documentation](https://material-ui.com/customization/default-theme/)\r\n\r\nFable.MaterialUI exposes theme with the following types:\r\n\r\n```fsharp\r\ntype IPaletteIntention =\r\n    abstract light: string with get,set\r\n    abstract main: string with get,set\r\n    abstract dark: string with get,set\r\n    abstract contrastText: string with get,set\r\n\r\ntype [<StringEnum; RequireQualifiedAccess>] PaletteType = Dark | Light\r\n\r\ntype IPaletteCommon =\r\n    abstract black: string with get,set\r\n    abstract white: string with get,set\r\n\r\ntype IPaletteAction =\r\n    abstract active: string with get,set\r\n    abstract hover: string with get,set\r\n    abstract hoverOpacity: float with get,set\r\n    abstract selected: string with get,set\r\n    abstract disabled: string with get,set\r\n    abstract disabledBackground: string with get,set\r\n\r\ntype IPaletteBackground =\r\n    abstract paper: string with get,set\r\n    abstract ``default``: string with get,set\r\n\r\ntype IPaletteText =\r\n    abstract primary: string with get,set\r\n    abstract secondary: string with get,set\r\n    abstract disabled: string with get,set\r\n    abstract hint: string with get,set\r\n\r\ntype IColor =\r\n    abstract ``50``: string with get,set\r\n    abstract ``100``: string with get,set\r\n    abstract ``200``: string with get,set\r\n    abstract ``300``: string with get,set\r\n    abstract ``400``: string with get,set\r\n    abstract ``500``: string with get,set\r\n    abstract ``600``: string with get,set\r\n    abstract ``700``: string with get,set\r\n    abstract ``800``: string with get,set\r\n    abstract ``900``: string with get,set\r\n    abstract A100: string with get,set\r\n    abstract A200: string with get,set\r\n    abstract A400: string with get,set\r\n    abstract A700: string with get,set\r\n\r\ntype IPalette =\r\n    abstract common: IPaletteCommon with get,set\r\n    abstract ``type``: PaletteType with get,set\r\n    abstract primary: IPaletteIntention with get,set\r\n    abstract secondary: IPaletteIntention with get,set\r\n    abstract error: IPaletteIntention with get,set\r\n    abstract grey: IColor with get,set\r\n    abstract contrastThreshold: int with get,set\r\n    abstract getContrastText: background: string -> string\r\n    abstract augmentColor: color: IPaletteIntention * mainShade : U2<int, string> * lightShade : U2<int, string> * darkShade : U2<int, string> -> unit\r\n    abstract tonalOffset: float with get,set\r\n    abstract text: IPaletteText with get,set\r\n    abstract divider: string with get,set\r\n    abstract background: IPaletteBackground with get,set\r\n    abstract action: IPaletteAction with get,set\r\n\r\ntype [<StringEnum; RequireQualifiedAccess>] TextDirection = Ltr | Rtl\r\n\r\ntype IShape =\r\n    abstract borderRadius: int with get,set\r\n\r\ntype ISpacing =\r\n    abstract ``unit``: int with get,set\r\n\r\ntype IZIndex =\r\n    abstract mobileStepper: int with get,set\r\n    abstract appBar: int with get,set\r\n    abstract drawer: int with get,set\r\n    abstract modal: int with get,set\r\n    abstract snackbar: int with get,set\r\n    abstract tooltip: int with get,set\r\n\r\ntype ITypography =\r\n    abstract fontSize: string with get,set\r\n    abstract fontWeight: int with get,set\r\n    abstract fontFamily: string with get,set\r\n    abstract letterSpacing: string with get,set\r\n    abstract lineHeight: string with get,set\r\n    abstract marginLeft: string with get,set\r\n    abstract color: string with get,set\r\n    abstract textTransform: string with get,set\r\n\r\ntype IThemeTypography =\r\n    abstract round: px: float -> float\r\n    abstract pxToRem: px: float -> string\r\n    abstract fontFamily: string with get,set\r\n    abstract fontSize: string with get,set\r\n    abstract fontWeightLight: int with get,set\r\n    abstract fontWeightRegular: int with get,set\r\n    abstract fontWeightMedium: int with get,set\r\n    abstract h1: ITypography with get,set\r\n    abstract h2: ITypography with get,set\r\n    abstract h3: ITypography with get,set\r\n    abstract h4: ITypography with get,set\r\n    abstract h5: ITypography with get,set\r\n    abstract h6: ITypography with get,set\r\n    abstract subtitle1: ITypography with get,set\r\n    abstract subtitle2: ITypography with get,set\r\n    abstract overline: ITypography with get,set\r\n    abstract srOnly: ITypography with get,set\r\n    abstract body2: ITypography with get,set\r\n    abstract body1: ITypography with get,set\r\n    abstract caption: ITypography with get,set\r\n    abstract button: ITypography with get,set\r\n    // Deprecated\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `display1` is deprecated. Please use `h4` instead")>]\r\n    abstract display1: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `display2` is deprecated. Please use `h3` instead")>]\r\n    abstract display2: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `display3` is deprecated. Please use `h2` instead")>]\r\n    abstract dispaly3: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `display4` is deprecated. Please use `h1` instead")>]\r\n    abstract display4: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `headline` is deprecated. Please use `h5` instead")>]\r\n    abstract headline: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `title` is deprecated. Please use `h6` instead")>]\r\n    abstract title: ITypography with get,set\r\n    [<Obsolete("Material-UI@3.2.0: Typography type `subheading` is deprecated. Please use `subtitle1` instead")>]\r\n    abstract subheading: ITypography with get,set\r\n\r\ntype IBreakpointValues =\r\n    abstract xs: int with get,set\r\n    abstract sm: int with get,set\r\n    abstract md: int with get,set\r\n    abstract lg: int with get,set\r\n    abstract xl: int with get,set\r\n\r\ntype IBreakpoints =\r\n    abstract keys: Props.MaterialSize list with get,set\r\n    abstract values: IBreakpointValues with get,set\r\n    abstract up: key: U2<Props.MaterialSize, int> -> string\r\n    abstract down: key: U2<Props.MaterialSize, int> -> string\r\n    abstract only: key: Props.MaterialSize -> string\r\n    abstract between: start: Props.MaterialSize * ``end``: Props.MaterialSize -> string\r\n    abstract width: key: Props.MaterialSize -> int\r\n\r\ntype IMixins =\r\n    abstract gutters: ?styles : CSSProperties -> CSSProperties\r\n    abstract toolbar: CSSProperties with get,set\r\n\r\ntype IEasing =\r\n    abstract easeInOut: string with get,set\r\n    abstract easeOut: string with get,set\r\n    abstract easeIn: string with get,set\r\n    abstract sharp: string with get,set\r\n\r\ntype IDuration =\r\n    abstract shortest: float with get,set\r\n    abstract shorter: float with get,set\r\n    abstract short: float with get,set\r\n    abstract standard: float with get,set\r\n    abstract complex: float with get,set\r\n    abstract enteringScreen: float with get,set\r\n    abstract leavingScreen: float with get,set\r\n\r\ntype ITransitionOptions =\r\n    abstract duration: U2<float, string> with get,set\r\n    abstract easing: string with get,set\r\n    abstract delay: U2<float, string> with get,set\r\n\r\ntype ITransitions =\r\n    abstract easing: IEasing with get,set\r\n    abstract duration: IDuration with get,set\r\n    abstract create: props : U2<string, string list> * ?options: ITransitionOptions -> string\r\n    abstract getAutoHeightDuration: height : int -> int\r\n\r\ntype ITheme =\r\n    abstract breakpoints: IBreakpoints with get,set\r\n    abstract direction: TextDirection with get,set\r\n    abstract overrides: obj with get,set\r\n    abstract palette: IPalette with get,set\r\n    abstract props: obj with get,set\r\n    abstract shadows: string list with get,set\r\n    abstract typography: IThemeTypography with get,set\r\n    abstract shape: IShape with get,set\r\n    abstract spacing: ISpacing with get,set\r\n    abstract zIndex: IZIndex with get,set\r\n    abstract mixins: IMixins with get,set\r\n    abstract transitions: ITransitions with get,set\r\n```\r\n\r\nYou can the definions on [GitHub](https://github.com/mvsmal/fable-material-ui/blob/master/src/Fable.Helpers.MaterialUI.Props.fs#L1711-L1962)'},function(e,n){e.exports="## Support fable-material-ui\r\nFable.MaterialUI is a MIT licensed open source project. We are intent on code quality and project maintain. Entirely thanks to our awesome backers.\r\n\r\n### Support via [patreon](https://www.patreon.com/mvsmal)\r\n"},function(e,n,t){e.exports=t.p+"assets/fable-material-ui-logo.0a1b36e07c363a6e1964cec31b5fa081.svg"},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){var r={"./Api/Api.fs":441,"./App.fs":442,"./Components/Demo.fs":443,"./Components/Markdown.fs":444,"./Customization/CssInJs.fs":445,"./Customization/CssInJs/CssInJs.fs":446,"./Customization/CssInJs/RenderProps.fs":447,"./Customization/CssInJs/StyledComponents.fs":448,"./Customization/DefaultTheme.fs":449,"./Customization/Overrides.fs":450,"./Customization/Overrides/ClassNames.fs":451,"./Customization/Overrides/ClassNesting.fs":452,"./Customization/Overrides/InlineStyle.fs":453,"./Customization/Overrides/InternalState.fs":454,"./Customization/Overrides/ShortlandClasses.fs":455,"./Customization/Themes.fs":456,"./Customization/Themes/CustomStyles.fs":457,"./Customization/Themes/DarkTheme.fs":458,"./Customization/Themes/FontSizeTheme.fs":459,"./Customization/Themes/Nested.fs":460,"./Customization/Themes/OverrideCss.fs":461,"./Customization/Themes/OverrideProperties.fs":462,"./Customization/Themes/Palette.fs":463,"./Customization/Themes/TypographyTheme.fs":464,"./Customization/Themes/WithTheme.fs":465,"./Demos/AppBar.fs":466,"./Demos/AppBar/AppBarWithButtons.fs":467,"./Demos/AppBar/SimpleAppBar.fs":468,"./Demos/Avatars.fs":469,"./Demos/Buttons.fs":470,"./Demos/Buttons/ButtonSizes.fs":471,"./Demos/Buttons/ComplexButtons.fs":472,"./Demos/Buttons/ContainedButtons.fs":473,"./Demos/Buttons/CustomizedButtons.fs":474,"./Demos/Buttons/FloatingActionButtonZoom.fs":475,"./Demos/Buttons/FloatingActionButtons.fs":476,"./Demos/Buttons/IconButtons.fs":477,"./Demos/Buttons/IconLabelButtons.fs":478,"./Demos/Buttons/OutlinedButtons.fs":479,"./Demos/Buttons/TextButtons.fs":480,"./Demos/TextFields.fs":481,"./Demos/TextFields/Composed.fs":482,"./Demos/TextFields/Customized.fs":483,"./Demos/TextFields/Filled.fs":484,"./Demos/TextFields/FilledInputAdornments.fs":485,"./Demos/TextFields/Input.fs":486,"./Demos/TextFields/InputAdornments.fs":487,"./Demos/TextFields/Layout.fs":488,"./Demos/TextFields/Outlined.fs":489,"./Demos/TextFields/OutlinedInputAdornments.fs":490,"./Demos/TextFields/TextField.fs":491,"./Demos/TextFields/WithIcon.fs":492,"./GettingStarted/Installation.fs":493,"./GettingStarted/MigrationToV2.fs":494,"./GettingStarted/Usage.fs":495,"./Global.fs":496,"./Home/Home.fs":497,"./Import/Marked.fs":498,"./Import/Prism.fs":499,"./Layout/AppBar.fs":500,"./Layout/Drawer.fs":501,"./Layout/Layout.fs":502,"./Layout/Menu.fs":503,"./Layout/Navigation.fs":504,"./Layout/NavigationItem.fs":505,"./PageLayoutDemos/SignIn.fs":506,"./State.fs":507,"./Types.fs":508,"./Utils.fs":509,"./bin/Release/netstandard2.0/Demos/AppBar.fs":510,"./bin/Release/netstandard2.0/Demos/AppBar/AppBarWithButtons.fs":511,"./bin/Release/netstandard2.0/Demos/AppBar/SimpleAppBar.fs":512,"./bin/Release/netstandard2.0/Demos/Avatars.fs":513,"./bin/Release/netstandard2.0/Demos/Buttons.fs":514,"./bin/Release/netstandard2.0/Demos/Buttons/ButtonSizes.fs":515,"./bin/Release/netstandard2.0/Demos/Buttons/ComplexButtons.fs":516,"./bin/Release/netstandard2.0/Demos/Buttons/ContainedButtons.fs":517,"./bin/Release/netstandard2.0/Demos/Buttons/CustomizedButtons.fs":518,"./bin/Release/netstandard2.0/Demos/Buttons/FloatingActionButtonZoom.fs":519,"./bin/Release/netstandard2.0/Demos/Buttons/FloatingActionButtons.fs":520,"./bin/Release/netstandard2.0/Demos/Buttons/IconButtons.fs":521,"./bin/Release/netstandard2.0/Demos/Buttons/IconLabelButtons.fs":522,"./bin/Release/netstandard2.0/Demos/Buttons/OutlinedButtons.fs":523,"./bin/Release/netstandard2.0/Demos/Buttons/TextButtons.fs":524,"./bin/Release/netstandard2.0/Demos/TextFields.fs":525,"./bin/Release/netstandard2.0/Demos/TextFields/Composed.fs":526,"./bin/Release/netstandard2.0/Demos/TextFields/Customized.fs":527,"./bin/Release/netstandard2.0/Demos/TextFields/Filled.fs":528,"./bin/Release/netstandard2.0/Demos/TextFields/FilledInputAdornments.fs":529,"./bin/Release/netstandard2.0/Demos/TextFields/Input.fs":530,"./bin/Release/netstandard2.0/Demos/TextFields/InputAdornments.fs":531,"./bin/Release/netstandard2.0/Demos/TextFields/Layout.fs":532,"./bin/Release/netstandard2.0/Demos/TextFields/Outlined.fs":533,"./bin/Release/netstandard2.0/Demos/TextFields/OutlinedInputAdornments.fs":534,"./bin/Release/netstandard2.0/Demos/TextFields/TextField.fs":535,"./bin/Release/netstandard2.0/Demos/TextFields/WithIcon.fs":536,"./obj/Debug/netstandard2.0/Fable.MaterialUI.Docs.AssemblyInfo.fs":537,"./obj/Release/netstandard2.0/Fable.MaterialUI.Docs.AssemblyInfo.fs":538};function a(e){var n=s(e);return t(n)}function s(e){var n=r[e];if(n+1)return n;var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}a.keys=function(){return Object.keys(r)},a.resolve=s,(e.exports=a).id=440},function(e,n){e.exports='module Api.View\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Components\r\n\r\n[<Emit("require.context($0, true, /\\\\.md$/);")>]\r\nlet inline requireContext (dir: string) = jsNative\r\n\r\nlet requireWithContext: obj = requireContext "./"\r\n\r\nlet view comp =\r\n    let path = sprintf "./%s.md" comp\r\n    try\r\n        let text = !!(requireWithContext $ path)\r\n        Markdown.view text\r\n    with\r\n    | e -> div [] [ str "not found" ]'},function(e,n){e.exports='module App.View\r\n\r\nopen Elmish\r\nopen Elmish.Browser.Navigation\r\nopen Elmish.Browser.UrlParser\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import.React\r\n\r\nopen App.State\r\nopen Types\r\n\r\nimportAll "../sass/main.sass"\r\n\r\nlet root (model: Model) dispatch : ReactElement =\r\n    Layout.Layout.view model dispatch\r\n\r\nopen Elmish.React\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n\r\n// App\r\nProgram.mkProgram init update root\r\n|> Program.toNavigable (parseHash pageParser) urlUpdate\r\n#if DEBUG\r\n|> Program.withDebugger\r\n#endif\r\n|> Program.withReact "app"\r\n|> Program.run\r\n'},function(e,n){e.exports='module Components.Demo\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Import.React\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen Utils\r\nopen Components\r\n\r\n[<Emit("require.context(\'!!raw-loader!\' + $0, true, /\\\\.fs$/);")>]\r\nlet inline requireContext (dir: string) = jsNative\r\n\r\nlet demosContext: obj = requireContext "../"\r\n\r\nlet demoStyles (theme : ITheme) : IStyles list =\r\n    let smBreakpoint = theme.breakpoints.up(MaterialSize.Sm |> U2.Case1)\r\n    let demoStyle = \r\n            theme.mixins.gutters(\r\n                !!([\r\n                        CSSProp.BorderRadius theme.shape.borderRadius\r\n                        CSSProp.BackgroundColor theme.palette.grey.``200``\r\n                        CSSProp.Display "flex"\r\n                        CSSProp.JustifyContent "center"\r\n                        CSSProp.PaddingTop (theme.spacing.unit * 2)\r\n                        CSSProp.PaddingBottom (theme.spacing.unit * 2)\r\n                        customCss smBreakpoint [\r\n                            CSSProp.PaddingLeft (theme.spacing.unit * 3)\r\n                            CSSProp.PaddingRight (theme.spacing.unit * 3)\r\n                            CSSProp.PaddingTop (theme.spacing.unit * 6)\r\n                            CSSProp.PaddingBottom (theme.spacing.unit * 3)\r\n                        ]\r\n                    ] |> toObj))\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Position "relative"\r\n            CSSProp.MarginBottom 40\r\n            CSSProp.MarginLeft (-theme.spacing.unit * 2)\r\n            CSSProp.MarginRight (-theme.spacing.unit * 2)\r\n            customCss smBreakpoint [\r\n                CSSProp.Padding (sprintf "0 %ipx" theme.spacing.unit)\r\n                CSSProp.MarginLeft 0\r\n                CSSProp.MarginRight 0\r\n            ]\r\n        ]\r\n        Styles.Custom\' ("demo", demoStyle)\r\n        Styles.Custom ("header", [\r\n            CSSProp.Display "none"\r\n            customCss smBreakpoint [\r\n                CSSProp.Display "flex"\r\n                CSSProp.Custom ("flip", false)\r\n                CSSProp.Position "absolute"\r\n                CSSProp.Top 0\r\n                CSSProp.Right theme.spacing.unit\r\n            ]\r\n        ])\r\n        Styles.Custom ("code", [\r\n            CSSProp.Display "none"\r\n            CSSProp.Padding 0\r\n            CSSProp.Margin 0\r\n            customCss smBreakpoint [\r\n                CSSProp.Display "block"\r\n            ]\r\n            customCss "& pre" [\r\n                CSSProp.Overflow "auto"\r\n                CSSProp.Margin "0px !important"\r\n                CSSProp.BorderRadius "0px !important"\r\n            ]\r\n        ])\r\n    ]\r\n\r\n\r\ntype DemoProps =\r\n    abstract member demoPath: string with get,set\r\n    abstract member title: string with get,set\r\n    abstract member demoElement: (unit->ReactElement) with get,set\r\n    inherit IClassesProps\r\n\r\n\r\ntype DemoClasses =\r\n    abstract member root : string\r\n    abstract member header : string\r\n    abstract member demo : string\r\n    abstract member code : string\r\n    // abstract member sourceButton : string\r\n    inherit IClasses\r\n\r\n\r\ntype DemoState = {\r\n    expanded: bool\r\n}\r\n\r\nlet wrapWithFsharp text =\r\n    text |> sprintf "\r\n```fsharp\r\n%s\r\n```\r\n    "\r\n\r\ntype DemoComponent(p) =\r\n    inherit PureComponent<DemoProps,DemoState>(p)\r\n    do\r\n        base.setInitState { expanded = false }\r\n\r\n    member this.ToggleSource _ =\r\n        this.setState (fun s _ -> { s with expanded = not s.expanded })\r\n\r\n    override this.render() =\r\n        let demo = !!(demosContext $ this.props.demoPath)\r\n        let classes : DemoClasses = !!this.props.classes\r\n        fragment [] [\r\n            Markdown.view this.props.title\r\n            div [ Class classes.root ] [\r\n                div [] [\r\n                    div [ Class classes.header ] [\r\n                        tooltip [\r\n                            Placement PlacementType.Top\r\n                            TooltipProp.Title\r\n                                (if this.state.expanded\r\n                                 then (str "Hide source" |> U2.Case1 |> U3.Case1)\r\n                                 else (str "Show source" |> U2.Case1 |> U3.Case1))\r\n                        ] [\r\n                            iconButton [\r\n                                HTMLAttr.Custom ("aria-label", "Source of demo")\r\n                                OnClick this.ToggleSource\r\n                            ] [ icon [] [ str "code" ]]\r\n                        ]\r\n                    ]\r\n                    collapse [\r\n                        In this.state.expanded\r\n                        TransitionProp.UnmountOnExit true\r\n                    ] [\r\n                        div [ Class classes.code ] [ Markdown.view (demo |> wrapWithFsharp) ]\r\n                    ]\r\n                ]\r\n                div [ Class classes.demo ] [ this.props.demoElement () ]\r\n            ]\r\n        ]\r\n\r\nlet demoComponent props =\r\n    ofType<DemoComponent,_,_> props []\r\n\r\nlet demoWithStyles = withStyles (StyleType.Func demoStyles) [] demoComponent\r\n\r\n/// Renders the `demoElement` with `title` rendered as Markdown \r\n/// and shows the code loaded from `demoPath` (relative to `src/`)\r\nlet view title demoPath demoElement =\r\n    let props = createEmpty<DemoProps>\r\n    props.demoPath <- demoPath\r\n    props.title <- title\r\n    props.demoElement <- demoElement\r\n\r\n    from demoWithStyles props []\r\n'},function(e,n){e.exports='module Components.Markdown\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen Import.Prism\r\nopen Import.Marked\r\nopen Utils\r\n\r\nmodule MProps = Fable.MaterialUI.Props\r\n\r\nlet markdownStyles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Custom ("markdown", [\r\n            FontFamily theme.typography.fontFamily\r\n            FontSize 16\r\n            CSSProp.Color theme.palette.text.primary\r\n\r\n            customCss "& .anchor-link" [\r\n                MarginTop -96\r\n                Position "absolute"\r\n            ]\r\n            customCss """& pre, & pre[class*="language-"]""" [\r\n                Margin "24px 0"\r\n                CSSProp.Padding "12px 18px"\r\n                BackgroundColor theme.palette.background.paper\r\n                BorderRadius theme.shape.borderRadius\r\n                Overflow "auto"\r\n                CSSProp.Custom ("WebkitOverflowScrolling", "touch")\r\n            ]\r\n            customCss "& code" [\r\n                Display "inline-block"\r\n                LineHeight 1.6\r\n                FontFamily """Consolas, "Liberation Mono", Menlo, Courier, monospace"""\r\n                CSSProp.Padding "3px 6px"\r\n                CSSProp.Color theme.palette.text.primary\r\n                BackgroundColor theme.palette.background.paper\r\n                FontSize 14\r\n            ]\r\n            customCss "& p code, & ul code, & pre code" [\r\n                FontSize 14\r\n                LineHeight 1.6\r\n            ]\r\n            customCss "& h1" [\r\n                FontFamily theme.typography.h2.fontFamily\r\n                FontSize theme.typography.h2.fontSize\r\n                FontWeight theme.typography.h2.fontWeight\r\n                LineHeight theme.typography.h2.lineHeight\r\n                LetterSpacing theme.typography.h2.letterSpacing\r\n                TextTransform theme.typography.h2.textTransform\r\n                // CSSProp.Color theme.palette.text.secondary\r\n                CSSProp.Margin "32px 0 16px"\r\n            ]\r\n            customCss "& .description" [\r\n                FontFamily theme.typography.h5.fontFamily\r\n                FontSize theme.typography.h5.fontSize\r\n                FontWeight theme.typography.h5.fontWeight\r\n                LineHeight theme.typography.h5.lineHeight\r\n                LetterSpacing theme.typography.h5.letterSpacing\r\n                TextTransform theme.typography.h5.textTransform\r\n                CSSProp.Margin "0 0 40px"\r\n            ]\r\n            customCss "& h2" [\r\n                FontFamily theme.typography.h4.fontFamily\r\n                FontSize theme.typography.h4.fontSize\r\n                FontWeight theme.typography.h4.fontWeight\r\n                LineHeight theme.typography.h4.lineHeight\r\n                LetterSpacing theme.typography.h4.letterSpacing\r\n                TextTransform theme.typography.h4.textTransform\r\n                CSSProp.Color theme.palette.text.secondary\r\n                CSSProp.Margin "32px 0 24px"\r\n            ]\r\n            customCss "& h3" [\r\n                FontFamily theme.typography.h5.fontFamily\r\n                FontSize theme.typography.h5.fontSize\r\n                FontWeight theme.typography.h5.fontWeight\r\n                LineHeight theme.typography.h5.lineHeight\r\n                LetterSpacing theme.typography.h5.letterSpacing\r\n                TextTransform theme.typography.h5.textTransform\r\n                CSSProp.Color theme.palette.text.secondary\r\n                CSSProp.Margin "32px 0 24px"\r\n            ]\r\n            customCss "& h4" [\r\n                FontFamily theme.typography.h6.fontFamily\r\n                FontSize theme.typography.h6.fontSize\r\n                FontWeight theme.typography.h6.fontWeight\r\n                LineHeight theme.typography.h6.lineHeight\r\n                LetterSpacing theme.typography.h6.letterSpacing\r\n                TextTransform theme.typography.h6.textTransform\r\n                CSSProp.Color theme.palette.text.secondary\r\n                CSSProp.Margin "24px 0 16px"\r\n            ]\r\n            customCss "& p, & ul, & ol" [\r\n                LineHeight 1.6\r\n            ]\r\n            customCss "& h1, & h2, & h3, & h4" [\r\n                customCss "& code" [\r\n                    FontSize "inherit"\r\n                    LineHeight "inherit"\r\n                    WordBreak "break-word"\r\n                ]\r\n                customCss "& .anchor-link-style" [\r\n                    Opacity 0\r\n                    Display "none"\r\n                ]\r\n                customCss "&:hover .anchor-link-style" [\r\n                    Display "inline-block"\r\n                    Opacity 1\r\n                    CSSProp.Padding "0 8px"\r\n                    CSSProp.Color theme.palette.text.hint\r\n                    customCss "&:hover" [\r\n                        CSSProp.Color theme.palette.text.secondary\r\n                    ]\r\n                    customCss "& svg" [\r\n                        Width "0.55em"\r\n                        Height "0.55em"\r\n                        Fill "currentColor"\r\n                    ]\r\n                ]\r\n            ]\r\n            customCss "& table" [\r\n                CSSProp.Width "100%"\r\n                CSSProp.Display "block"\r\n                CSSProp.OverflowX "auto"\r\n                CSSProp.Custom ("WebkitOverflowScrolling", "touch")\r\n                CSSProp.BorderCollapse "collapse"\r\n                CSSProp.BorderSpacing 0\r\n                CSSProp.Overflow "hidden"\r\n                customCss "& .prop-name" [\r\n                    CSSProp.FontSize 13\r\n                    CSSProp.FontFamily "Conolas, \\"Liberation Mono\\", Menlo, monospace"\r\n                ]\r\n                customCss "& .required" [\r\n                    CSSProp.Color "#006500"\r\n                ]\r\n                customCss "& .prop-type" [\r\n                    CSSProp.FontSize 13\r\n                    CSSProp.FontFamily "Conolas, \\"Liberation Mono\\", Menlo, monospace"\r\n                    CSSProp.Color "#932981"\r\n                    CSSProp.WhiteSpace "nowrap"\r\n                ]\r\n                customCss "& .prop-default" [\r\n                    CSSProp.FontSize 13\r\n                    CSSProp.FontFamily "Conolas, \\"Liberation Mono\\", Menlo, monospace"\r\n                    CSSProp.BorderBottom ("1px dotted " + theme.palette.text.hint)\r\n                ]\r\n            ]\r\n            customCss "& thead" [\r\n                CSSProp.FontSize 14\r\n                CSSProp.FontWeight theme.typography.fontWeightMedium\r\n                CSSProp.Color theme.palette.text.secondary\r\n            ]\r\n            customCss "& tbody" [\r\n                CSSProp.FontSize 14\r\n                CSSProp.LineHeight 1.5\r\n                CSSProp.Color theme.palette.text.primary\r\n            ]\r\n            customCss "& td" [\r\n                CSSProp.BorderBottom ("1px solid " + theme.palette.divider)\r\n                CSSProp.Padding "8px 16px 8px 8px"\r\n                CSSProp.TextAlign "left"\r\n            ]\r\n            customCss "& td:last-child" [\r\n                CSSProp.PaddingRight 24\r\n            ]\r\n            customCss "& td compact" [\r\n                CSSProp.PaddingRight 24\r\n            ]\r\n            customCss "& td code" [\r\n                CSSProp.FontSize 13\r\n                CSSProp.LineHeight 1.6\r\n            ]\r\n            customCss "& th" [\r\n                CSSProp.WhiteSpace "pre"\r\n                CSSProp.BorderBottom ("1px solid " + theme.palette.divider)\r\n                CSSProp.FontWeight theme.typography.fontWeightMedium\r\n                CSSProp.Padding "0 16px 0 8px"\r\n                CSSProp.TextAlign "left"\r\n            ]\r\n            customCss "& th:last-child" [\r\n                CSSProp.PaddingRight 24\r\n            ]\r\n            customCss "& tr" [\r\n                CSSProp.Height 48\r\n            ]\r\n            customCss "& thead tr" [\r\n                CSSProp.Height 64\r\n            ]\r\n            customCss "& strong" [\r\n                FontWeight theme.typography.fontWeightMedium\r\n            ]\r\n            customCss "& blockquote" [\r\n                BorderLeft ("5px solid " + theme.palette.text.hint)\r\n                BackgroundColor theme.palette.background.paper\r\n                CSSProp.Padding "4px 24px"\r\n                CSSProp.Margin "24px 0"\r\n            ]\r\n            customCss "& a, & a code" [\r\n                CSSProp.Color theme.palette.secondary.main\r\n                TextDecoration "none"\r\n                customCss "&:hover" [\r\n                    TextDecoration "underline"\r\n                ]\r\n            ]\r\n            customCss "& img" [\r\n                MaxWidth "100%"\r\n            ]\r\n        ])\r\n    ]\r\n\r\n\r\ntype MarkdownProps =\r\n    abstract member text : string with get,set\r\n    inherit IClassesProps\r\n\r\n[<Emit("new $0.Renderer()")>]\r\nlet newRenderer m : obj = jsNative\r\n\r\nlet heading (text : string) (level : int) =\r\n    if level >= 4\r\n    then (level, text, level) |||> sprintf "<h%i>%s</h%i>"\r\n    else\r\n        let escapedText =\r\n            text\r\n                .ToLower()\r\n                .Replace("=&gt;", "")\r\n                .Replace("&lt;", "")\r\n                .Replace("/&gt;", "")\r\n                .Replace("<code>", "")\r\n                .Replace("</code>", "")\r\n                .Replace(" ", "-")\r\n                .Replace("\\t", "-")\r\n                .Replace("\\n", "-")\r\n        sprintf """\r\n        <h%i>\r\n            <a class="anchor-link" id="%s"></a>%s\r\n            <a class="anchor-link-style" href="#%s">\r\n                <svg viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path d="M46.9 13.9c-.5-.6-1.2-.94-2.07-.94h-6.67l1.86-8.98c.17-.85 0-1.7-.52-2.3-.48-.6-1.2-.94-2.07-.94-1.6 0-3.2 1.27-3.54 2.93l-.5 2.42c0 .07-.07.13-.07.2l-1.37 6.62H20.7l1.88-8.96c.16-.85 0-1.7-.53-2.3-.48-.6-1.2-.94-2.07-.94-1.65 0-3.2 1.27-3.56 2.93l-.52 2.58v.08l-1.37 6.64H7.3c-1.67 0-3.22 1.3-3.58 2.96-.16.86 0 1.7.52 2.3.48.6 1.2.93 2.07.93h6.97l-2 9.65H4c-1.67 0-3.22 1.27-3.56 2.94-.2.8 0 1.67.5 2.27.5.6 1.2.93 2.08.93H10l-1.84 9.05c-.2.84 0 1.67.52 2.3.5.6 1.25.92 2.08.92 1.66 0 3.2-1.3 3.55-2.94l1.94-9.33h11.22l-1.87 9.05c-.15.84.03 1.67.53 2.3.5.6 1.2.92 2.07.92 1.65 0 3.22-1.3 3.56-2.94l1.9-9.33h7c1.6 0 3.2-1.28 3.53-2.93.2-.87 0-1.7-.52-2.3-.48-.62-1.2-.96-2.05-.96h-6.7l2.02-9.65h6.93c1.67 0 3.22-1.27 3.56-2.92.2-.85 0-1.7-.5-2.3l-.04.03zM17.53 28.77l1.95-9.65H30.7l-1.97 9.66H17.5h.03z"/></svg>\r\n            </a></h%i>\r\n        """ level escapedText text escapedText level\r\n\r\nlet link (href : string) (title : string) (text : string) =\r\n    if href.StartsWith("http")\r\n    then sprintf """<a href="%s" target="_blank" title="%s">%s</a>""" href title text\r\n    else sprintf """<a href="%s" title="%s">%s</a>""" href title text\r\n\r\nlet renderer = newRenderer Marked.marked\r\n// renderer?heading <- heading\r\nrenderer?link <- link\r\n\r\nlet highlight code (lang : string) =\r\n    let language = function\r\n        | "fsharp" -> prism.languages?fsharp\r\n        | "js" | "jsx" -> prism.languages?javascript\r\n        | "css" -> prism.languages?css\r\n        | "shell" | "sh" -> prism.languages?shell\r\n        | _ -> prism.languages?fsharp\r\n    prism.highlight(code, language lang)\r\n\r\nlet markedOptions = createEmpty<MarkedOptions>\r\nmarkedOptions.gfm <- true\r\nmarkedOptions.tables <- true\r\nmarkedOptions.breaks <- false\r\nmarkedOptions.pedantic <- false\r\nmarkedOptions.sanitize <- false\r\nmarkedOptions.smartLists <- true\r\nmarkedOptions.smartypants <- false\r\nmarkedOptions.highlight <- highlight\r\nmarkedOptions.renderer <- renderer\r\n\r\nlet markdown (props : MarkdownProps) =\r\n    let markedText = Marked.marked(props.text, markedOptions)\r\n    div [\r\n        Class !!props.classes?markdown\r\n        DangerouslySetInnerHTML { __html = markedText }\r\n    ] []\r\n\r\nlet markdownWithStyles = withStyles (StyleType.Func markdownStyles) [ MProps.Flip (Some false) ] markdown\r\n\r\nlet view text =\r\n    let props = createEmpty<MarkdownProps>\r\n    props.text <- text\r\n    from markdownWithStyles props []\r\n'},function(e,n){e.exports='module Customization.CssInJs.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Components\r\n\r\nlet text = importDefault "./CssInJs.md"\r\n\r\nlet cssInJsText = """\r\n## Material-UI\'s styling solution\r\n\r\nIn previous versions, Material-UI has used LESS, then a custom inline-style solution to write the style of the\r\ncomponents, but these approaches have proven to be limited. Most recently, Material-UI has [moved toward](https://github.com/oliviertassinari/a-journey-toward-better-style)\r\na *CSS-in-JS* solution. It **unlocks many great features** (theme nesting, dynamic styles, self-support, etc.).\r\nWe think that it\'s the future:\r\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\r\n- [The future of component-based styling](https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32)\r\n- [Convert SCSS (Sass) to CSS-in-JS](https://egghead.io/courses/convert-scss-sass-to-css-in-js)\r\n\r\nSo, you may have noticed in the demos what *CSS-in-JS* looks like.\r\nWe use the higher-order component created by `withStyles`\r\nto inject an array of styles into the DOM as CSS, using JSS. Here\'s an example:\r\n"""\r\n\r\nlet jssText = """\r\n## JSS\r\n\r\nMaterial-UI\'s styling solution uses [JSS](https://github.com/cssinjs/jss) at its core.\r\nIt\'s a [high performance](https://github.com/cssinjs/jss/blob/master/docs/performance.md) JS to CSS compiler which works at runtime and server-side.\r\nIt is about 8 kB (minified and gzipped) and is extensible via a [plugins](https://github.com/cssinjs/jss/blob/master/docs/plugins.md) API.\r\n\r\nIf you end up using this styling solution in your codebase, you\'re going to need to *learn the API*.\r\nThe best place to start is by looking at the features that each [plugin](http://cssinjs.org/plugins/) provides. Material-UI uses few of them (see below)\r\nYou can always add new plugins if needed with the [`JssProvider`](https://github.com/cssinjs/react-jss#custom-setup) helper.\r\n\r\nIf you wish to build your own instance of `jss` **and** support *rtl* make sure you also include the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\r\nCheck the jss-rtl [readme](https://github.com/alitaheri/jss-rtl#simple-usage) to learn how.\r\n\r\n⚠️*There are no helpers of JssProvider in this library since it\'s not part of Material-UI. You would need to import it manually with* `Fable.Core.JsInterop` *helpers*\r\n"""\r\n\r\nlet classNamesText = """\r\n## Class names\r\n\r\nYou may have noticed that the class names generated by our styling solution are **non-deterministic**,\r\nso you can\'t rely on them to stay the same. The following CSS won\'t work:\r\n```css\r\n.MuiAppBar-root-12 {\r\n  opacity: 0.6\r\n}\r\n```\r\n\r\nInstead, you have to use the `classes` property of a component to override them.\r\nOn the other hand, thanks to the non-deterministic nature of our class names, we\r\ncan implement optimizations for development and production.\r\nThey are easy to debug in development and as short as possible in production:\r\n\r\n- development: `.MuiAppBar-root-12`\r\n- production: `.jss12`\r\n\r\nIf you don\'t like this default behavior, you can change it.\r\nJSS relies on the concept of [class name generator](http://cssinjs.org/js-api/#generate-your-own-class-names).\r\n"""\r\n\r\nlet pluginsText = """\r\n## Plugins\r\n\r\nJSS uses the concept of plugins to extend its core, allowing people to cherry-pick the features they need.\r\nYou pay the performance overhead for only what\'s you are using.\r\nGiven `withStyles` is Material-UI\'s internal styling solution, all the plugins aren\'t available by default. The following list is used:\r\n- [jss-global](http://cssinjs.org/jss-global/)\r\n- [jss-nested](http://cssinjs.org/jss-nested/)\r\n- [jss-camel-case](http://cssinjs.org/jss-camel-case/)\r\n- [jss-default-unit](http://cssinjs.org/jss-default-unit/)\r\n- [jss-vendor-prefixer](http://cssinjs.org/jss-vendor-prefixer/)\r\n- [jss-props-sort](http://cssinjs.org/jss-props-sort/)\r\n\r\nIt\'s a subset of [jss-preset-default](http://cssinjs.org/jss-preset-default/).\r\n"""\r\n\r\nlet withStylesApiText = """\r\n## API\r\n\r\n### `withStyles<\'P when \'P :> IClassesProps> (styles : StyleType) (options: StyleOption list) (fn : \'P -> ReactElement) : ComponentClass<\'P>`\r\n\r\nLink a style sheet with a component.\r\nIt does not modify the component passed to it; instead, it returns a new component with a `classes` property.\r\nThis `classes` object contains the name of the class names injected in the DOM.\r\n\r\nSome implementation details that might be interesting to being aware of:\r\n- It adds a `classes` property so you can override the injected class names from the outside.\r\n- It adds an `innerRef` property so you can get a reference to the wrapped component. The usage of `innerRef` is identical to `ref`.\r\n- It forwards *non React static* properties so this HOC is more "transparent".\r\n\r\n#### Arguments\r\n\r\n1. `styles : StyleType`: A function generating the styles or a list of styles options.\r\n  - `StyleType.Func of (ITheme->IStyles list)`: Use this version if you need to have access to the theme. It\'s provided as the argument\r\n  - `StyleType.Styles of IStyles list`: Use this option to pass a static list of styles\r\nIt will be linked to the component.\r\n2. `options : StyleOption list`: All options are optional, so you can pass an empty list\r\n  - `StyleOption.WithTheme of bool`: Defaults to `false`. Provide the `theme` object to the component as a property.\r\n  - `StyleOption.Name of string`: The name of the style sheet. Useful for debugging.\r\n    If the value isn\'t provided, it will try to fallback to the name of the component.\r\n  - `StyleOption.Flip of bool option`: When set to `Some false`, this sheet will opt-out the `rtl` transformation. When set to `Some true`, the styles are inversed. When set to `None`, it follows `theme.direction`.\r\n  - The other keys (`StyleOption.Custom of string*obj`) are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](http://cssinjs.org/js-api/#create-style-sheet).\r\n3. `fn : \'P -> ReactElement`: A function which renders a ReactElement with an argument of type `\'P` (has to inherit IClassesProps)\r\n```fsharp\r\ntype IClasses = interface end\r\ntype IClassesProps =\r\n    abstract member classes: IClasses\r\n```\r\n\r\n#### Returns\r\n\r\n`ClassComponent<\'P>`: Should be used with `Fable.Helpers.React.from`\r\n\r\n#### Example\r\n```fsharp\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.BackgroundColor "red"\r\n    ]\r\n]\r\n\r\nlet myFun (props : IClassesProps) =\r\n    div [ HTMLAttr.Class !!props.classes?root ] []\r\n\r\nlet withStylesFun = withStyles<IClassesProps> (StyleType.Styles styles) [] myFun\r\n\r\nlet view () =\r\n    from withStylesFun createEmpty []\r\n```\r\n"""\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view cssInJsText "./Customization/CssInJs/CssInJs.fs" Example.view\r\n        Markdown.view jssText\r\n        Markdown.view pluginsText\r\n        Markdown.view withStylesApiText\r\n    ]\r\n\r\n'},function(e,n){e.exports='module Customization.CssInJs.Example\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import.React\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\n// 1. We define the styles\r\nlet styles (theme : ITheme) : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Color "inherit"\r\n        CSSProp.TextDecoration "inherit"\r\n        CSSProp.Custom ("&:hover", [\r\n            CSSProp.TextDecoration "underline"\r\n        ] |> keyValueList CaseRules.LowerFirst)\r\n    ]\r\n    Styles.Primary [\r\n        CSSProp.Color theme.palette.primary.main\r\n    ]\r\n]\r\n[<StringEnum; RequireQualifiedAccess>]\r\ntype MyLinkVariant = | Primary\r\n\r\ntype MyLinkProps =\r\n    abstract children : ReactElement list with get,set\r\n    abstract variant : MyLinkVariant with get,set\r\n    abstract className : string with get,set\r\n    abstract href : string with get,set\r\n    inherit IClassesProps\r\n\r\nlet myLink (props : MyLinkProps) =\r\n    a [\r\n        classList [!!props.classes?root, true\r\n                   !!props.classes?primary, props.variant = MyLinkVariant.Primary\r\n                   props.className, true]\r\n        Href props.href\r\n    ] props.children\r\n\r\nlet myLinkStyled = withStyles<MyLinkProps> (StyleType.Func styles) [] myLink\r\n\r\nlet view () =\r\n    let props1 = createEmpty<MyLinkProps>\r\n    props1.href <- "#/customization/css-in-js"\r\n\r\n    let props2 = createEmpty<MyLinkProps>\r\n    props2.href <- "#/customization/css-in-js"\r\n    props2.variant <- MyLinkVariant.Primary\r\n\r\n    typography [ TypographyProp.Variant TypographyVariant.Subtitle1 ] [\r\n        from myLinkStyled props1 [ str "MyLink" ]\r\n        str " - "\r\n        from myLinkStyled props2 [ str "primary" ]\r\n    ]'},function(e,n){e.exports="module Customization.CssInJs.RenderProps\r\n\r\nopen Fable.Helpers.React\r\n\r\nlet view () =\r\n    div [] []\r\n"},function(e,n){e.exports="module Customization.CssInJs.StyledComponents\r\n\r\nopen Fable.Helpers.React\r\n\r\nlet view () =\r\n    div [] []\r\n\r\n"},function(e,n){e.exports='module Customization.DefaultTheme.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Components\r\n\r\nlet text = importDefault "./DefaultTheme.md"\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n    ]'},function(e,n){e.exports='module Customization.Overrides.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Components\r\n\r\nlet text = importDefault "./Overrides.md"\r\n\r\nlet classNamesText = """\r\n### Overriding with class names\r\n\r\nThe first way to override the style of a component is to use **class names**.\r\nEvery component provides a `className` property which is always applied to the root element.\r\n\r\nIn this example, we are using the [`withStyles()`](#/customization/css-in-js) higher-order\r\ncomponent to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via\r\nits `classes` prop. You can choose any other styling solution, or even plain CSS to create the styles, but be sure to\r\nconsider the [CSS injection order](https://material-ui.com/customization/css-in-js/#css-injection-order), as the CSS injected into the DOM\r\nby Material-UI to style a component has the highest specificity possible since the `<link>` is injected at the bottom\r\nof the `<head />` to ensure the components always render correctly.\r\n"""\r\n\r\nlet classNestingText = """\r\n### Overriding with classes\r\n\r\nWhen the `className` property isn\'t enough, and you need to access deeper elements, you can take advantage of the `classes` property to customize all the CSS injected by Material-UI for a given component.\r\nThe list of  classes for each\r\ncomponent is documented in the **Component API** section.\r\n\r\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`\'s `classes` prop to\r\nprovide an object that maps the **names of classes to override** (keys) to the **CSS class names to apply** (values).\r\nThe component\'s existing classes will continue to be injected, so it is only necessary to provide the specific styles\r\nyou wish to add or override.\r\n\r\nNotice that in addition to the button styling, the button label\'s capitalization has been changed:\r\n"""\r\n\r\nlet shortlandText = """\r\n#### Shorthand\r\n\r\nThe above code example can be condensed by using **the same CSS API** as the child component.\r\nIn this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the `Button` component.\r\n```fsharp\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n    ]\r\n    Styles.Label [\r\n        CSSProp.TextTransform "capitalize"\r\n    ]\r\n]\r\n\r\nlet styledButton = withStyles (StyleType.Styles styles) [] !!MaterialUI.Button\r\n```\r\n"""\r\n\r\nlet internalStateText = """\r\n#### Internal states\r\n\r\nAside from accessing nested elements, the `classes` property can be used to customize the internal states of Material-UI components.\r\nThe components internal states, like `:hover`, `:focus`, `disabled` and `selected`, are styled with a higher CSS specificity.\r\n[Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\r\nIn order to override the components internal states, **you need to increase specificity**.\r\nHere is an example with the `disable` state and the button component:\r\n\r\n```css\r\n.classes-state-root {\r\n  /* ... */\r\n}\r\n.classes-state-root.disabled {\r\n  color: white;\r\n}\r\n```\r\n\r\n```fsharp\r\n\r\nbutton [\r\n    HTMLAttr.Disabled true\r\n    MaterialProp.Classes [\r\n        ClassNames.Root "classes-state-root"\r\n        ClassNames.Disabled "disabled"\r\n    ]\r\n] []\r\n\r\n```\r\n\r\n#### Use `$ruleName` to reference a local rule within the same style sheet\r\n\r\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\r\n\r\n```fsharp\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Custom ("&$disabled", [\r\n            CSSProp.Color "white"\r\n        ] |> keyValueList CaseRules.LowerFirst)\r\n    ]\r\n    Styles.Disabled []\r\n]\r\n```\r\n\r\ncompiles to:\r\n\r\n```css\r\n.root-x.disable-x {\r\n  color: white;\r\n}\r\n```\r\n"""\r\n\r\nlet inlineStyleText = """\r\n### Overriding with inline-style\r\n\r\nThe second way to override the style of a component is to use the **inline-style** approach.\r\nEvery component provides a `style` property.\r\nThese properties are always applied to the root element.\r\n\r\nYou don\'t have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\r\n"""\r\n\r\nlet materialDesignVariations = """\r\n## 2. Material Design variations\r\n\r\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\r\n\r\nMaterial-UI attempts to implement all of these variations.\r\n"""\r\n\r\nlet globalThemeVariationText = """\r\n## 3. Global theme variation\r\n\r\n### Theme variables\r\n\r\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes by adjusting the [theme configuration variables](#/customization/themes).\r\n\r\n### Global theme override\r\n\r\nDo you want to customize **all the instances** of a component type?\r\n\r\nWhen the configuration variables aren\'t powerful enough,\r\nyou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM.\r\nLearn more about it in the [themes section](#/customization/themes) of the documentation.\r\n\r\n### Global CSS override\r\n\r\nYou can also customize all instances of a component with CSS.\r\nWe expose a `dangerouslyUseGlobalCSS` option to do so.\r\nLearn more about it in the [CSS in JS section](#/customization/css-in-js) of the documentation. It\'s very similar to how you would customize Bootstrap.\r\n"""\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view classNamesText "./Customization/Overrides/ClassNames.fs" ClassNames.view\r\n        Demo.view classNestingText "./Customization/Overrides/ClassNesting.fs" ClassNesting.view\r\n        Demo.view shortlandText "./Customization/Overrides/ShortlandClasses.fs" ShortlandClasses.view\r\n        Demo.view internalStateText "./Customization/Overrides/InternalState.fs" InternalState.view\r\n        Demo.view inlineStyleText "./Customization/Overrides/InlineStyle.fs" InlineStyle.view\r\n        Markdown.view "[When should I use inline-style vs classes?](https://material-ui.com/getting-started/faq/#when-should-i-use-inline-style-vs-classes-)"\r\n        Markdown.view materialDesignVariations\r\n        Markdown.view globalThemeVariationText\r\n    ]\r\n'},function(e,n){e.exports='module Customization.Overrides.ClassNames\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import.React\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Themes\r\n\r\n// We can inject some CSS into the DOM\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n    ]\r\n]\r\n\r\ntype ClassNamesProps =\r\n    abstract className : string with get,set\r\n    abstract children : ReactElement list with get,set\r\n    inherit IClassesProps\r\n\r\nlet classNames (props : ClassNamesProps) =\r\n    button\r\n        [ classList [ !!props.classes?root, true\r\n                      props.className,      true ] ]\r\n        props.children\r\n\r\nlet withStyles = withStyles<ClassNamesProps> (StyleType.Styles styles) [] classNames\r\n\r\nlet view () =\r\n    from withStyles createEmpty [ str "class names" ]'},function(e,n){e.exports='module Customization.Overrides.ClassNesting\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n    ]\r\n    Styles.Label [\r\n        CSSProp.TextTransform "capitalize"\r\n    ]\r\n]\r\n\r\nlet classNesting (props : IClassesProps) =\r\n    button [\r\n        MaterialProp.Classes [\r\n            ClassNames.Root !!props.classes?root\r\n            ClassNames.Label !!props.classes?label\r\n        ]\r\n    ] [ str "classes nesting" ]\r\n\r\nlet withStyles = withStyles (StyleType.Styles styles) [] classNesting\r\n\r\nlet view () =\r\n    from withStyles createEmpty<IClassesProps> []'},function(e,n){e.exports='module Customization.Overrides.InlineStyle\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\n\r\n// We can use inline style\r\nlet style = [\r\n    CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n    CSSProp.BorderRadius 3\r\n    CSSProp.Border 0\r\n    CSSProp.Color "white"\r\n    CSSProp.Height 48\r\n    CSSProp.Padding "0 30px"\r\n    CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n]\r\n\r\nlet view () =\r\n    button [ Style style ] [ str "inline-style" ]'},function(e,n){e.exports='module Customization.Overrides.InternalState\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n\r\n        // $disabled is a reference to the local disabled\r\n        // rule within the same style sheet\r\n        // By using &, we increase the specificity\r\n        CSSProp.Custom ("&$disabled", [\r\n            CSSProp.Background "rgba(0,0,0,0.12)"\r\n            CSSProp.Color "white"\r\n            CSSProp.BoxShadow "none"\r\n        ] |> keyValueList CaseRules.LowerFirst)\r\n    ]\r\n    Styles.Disabled []\r\n]\r\n\r\nlet classNesting (props : IClassesProps) =\r\n    button [\r\n        HTMLAttr.Disabled true\r\n        MaterialProp.Classes [\r\n            ClassNames.Root !!props.classes?root // class name, e.g. `classes-state-root-x`\r\n            ClassNames.Disabled !!props.classes?disabled // class name, e.g. `classes-state-disabled-x`\r\n        ]\r\n    ] [ str "classes state" ]\r\n\r\nlet withStyles = withStyles (StyleType.Styles styles) [] classNesting\r\n\r\nlet view () =\r\n    from withStyles createEmpty<IClassesProps> []\r\n\r\n'},function(e,n){e.exports='module Customization.Overrides.ShortlandClasses\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n    ]\r\n    Styles.Label [\r\n        CSSProp.TextTransform "capitalize"\r\n    ]\r\n]\r\n\r\nlet styledButton = withStyles (StyleType.Styles styles) [] !!MaterialUI.Button\r\n\r\nlet view () =\r\n    from styledButton createEmpty<IClassesProps> [ str "Classes Shortland" ]\r\n'},function(e,n){e.exports='module Customization.Themes.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Components\r\n\r\nlet text = importDefault "./Themes.md"\r\n\r\nlet colorToolText = """\r\n#### Color tool\r\n\r\nNeed inspiration? The Material Design team has built an awesome\r\n[palette configuration tool](https://material-ui.com/style/color/#color-tool) to help you.\r\n"""\r\n\r\nlet darkThemeText = """\r\n### Type (light /dark theme)\r\n\r\nYou can make the theme dark by setting `PaletteProp.Type` to `PaletteType.Dark`.\r\nWhile it\'s only a single property value change, internally it modifies the value of the following keys:\r\n- `palette.text`\r\n- `palette.divider`\r\n- `palette.background`\r\n- `palette.action`\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Type PaletteType.Dark\r\n                ]\r\n            ]\r\n```\r\n"""\r\n\r\nlet typographyThemeText = """\r\n### Typography\r\n\r\nToo many type sizes and styles at once can spoil any layout.\r\nThe theme provides a **limited set of type sizes** that work well together along with the layout grid.\r\nThese sizes are used across the components.\r\n\r\nHave a look at the following example regarding changing the default values, such as the font family.\r\n""" // If you want to learn more about typography, you can check out [the typography section](/style/typography/).\r\n\r\nlet typographyFontFamilyText = """\r\n### Typography - Font family\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                    ThemeTypographyProp.FontFamily ([\r\n                        "-apple-system"\r\n                        "BlinkMacSystemFont"\r\n                        "\\"Segou UI\\""\r\n                        "Roboto"\r\n                        "\\"Helvetica Neue\\""\r\n                        "Arial"\r\n                        "sans-serif"\r\n                        "\\"Apple Color Emoji\\""\r\n                        "\\"Segoe UI Emoji\\""\r\n                        "\\"Segoe UI Symbol\\"" ] |> String.concat(","))\r\n                ]\r\n            ]\r\n```\r\n"""\r\n\r\nlet typographyFontSizeText = """\r\n### Typography - Font size\r\n\r\nMaterial-UI uses `rem` units for the font size.\r\nThe browser `<html>` element default font size is `16px`, but browsers have an option to change this value,\r\nso `rem` units allow us to accommodate the user\'s settings, resulting in a much better user experience.\r\nUsers change font size settings for all kinds of reasons, from poor eyesight to choosing optimum settings\r\nfor devices that can be vastly different in size and viewing distance.\r\n\r\nTo change the font-size of Material-UI you can provide a `ThemeTypographyProp.FontSize` property.\r\nThe default value is `14px`.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.FontSize "12"\r\n                ]\r\n            ]\r\n```\r\nThe computed font size by the browser follows this mathematical equation:\r\n\r\n![font-size](img/font-size.gif)\r\n"""\r\n\r\nlet htmlFontSizeText = """\r\n### Typography - HTML font size\r\n\r\nYou might want to change the `<html>` element default font size. For instance, when using the [10px simplification](https://www.sitepoint.com/understanding-and-using-rem-units-in-css/).\r\nWe provide a `ThemeTypographyProp.HtmlFontSize` theme property for this use case.\r\nIt\'s telling Material-UI what\'s the font-size on the `<html>` element is.\r\nIt\'s used to adjust the `rem` value so the calculated font-size always match the specification.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    // Tell Material-UI what\'s the font-size on the html element is.\r\n                    ThemeTypographyProp.HtmlFontSize "12"\r\n                ]\r\n            ]\r\n```\r\n\r\n```css\r\nhtml {\r\n  font-size: 62.5%; /* 62.5% of 16px = 10px */\r\n}\r\n```\r\n\r\n*You need to apply the above CSS on the html element of this page to see the below demo rendered correctly*\r\n"""\r\n\r\nlet customVariablesText = """\r\n### Custom variables\r\n\r\nWhen using Material-UI\'s [styling solution](#/customization/css-in-js) with your own components,\r\nyou can also take advantage of the theme.\r\nIt can be convenient to add additional variables to the theme so you can use them everywhere.\r\nFor instance:\r\n"""\r\n\r\nlet otherVariablesText = """\r\n### Other variables\r\n\r\nIn addition to the palette, dark and light types, and typography, the theme normalizes implementation by providing many more default values, such as breakpoints, shadows, transitions, etc.\r\nYou can check out the \r\n<a href="https://material-ui.com/customization/default-theme/" target="_blank">default theme section</a> to view the default theme in full.\r\n"""\r\n\r\nlet overrideCSSText = """\r\n## Customizing all instances of a component type\r\n\r\n### CSS\r\n\r\nWhen the configuration variables aren\'t powerful enough, you can take advantage of the\r\n`ThemeProp.Overrides` key of the `theme` to potentially change every single **style** injected by Material-UI into the DOM.\r\nThat\'s a really powerful feature.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Overrides [\r\n                    Overrides.MuiButton [ // Name of the component ⚛️ / style sheet\r\n                        Styles.Root [ // Name of the rule\r\n                            CSSProp.Color "white" // Some CSS\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n"""\r\n\r\nlet overridesPropertiesText = """\r\n### Properties\r\n\r\nYou can also apply properties on all the instances of a component type.\r\nWe expose a `ThemeProp.Props` key in the `theme` for this use case.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Props [\r\n                    // Name of the component ⚛️\r\n                    ThemePropsProp.MuiButtonBase [\r\n                        // The properties to apply\r\n                        MaterialProp.DisableRipple true // No more ripple, on the whole application!\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n"""\r\n\r\nlet withThemeText = """\r\n## Accessing the theme in a component\r\n\r\nYou might need to access the theme variables inside your React components.\r\nLet\'s say you want to display the value of the primary color, you can use the `withTheme()` higher-order component to do so. Here is an example:\r\n"""\r\n\r\nlet nestedText = """\r\n## Nesting the theme\r\n\r\nThe theming solution is very flexible, as you can nest multiple theme providers.\r\nThis can be really useful when dealing with different area of your application that have distinct appearance from each other.\r\n"""\r\n\r\nlet performanceNote = """\r\n#### A note on performance\r\n\r\nThe performance implications of nesting the `MuiThemeProvider` component are linked to JSS\'s work behind the scenes.\r\nThe main point to understand is that we cache the injected CSS with the following tuple `(styles, theme)`.\r\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it\'s better to render a limited number of theme objects.\r\n- `styles`: The larger the styles object is, the more work is needed.\r\n"""\r\n\r\nlet apiText = """\r\n## API\r\n\r\n### `muiThemeProvider`\r\n\r\nThis component takes a `MuiThemeProviderProp.Theme` property, and makes the `theme` available down the React tree thanks to React context.\r\nIt should preferably be used at **the root of your component tree**.\r\n\r\n\x3c!--You can see the full properties API in [this dedicated page](/api/mui-theme-provider/).--\x3e\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\nlet theme = createMuiTheme []\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        div [] [] // your application components\r\n    ]\r\n```\r\n\r\n### `createMuiTheme (options : ThemeProp list) : ITheme`\r\n\r\nGenerate a theme base on the options received.\r\n\r\n#### Arguments\r\n\r\n1. `options` (*ThemeProp list*): Takes an incomplete list of `ThemeProp`s and adds the missing parts.\r\n\r\n```fsharp\r\ntype ThemeProp =\r\n    | Direction of Themes.TextDirection\r\n    | Shadows of string list\r\n    | [<Erase>] Custom of string*obj\r\n\r\nThemeProp.Palette (props : PaletteProp list) : ThemeProp\r\nThemeProp.Shape (props : ShapeProp list) : ThemeProp\r\nThemeProp.Spacing (props : SpacingProp list) : ThemeProp\r\nThemeProp.Typography (props : ThemeTypographyProp list) : ThemeProp\r\nThemeProp.ZIndex (props : ZIndexProp list) : ThemeProp\r\nThemeProp.Overrides (props : IOverridesProp list) : ThemeProp\r\n```\r\n\r\nYou can find full list of `Theme` options and subprops [here](https://github.com/mvsmal/fable-material-ui/blob/master/src/Fable.Helpers.MaterialUI.Props.fs#L1711-L1962)\r\n\r\n#### Returns\r\n\r\n`theme` (*ITheme*): A complete, ready to use theme object.\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.purple.``500``\r\n                    ]\r\n                    PaletteProp.Secondary [\r\n                        PaletteIntentionProp.Main "#11cb5f"\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n\r\n\r\n### `withTheme<\'P when \'P :> IThemeProps> (fn : (\'P -> ReactElement)) : ClassComponent<\'P>`\r\n\r\nProvide the `theme` object as a property of the input component so it can be used\r\nin the render method.\r\n\r\n#### Arguments\r\n\r\n1. `fn` (*\'P -> ReactElement*): The function which expects `props : \'P` argument and returns `ReactElement`.\r\n`\'P` should inherit `IThemeProps`\r\n\r\n#### Returns\r\n\r\n`Component` (*ClassComponent<\'P>*): The new component created.\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\nlet myFun (props : IThemeProps) =\r\n    div [] [ str props.theme.palette.primary.main ]\r\n\r\nlet myFunWithTheme = withTheme myFun\r\n\r\nlet myComponent () =\r\n    from myFunWithTheme createEmpty<IThemeProps> []\r\n\r\n```\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\ntype MyFunProps =\r\n    abstract foo : string with get,set\r\n    inherit IThemeProps\r\n\r\nlet myFun (props : MyFunProps) =\r\n    div [] [\r\n        str props.theme.palette.primary.main \r\n        str props.foo\r\n    ]\r\n\r\nlet myFunWithTheme = withTheme myFun\r\n\r\nlet myComponent () =\r\n    let props = createEmpty<MyFunProps>\r\n    props.foo <- "bar"\r\n    from myFunWithTheme props []\r\n```\r\n"""\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view "#### Example" "./Customization/Themes/Palette.fs" Palette.view\r\n        Markdown.view colorToolText\r\n        Demo.view darkThemeText "./Customization/Themes/DarkTheme.fs" DarkTheme.view\r\n        Demo.view typographyThemeText "./Customization/Themes/TypographyTheme.fs" TypographyTheme.view\r\n        Markdown.view typographyFontFamilyText\r\n        Markdown.view typographyFontSizeText\r\n        Demo.view htmlFontSizeText "./Customization/Themes/FontSizeTheme.fs" FontSizeTheme.view\r\n        Demo.view customVariablesText "./Customization/Themes/CustomStyles.fs" CustomStyles.view\r\n        Markdown.view otherVariablesText\r\n        Demo.view overrideCSSText "./Customization/Themes/OverrideCss.fs" OverrideCss.view\r\n        Demo.view overridesPropertiesText "./Customization/Themes/OverrideProperties.fs" OverrideProperties.view\r\n        Demo.view withThemeText "./Customization/Themes/WithTheme.fs" WithTheme.view\r\n        Demo.view nestedText "./Customization/Themes/Nested.fs" Nested.view\r\n        Markdown.view performanceNote\r\n        Markdown.view apiText\r\n\r\n    ]'},function(e,n){e.exports='module Customization.Themes.CustomStyles\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Color theme?status?danger\r\n            CSSProp.Custom ("&$checked", [\r\n                CSSProp.Color theme?status?danger\r\n            ] |> keyValueList CaseRules.LowerFirst)\r\n        ]\r\n        Styles.Checked []\r\n    ]\r\n\r\nlet customCheckbox (props : IClassesProps) =\r\n    checkbox [\r\n        HTMLAttr.DefaultChecked true\r\n        MaterialProp.Classes [\r\n            ClassNames.Root !!props.classes?root\r\n            ClassNames.Checked !!props.classes?``checked``\r\n        ]\r\n    ]\r\n\r\nlet customCheckboxWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] customCheckbox\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Custom ("status", [\r\n                    ("danger", Colors.orange.``500``)\r\n                ] |> keyValueList CaseRules.LowerFirst)\r\n            ]\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        from customCheckboxWithStyles createEmpty []\r\n    ]'},function(e,n){e.exports='module Customization.Themes.DarkTheme\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Type PaletteType.Dark\r\n                ]\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n            ]\r\n\r\nlet darkThemeView (props : IThemeProps) =\r\n    let theme = props.theme\r\n    let primaryText = theme.palette.text.primary\r\n    let primaryColor = theme.palette.primary.main\r\n    \r\n    let primaryTextStyles = [\r\n        CSSProp.BackgroundColor theme.palette.background.``default``\r\n        CSSProp.Padding "8px 16px"\r\n        CSSProp.Color primaryText\r\n    ]\r\n    let primaryColorStyles = [\r\n        CSSProp.BackgroundColor primaryColor\r\n        CSSProp.Padding "8px 16px"\r\n        CSSProp.Color theme.palette.common.white\r\n    ]\r\n\r\n    div [ Style [ Width 300 ] ] [\r\n        typography [ Style primaryColorStyles ] [\r\n            str ("Primary color " + primaryColor)\r\n        ]\r\n        typography [ Style primaryTextStyles ] [\r\n            str ("Primary text " + primaryText)\r\n        ]\r\n    ]\r\n\r\nlet withTheme = withTheme darkThemeView\r\n\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        from withTheme createEmpty<IThemeProps> []\r\n    ]\r\n'},function(e,n){e.exports='module Customization.Themes.FontSizeTheme\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                    ThemeTypographyProp.HtmlFontSize "10"\r\n                ]\r\n            ]\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        typography [] [ str "body1" ]\r\n    ]\r\n'},function(e,n){e.exports='module Customization.Themes.Nested\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\nopen Fable.Import\r\n\r\nlet styles (theme : ITheme) : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Color theme?status?color\r\n        CSSProp.Custom ("&$checked", [\r\n            CSSProp.Color theme?status?color\r\n        ] |> keyValueList CaseRules.LowerFirst)\r\n    ]\r\n    Styles.Checked []\r\n]\r\n\r\nlet nestedCheckBox (props : IClassesProps) =\r\n    checkbox [\r\n        HTMLAttr.DefaultChecked true\r\n        MaterialProp.Classes [\r\n            ClassNames.Root !!props.classes?root\r\n            ClassNames.Checked !!props.classes?``checked``\r\n        ]\r\n    ]\r\n\r\nlet nestedWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] nestedCheckBox\r\n\r\nlet theme1 = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Custom ("status", [\r\n                    CSSProp.Color Colors.orange.``500``\r\n                ] |> keyValueList CaseRules.LowerFirst)\r\n            ]\r\n\r\nlet theme2 = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Custom ("status", [\r\n                    CSSProp.Color Colors.green.``500``\r\n                ] |> keyValueList CaseRules.LowerFirst)\r\n            ]\r\n\r\nlet theme3 (theme : ITheme) =\r\n    let newTheme : ITheme = !!JS.Object.assign(createEmpty, theme)\r\n    newTheme?status?color <- Colors.pink.``500``\r\n    newTheme\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme1) ] [\r\n        from nestedWithStyles createEmpty []\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme2) ] [\r\n            from nestedWithStyles createEmpty []\r\n        ]\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Func theme3) ] [\r\n            from nestedWithStyles createEmpty []\r\n        ]\r\n    ]\r\n'},function(e,n){e.exports='module Customization.Themes.OverrideCss\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Overrides [\r\n                    OverridesProp.MuiButton [\r\n                        Styles.Root [\r\n                            CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n                            CSSProp.BorderRadius 3\r\n                            CSSProp.Border 0\r\n                            CSSProp.Color "white"\r\n                            CSSProp.Height 48\r\n                            CSSProp.Padding "0 30px"\r\n                            CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        button [] [ str "Override CSS" ]\r\n    ]\r\n'},function(e,n){e.exports='module Customization.Themes.OverrideProperties\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Props [\r\n                    // Name of the component ⚛️\r\n                    ThemePropsProp.MuiButtonBase [\r\n                        // The properties to apply\r\n                        MaterialProp.DisableRipple true // No more ripple, on the whole application 💣!\r\n                    ]\r\n                ]\r\n            ]\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        button [] [ str "Override properties" ]\r\n    ]\r\n\r\n'},function(e,n){e.exports='module Customization.Themes.Palette\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.purple.``500``\r\n                    ]\r\n                    PaletteProp.Secondary [\r\n                        PaletteIntentionProp.Main "#11cb5f"\r\n                    ]\r\n                ]\r\n            ]\r\n\r\nlet view () =\r\n    muiThemeProvider [\r\n        MuiThemeProviderProp.Theme (ProviderTheme.Theme theme)\r\n    ] [\r\n        button [ MaterialProp.Color ComponentColor.Primary ] [ str "Primary" ]\r\n        button [ MaterialProp.Color ComponentColor.Secondary ] [ str "Secondary" ]\r\n    ]'},function(e,n){e.exports='module Customization.Themes.TypographyTheme\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Display "flex"\r\n    ]\r\n]\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                    ThemeTypographyProp.FontFamily ([\r\n                        "-apple-system"\r\n                        "BlinkMacSystemFont"\r\n                        "\\"Segou UI\\""\r\n                        "Roboto"\r\n                        "\\"Helvetica Neue\\""\r\n                        "Arial"\r\n                        "sans-serif"\r\n                        "\\"Apple Color Emoji\\""\r\n                        "\\"Segoe UI Emoji\\""\r\n                        "\\"Segoe UI Symbol\\"" ] |> String.concat(","))\r\n                    ThemeTypographyProp.FontWeightMedium 500\r\n                    ThemeTypographyProp.Body1 [\r\n                        TextStyleProp.FontWeight "500"\r\n                    ]\r\n                    ThemeTypographyProp.Subtitle1 [\r\n                        TextStyleProp.FontSize "12"\r\n                    ]\r\n                    ThemeTypographyProp.Button [\r\n                        !!("fontStyle", "italic")\r\n                    ]\r\n                ]\r\n            ]\r\n\r\nlet typographyTheme (props : IClassesProps) =\r\n    let children =\r\n        div [] [\r\n            typography [] [ str "body1" ]\r\n            typography [ TypographyProp.Variant TypographyVariant.Subtitle1 ] [ str "subtitle" ]\r\n            button [] [ str "button" ]\r\n        ]\r\n    \r\n    div [ HTMLAttr.Class !!props.classes?root ] [\r\n        children\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n            children\r\n        ]\r\n    ]\r\n\r\nlet withStyles = withStyles (StyleType.Styles styles) [] typographyTheme\r\n\r\nlet view () =\r\n    from withStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Customization.Themes.WithTheme\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\n\r\nlet darkThemeView (props : IThemeProps) =\r\n    let theme = props.theme\r\n    let primaryText = theme.palette.text.primary\r\n    let primaryColor = theme.palette.primary.main\r\n    \r\n    let primaryTextStyles = [\r\n        CSSProp.BackgroundColor theme.palette.background.``default``\r\n        CSSProp.Padding ((theme.spacing.unit, theme.spacing.unit * 2) ||> sprintf "%dpx %dpx")\r\n        CSSProp.Color primaryText\r\n    ]\r\n    let primaryColorStyles = [\r\n        CSSProp.BackgroundColor primaryColor\r\n        CSSProp.Padding ((theme.spacing.unit, theme.spacing.unit * 2) ||> sprintf "%dpx %dpx")\r\n        CSSProp.Color theme.palette.common.white\r\n    ]\r\n\r\n    div [ Style [ Width 300 ] ] [\r\n        typography [ Style primaryColorStyles ] [\r\n            str ("Primary color " + primaryColor)\r\n        ]\r\n        typography [ Style primaryTextStyles ] [\r\n            str ("Primary text " + primaryText)\r\n        ]\r\n    ]\r\n\r\nlet withTheme = withTheme darkThemeView\r\n\r\n\r\nlet view () =\r\n    from withTheme createEmpty<IThemeProps> []'},function(e,n){e.exports='module Demos.AppBar.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.AppBar\r\nopen Components\r\n\r\nlet text = importDefault "./AppBar.md"\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view "## Simple App Bar" "./Demos/AppBar/SimpleAppBar.fs" SimpleAppBar.view\r\n        Demo.view "## App Bar with buttons" "./Demos/AppBar/AppBarWithButtons.fs" AppBarWithButtons.view\r\n    ]'},function(e,n){e.exports='module Demos.AppBar.AppBarWithButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            FlexGrow 1\r\n        ]\r\n        Styles.Custom\r\n            ("flex", [\r\n                FlexGrow 1\r\n            ])\r\n        Styles.Custom\r\n            ("menuButton", [\r\n                CSSProp.MarginLeft -12\r\n                CSSProp.MarginRight 20\r\n            ])\r\n    ]\r\n\r\nlet appBar (props : IClassesProps) =\r\n    let classes = props.classes\r\n    div [ Class !!classes?root ] [\r\n        appBar [\r\n            AppBarProp.Position AppBarPosition.Static\r\n        ] [\r\n            toolbar [] [\r\n                iconButton [\r\n                    Class !!classes?menuButton\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                    HTMLAttr.Custom ("aria-label", "Menu")\r\n                ] [ icon [] [ str "menu" ] ]\r\n                typography [\r\n                    Class !!classes?flex\r\n                    TypographyProp.Variant TypographyVariant.H6\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "News" ]\r\n                button [\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "Login" ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet appBarWithStyles = withStyles<IClassesProps> (StyleType.Styles styles) [] appBar\r\n\r\nlet view () =\r\n    from appBarWithStyles createEmpty []'},function(e,n){e.exports='module Demos.AppBar.SimpleAppBar\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list =\r\n    [ Styles.Root [ CSSProp.FlexGrow 1 ] ]\r\n\r\nlet appBar (props : IClassesProps) =\r\n    div [ Class !!props.classes?root ] [\r\n        appBar [\r\n            AppBarProp.Position AppBarPosition.Static\r\n            MaterialProp.Color ComponentColor.Default\r\n        ] [\r\n            toolbar [] [\r\n                typography [\r\n                    TypographyProp.Variant TypographyVariant.H6\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "Photos" ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet appBarWithStyles = withStyles<IClassesProps> (StyleType.Styles styles) [] appBar\r\n\r\nlet view () =\r\n    from appBarWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Avatars.View\r\nopen Fable.Helpers.React\r\n\r\nlet root () =\r\n    div [] [ str "avatars" ]\r\n'},function(e,n){e.exports='module Demos.Buttons.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.Buttons\r\nopen Components\r\n\r\nlet text = importDefault "./Buttons.md"\r\n\r\nlet textButtonsText = """\r\n## Text Buttons\r\n\r\n[Text buttons](https://material.io/design/components/buttons.html#text-button)\r\nare typically used for less-pronounced actions, including those located:\r\n\r\n- In dialogs\r\n- In cards\r\n\r\nIn cards, text buttons help maintain an emphasis on card content.\r\n"""\r\n\r\nlet outlinedButtonsText = """\r\n## Outlined Buttons\r\n\r\n[Outlined buttons](https://material.io/design/components/buttons.html#outlined-button)\r\nare medium-emphasis buttons. They contain actions that are important,\r\nbut aren’t the primary action in an app.\r\n\r\n### Alternatives\r\n\r\nOutlined buttons are also a lower emphasis alternative to contained buttons,\r\nor a higher emphasis alternative to text buttons.\r\n"""\r\n\r\nlet containedButtonsText = """\r\n## Contained Buttons\r\n\r\n[Contained buttons](https://material.io/design/components/buttons.html#contained-button)\r\nare high-emphasis, distinguished by their use of elevation and fill.\r\nThey contain actions that are primary to your app.\r\n\r\nThe last example of this demo show how to use an upload button.\r\n"""\r\n\r\nlet floatingButtonsText = """\r\n## Floating Action Buttons\r\n\r\nA [floating action button](https://material.io/design/components/buttons-floating-action-button.html)\r\n(FAB) performs the primary, or most common, action on a screen.\r\nIt appears in front of all screen content, typically as a circular shape with an icon in its center.\r\nFABs come in three types: regular, mini, and extended.\r\n\r\nOnly use a FAB if it is the most suitable way to present a screen’s primary action.\r\n\r\nOnly one floating action button is recommended per screen to represent the most common action.\r\n"""\r\n\r\nlet floatingButtonZoomText = """\r\nThe floating action button animates onto the screen as an expanding piece of material, by default.\r\n\r\nA floating action button that spans multiple lateral screens (such as tabbed screens) should briefly disappear,\r\nthen reappear if its action changes.\r\n\r\nThe Zoom transition can be used to achieve this. Note that since both the exiting and entering\r\nanimations are triggered at the same time, we use `enterDelay` to allow the outgoing Floating Action Button\'s\r\nanimation to finish before the new one enters.\r\n"""\r\n\r\nlet buttonSizesText = """\r\n## Sizes\r\n\r\nFancy larger or smaller buttons? Use the `ButtonProp.Size` or the `ButtonProp.Mini` property.\r\n"""\r\n\r\nlet iconButtonsText = """\r\n## Icon Buttons\r\n\r\nIcon buttons are commonly found in app bars and toolbars.\r\n\r\nIcons are also appropriate for toggle buttons that allow a single choice to be selected or\r\ndeselected, such as adding or removing a star to an item.\r\n"""\r\n\r\nlet iconLabelButtonsText = """\r\n### Buttons with icons and label\r\n\r\nSometimes you might want to have icons for certain button to enhance the UX of the application as we recognize logos more easily than plain text. For example, if you have a delete button you can label it with a dustbin icon.\r\n"""\r\n\r\nlet customizedButtonsText = """\r\n## Customized Buttons\r\n\r\nIf you have been reading the [overrides documentation page](#/customization/overrides)\r\nbut you are not confident jumping in,\r\nhere are examples of how you can change the main color of a Button using classes,\r\nand using a theme; and of a Bootstrap style Button.\r\n"""\r\n\r\nlet complexButtonsText = """\r\n## Complex Buttons\r\n\r\nThe Text Buttons, Contained Buttons, Floating Action Buttons and Icon Buttons are built on top of the same component: the `ButtonBase`.\r\nYou can take advantage of this lower level component to build custom interactions.\r\n"""\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view textButtonsText "./Demos/Buttons/TextButtons.fs" TextButtons.view\r\n        Demo.view outlinedButtonsText "./Demos/Buttons/OutlinedButtons.fs" OutlinedButtons.view\r\n        Demo.view containedButtonsText "./Demos/Buttons/ContainedButtons.fs" ContainedButtons.view\r\n        Demo.view floatingButtonsText "./Demos/Buttons/FloatingActionButtons.fs" FloatingActionButtons.view\r\n        Demo.view floatingButtonZoomText "./Demos/Buttons/FloatingActionButtonZoom.fs" FloatingActionButtonZoom.view\r\n        Demo.view buttonSizesText "./Demos/Buttons/ButtonSizes.fs" ButtonSizes.view\r\n        Demo.view iconButtonsText "./Demos/Buttons/IconButtons.fs" IconButtons.view\r\n        Demo.view iconLabelButtonsText "./Demos/Buttons/IconLabelButtons.fs" IconLabelButtons.view\r\n        Demo.view customizedButtonsText "./Demos/Buttons/CustomizedButtons.fs" CustomizedButtons.view\r\n    ]\r\n'},function(e,n){e.exports='module Demos.Buttons.ButtonSizes\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [ Styles.Button [ CSSProp.Margin theme.spacing.unit ] ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            fab [\r\n                FabProp.Size FabSize.Small\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n            fab [\r\n                FabProp.Size FabSize.Medium\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n            fab [\r\n                FabProp.Size FabSize.Large\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports="module Demos.Buttons.ComplexButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n"},function(e,n){e.exports='module Demos.Buttons.ContainedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Default" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Href "#/demos/buttons"\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "contained-button-file"\r\n            HTMLAttr.Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "contained-button-file" ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.CustomizedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\nmodule R = Fable.Helpers.React\r\n\r\nlet toObj = keyValueList CaseRules.LowerFirst\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [ CSSProp.Margin theme.spacing.unit])\r\n        Styles.Custom\r\n            ("cssRoot", [\r\n                CSSProp.Color (theme.palette.getContrastText(Colors.purple.``500``))\r\n                CSSProp.BackgroundColor Colors.purple.``500``\r\n                CSSProp.Custom\r\n                    ("&:hover", [ CSSProp.BackgroundColor Colors.purple.``700`` ] |> toObj)\r\n            ])\r\n        Styles.Custom\r\n            ("boostrapRoot", [\r\n                CSSProp.BoxShadow "none"\r\n                CSSProp.TextTransform "none"\r\n                CSSProp.FontSize 16\r\n                CSSProp.Padding "6px 12px"\r\n                CSSProp.Border "1px solid"\r\n                CSSProp.BackgroundColor "#007bff"\r\n                CSSProp.BorderColor "#007bff"\r\n                CSSProp.FontFamily\r\n                    ([ "-apple-system"\r\n                       "BlinkMacSystemFont"\r\n                       @"""Segoe UI"""\r\n                       "Roboto"\r\n                       @"""Helvetica Neue"""\r\n                       "Arial"\r\n                       "sans-serif"\r\n                       @"""Apple Color Emoji"""\r\n                       @"""Segoe UI Emoji"""\r\n                       @"""Segoe UI Symbol"""] |> String.concat ",")\r\n                CSSProp.Custom\r\n                    ("&:hover", [\r\n                        CSSProp.BackgroundColor "#0069d9"\r\n                        CSSProp.BorderColor "#0069d9"\r\n                    ] |> toObj)\r\n                CSSProp.Custom\r\n                    ("&:active", [\r\n                        CSSProp.BoxShadow "none"\r\n                        CSSProp.BackgroundColor "#0062cc"\r\n                        CSSProp.BorderColor "#0062cc"\r\n                    ] |> toObj)\r\n                CSSProp.Custom\r\n                    ("&:focus", [\r\n                        CSSProp.BoxShadow "0 0 0 0.2rem rgba(0,123,255,.5)"\r\n                    ] |> toObj)\r\n            ])\r\n    ]\r\n\r\nlet theme = createMuiTheme [\r\n                Typography [\r\n                    // Needed until Material-UI v4 to avoid deprecation warning: https://material-ui.com/style/typography#migration-to-typography-v2\r\n                    UseNextVariants true\r\n                ]\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [ PaletteIntentionProp.Main Colors.green.``500`` ]\r\n                ]\r\n            ]\r\n\r\n\r\nlet buttons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [ HTMLAttr.Class !!classes?container ] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class ([!!classes?margin; !!classes?cssRoot] |> String.concat " ")\r\n        ] [ R.str "Custom CSS" ]\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?margin\r\n            ] [ R.str "MuiThemeProvider" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            MaterialProp.DisableRipple true\r\n            HTMLAttr.Class ([!!classes?margin; !!classes?bootstrapRoot] |> String.concat " ")\r\n        ] [ R.str "Bootstrap" ]\r\n    ]\r\n\r\nlet buttonsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.FloatingActionButtonZoom\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Import.React\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\nmodule R = Fable.Helpers.React\r\n\r\nlet tabContainer children =\r\n    typography [\r\n        MaterialProp.Component ("div" |> U3.Case1)\r\n        Style [ CSSProp.Padding (8 * 3) ]\r\n    ] children\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.BackgroundColor theme.palette.background.paper\r\n            CSSProp.Width 500\r\n            CSSProp.Position "relative"\r\n            CSSProp.MinHeight 200\r\n        ]\r\n        Styles.Fab [\r\n            CSSProp.Position "absolute"\r\n            CSSProp.Bottom (theme.spacing.unit * 2)\r\n            CSSProp.Right (theme.spacing.unit * 2)\r\n        ]\r\n        Styles.Custom (\r\n            "fabGreen",\r\n            [\r\n                CSSProp.Color theme.palette.common.white\r\n                CSSProp.BackgroundColor Colors.green.``500``\r\n            ]\r\n        )\r\n    ]\r\n\r\n\r\ntype Fab = {\r\n    color : ComponentColor\r\n    className : string\r\n    icon : ReactElement\r\n}\r\n\r\n\r\ntype ButtonsProps =\r\n    inherit IClassesProps\r\n\r\n\r\ntype ButtonsState = {\r\n    value : int\r\n}\r\n\r\ntype FloatingActionButtonZoom (props) =\r\n    inherit Component<ButtonsProps,ButtonsState>(props)\r\n    do base.setInitState { value = 0 }\r\n\r\n    member this.handleChange _ index =\r\n        this.setState (fun s _ -> { s with value = index })\r\n\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n        let theme : ITheme = !!this.props?theme\r\n        let transitionExit = theme.transitions.duration.leavingScreen\r\n        let transitionsDuration = [\r\n            TransitionDurationProp.Enter theme.transitions.duration.enteringScreen\r\n            TransitionDurationProp.Exit transitionExit\r\n        ]\r\n        let fabs = [\r\n            {\r\n                color = ComponentColor.Primary\r\n                className = !!classes?fab\r\n                icon = icon [] [ R.str "add_icon" ]\r\n            }\r\n            {\r\n                color = ComponentColor.Secondary\r\n                className = !!classes?fab\r\n                icon = icon [] [ R.str "edit_icon" ]\r\n            }\r\n            {\r\n                color = ComponentColor.Inherit\r\n                className = !!classes?fab + " " + !!classes?fabGreen\r\n                icon = icon [] [ R.str "keyboard_arrow_up_icon" ]\r\n            }\r\n        ]\r\n\r\n        R.div [ Class !!classes?root ] [\r\n            yield appBar [\r\n                AppBarProp.Position AppBarPosition.Static\r\n                MaterialProp.Color ComponentColor.Default\r\n            ] [\r\n                tabs [\r\n                    MaterialProp.Value this.state.value\r\n                    TabsProp.OnChange this.handleChange\r\n                    TabsProp.IndicatorColor TabsIndicatorColor.Primary\r\n                    TabsProp.TextColor TabsTextColor.Primary\r\n                    MaterialProp.FullWidth true\r\n                ] [\r\n                    tab [ MaterialProp.Label (R.str "Item One" |> U2.Case1 |> U3.Case1)]\r\n                    tab [ MaterialProp.Label (R.str "Item Two" |> U2.Case1 |> U3.Case1)]\r\n                    tab [ MaterialProp.Label (R.str "Item Three" |> U2.Case1 |> U3.Case1)]\r\n                ]\r\n            ]\r\n            yield (match this.state.value with\r\n                   | 1 -> tabContainer [ R.str "Item Two"]\r\n                   | 2 -> tabContainer [ R.str "Item Three"]\r\n                   | _ -> tabContainer [ R.str "Item One" ] )\r\n            yield! fabs |> List.mapi (fun i f ->\r\n                zoom [\r\n                    Key (f.color |> string)\r\n                    MaterialProp.In (this.state.value = i)\r\n                    MaterialProp.Timeout (transitionsDuration |> U2.Case2)\r\n                    Style [\r\n                        CSSProp.TransitionDelay\r\n                            ((if this.state.value = i then transitionExit else 0.) |> sprintf "%.0fms")\r\n                    ]\r\n                    TransitionProp.UnmountOnExit true\r\n                ] [\r\n                    fab [\r\n                        HTMLAttr.Class f.className\r\n                        MaterialProp.Color f.color\r\n                    ] [ f.icon ]\r\n                ])\r\n        ]\r\n\r\nlet floatingButtonsZoom props =\r\n    R.ofType<FloatingActionButtonZoom,_,_> props []\r\n\r\nlet floatingButtonsZoomWithStyles =\r\n    withStyles<ButtonsProps> (StyleType.Func styles) [ StyleOption.WithTheme true ] floatingButtonsZoom\r\n\r\nlet view () =\r\n    R.from floatingButtonsZoomWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.FloatingActionButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Custom ("extendedIcon", [ CSSProp.MarginRight theme.spacing.unit ])\r\n    ]\r\n\r\nlet fabs (props : IClassesProps) =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        fab [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "add_icon" ]]\r\n        fab [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "edit_icon" ]]\r\n        fab [\r\n            FabProp.Variant FabVariant.Extended\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ \r\n            icon [] [ R.str "navigation_icon" ]\r\n            R.str "Extended"\r\n        ]\r\n        fab [\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ]]\r\n    ]\r\n\r\nlet fabsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] fabs\r\n\r\nlet view () =\r\n    R.from fabsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.IconButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        iconButton [\r\n            HTMLAttr.Custom ("aria-label", "Delete")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Custom ("aria-label", "Delete")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Custom ("aria-label", "Add an alarm")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "alarm_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Custom ("aria-label", "Add to shopping cart")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "add_shopping_cart_icon" ] ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "icon-button-file"\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "icon-button-file" ] [\r\n            iconButton [\r\n                MaterialProp.Color ComponentColor.Primary\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ icon [] [ R.str "photo_camera_icon" ] ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.IconLabelButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Custom ("leftIcon", [ CSSProp.MarginRight theme.spacing.unit ])\r\n        Styles.Custom ("rightIcon", [ CSSProp.MarginLeft theme.spacing.unit ])\r\n        Styles.Custom ("iconSmall", [ CSSProp.FontSize 20 ])\r\n    ]\r\n\r\nlet buttons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Delete"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "delete_icon" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Send"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "send" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Default\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Upload"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "cloud_up" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            icon [ HTMLAttr.Class !!classes?leftIcon ] [ R.str "keyboard_voice" ]\r\n            R.str "Talk"\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            ButtonProp.Size ButtonSize.Small\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            icon [\r\n                HTMLAttr.Class (!!classes?leftIcon + " " + !!classes?iconSmall)\r\n            ] [ R.str "save" ]\r\n            R.str "Save"\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.OutlinedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Default" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Href "#/demos/buttons"\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "outlined-button-file"\r\n            HTMLAttr.Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "outlined-button-file" ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.TextButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n        Styles.Input [\r\n            Display "none"\r\n        ]\r\n    ]\r\nlet textButtons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [] [\r\n        button [ Class !!classes?button ] [ R.str "Default" ]\r\n        button [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            HTMLAttr.Disabled true\r\n            Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            Href "#/demos/buttons"\r\n            Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            Accept "image/*"\r\n            Class !!classes?input\r\n            Id "flat-button-file"\r\n            Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [\r\n            HtmlFor "flat-button-file"\r\n        ] [\r\n            button [\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet textButtonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] textButtons\r\n\r\nlet view () =\r\n    R.from textButtonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.TextFields.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.TextFields\r\nopen Components\r\n\r\nlet text = importDefault "./TextFields.md"\r\nlet textFieldText = """\r\n## TextField\r\n\r\nThe `TextField` wrapper component is a complete form control including a label, input and help text.\r\n"""\r\n\r\nlet outlinedText = """\r\n## Outlined\r\n\r\n`TextField` supports outlined styling.\r\n"""\r\n\r\nlet filledText = """\r\n## Filled\r\n\r\n`TextField` supports filled styling.\r\n"""\r\n\r\nlet composedText = """\r\n## Components\r\n\r\n`TextField` is composed of smaller components (\r\n`FormControl`,\r\n`Input`,\r\n`InputLabel`,\r\nand `FormHelperText`\r\n) that you can leverage directly to significantly customize your form inputs.\r\n\r\nYou might also have noticed that some native HTML input properties are missing from the `TextField` component.\r\nThis is on purpose.\r\nThe component takes care of the most used properties, then it\'s up to the user to use the underlying component shown in the following demo. Still, you can use `inputProps` (and `InputProps`, `InputLabelProps` properties) if you want to avoid some boilerplate.\r\n"""\r\n\r\nlet layoutText = """\r\n## Layout\r\n\r\n`TextField`, `FormControl` allow the specification of `margin` to alter the vertical spacing of inputs. Using\r\n`none` (default) will not apply margins to the `FormControl`, whereas `dense` and `normal` will as well as alter\r\nother styles to meet the specification.\r\n"""\r\n\r\nlet inputAdornmentsText = """\r\n## Input Adornments\r\n\r\n`Input` allows the provision of `InputAdornment`.\r\nThese can be used to add a prefix, a suffix or an action to an input.\r\nFor instance, you can use an icon button to hide or reveal the password.\r\n"""\r\n\r\nlet customizedText = """\r\n## Customized inputs\r\n\r\nIf you have been reading the overrides documentation page\r\nbut you are not confident jumping in, here\'s an example of how you can change the main color of an Input.\r\n"""\r\n\r\nlet withIconText = """\r\n## With icon\r\n\r\nIcons can be specified as prepended or appended.\r\n"""\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view textFieldText "./Demos/TextFields/TextField.fs" TextField.view\r\n        Demo.view outlinedText "./Demos/TextFields/Outlined.fs" Outlined.view\r\n        Demo.view filledText "./Demos/TextFields/Filled.fs" Filled.view\r\n        Demo.view composedText "./Demos/TextFields/Composed.fs" Composed.view\r\n        Demo.view "## Input" "./Demos/TextFields/Input.fs" Input.view\r\n        Demo.view layoutText "./Demos/TextFields/Layout.fs" Layout.view\r\n        Demo.view inputAdornmentsText "./Demos/TextFields/InputAdornments.fs" InputAdornments.view\r\n        Demo.view "## Filled Input Adornments" "./Demos/TextFields/FilledInputAdornments.fs" FilledInputAdornments.view\r\n        Demo.view "## Outlined Input Adornments" "./Demos/TextFields/OutlinedInputAdornments.fs" OutlinedInputAdornments.view\r\n        Demo.view customizedText "./Demos/TextFields/Customized.fs" Customized.view\r\n        Demo.view withIconText "./Demos/TextFields/WithIcon.fs" WithIcon.view\r\n    ]\r\n'},function(e,n){e.exports='module Demos.TextFields.Composed\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.FormControl [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n    ]\r\n\r\ntype ComposedTextFieldState = {\r\n    name : string\r\n}\r\n\r\ntype ComposedTextField(p) =\r\n    inherit Component<IClassesProps,ComposedTextFieldState>(p)\r\n    do\r\n        base.setInitState { name = "Composed TextField" }\r\n\r\n    member private this.handleChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    override this.render() =\r\n        let classes = this.props.classes\r\n        div [ HTMLAttr.Class !!classes?container ] [\r\n            formControl [ HTMLAttr.Class !!classes?formControl ] [\r\n                inputLabel [ HtmlFor "component-simple" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-simple"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Custom ("aria-describedby", "component-helper-text")\r\n            ] [\r\n                inputLabel [ HtmlFor "component-helper" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-helper"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "component-helper-text" ] [\r\n                    str "Some important helper text"\r\n                ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Disabled true\r\n            ] [\r\n                inputLabel [ HtmlFor "component-disabled" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-disabled"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ ] [ str "Disabled" ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Custom ("aria-describedby", "component-error-text")\r\n                MaterialProp.Error true\r\n            ] [\r\n                inputLabel [ HtmlFor "component-error" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-error"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "component-error-text" ] [ str "Error" ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                FormControlProp.Variant FormControlVariant.Filled\r\n            ] [\r\n                inputLabel [ HtmlFor "component-filled" ] [ str "Name" ]\r\n                filledInput [\r\n                    HTMLAttr.Id "component-filled"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ] []\r\n            ]\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<ComposedTextField,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.Customized\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\n\r\nlet toObj props = keyValueList CaseRules.LowerFirst props\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("cssLabel", [\r\n            CSSProp.Custom ("&$cssFocused",\r\n                [\r\n                    CSSProp.Color Colors.purple.``500``\r\n                ] |> toObj)\r\n        ])\r\n        Styles.Custom ("cssFocused", [])\r\n        Styles.Custom ("cssUnderline", [\r\n            CSSProp.Custom ("&:after", [\r\n                CSSProp.BorderBottomColor Colors.purple.``500``\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapRoot", [\r\n            CSSProp.Custom ("label + &", [\r\n                CSSProp.MarginTop (theme.spacing.unit * 3)\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapInput", [\r\n            CSSProp.BorderRadius 4\r\n            CSSProp.BackgroundColor theme.palette.common.white\r\n            CSSProp.Border "1px solid #ced4da"\r\n            CSSProp.FontSize 16\r\n            CSSProp.Padding "10px 12px"\r\n            CSSProp.Transition (theme.transitions.create(["border-color"; "box-shadow"] |> U2.Case2))\r\n            CSSProp.FontFamily (\r\n                [ "-apple-system"\r\n                  "BlinkMacSystemFont"\r\n                  "\\"Segou UI\\""\r\n                  "Roboto"\r\n                  "\\"Helvetica Neue\\""\r\n                  "Arial"\r\n                  "sans-serif"\r\n                  "\\"Apple Color Emoji\\""\r\n                  "\\"Segoe UI Emoji\\""\r\n                  "\\"Segoe UI Symbol\\"" ] |> String.concat(","))\r\n            CSSProp.Custom ("&:focus", [\r\n                CSSProp.BorderColor "#80bdff"\r\n                CSSProp.BoxShadow "0 0 0 0.2rem rgba(0,123,255,.25)"\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapFormLabel", [\r\n            CSSProp.FontSize 18\r\n        ])\r\n    ]\r\n\r\nlet theme = createMuiTheme([\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.green.``500``\r\n                    ]\r\n                ]\r\n            ])\r\n\r\nlet customizedInputs (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [\r\n                HTMLAttr.HtmlFor "custom-css-input"\r\n                ChildrenProp.FormLabelClasses [\r\n                    ClassNames.Root !!classes?cssLabel\r\n                    ClassNames.Focused !!classes?cssFocused\r\n                ]\r\n            ] [ str "Custom CSS" ]\r\n            input [\r\n                HTMLAttr.Id "custom-css-input"\r\n                MaterialProp.Classes [\r\n                    ClassNames.Underline !!classes?cssUnderline\r\n                ]\r\n            ]\r\n        ]\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n            textField [\r\n                HTMLAttr.Class !!classes?margin\r\n                HTMLAttr.Label "MuiThemeProvider"\r\n                HTMLAttr.Id "mui-theme-provider-input"\r\n            ] []\r\n        ]\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [\r\n                InputLabelProp.Shrink true\r\n                HTMLAttr.HtmlFor "bootstrap-input"\r\n                HTMLAttr.Class !!classes?bootstrapFormLabel\r\n            ] [ str "Bootstrap" ]\r\n            inputBase [\r\n                HTMLAttr.Id "bootstrap-input"\r\n                HTMLAttr.DefaultValue "react-bootstrap"\r\n                MaterialProp.Classes [\r\n                    ClassNames.Root !!classes?bootstrapRoot\r\n                    ClassNames.Input !!classes?bootstrapInput\r\n                ]\r\n            ]\r\n        ]\r\n        inputBase [\r\n            HTMLAttr.Class !!classes?margin\r\n            HTMLAttr.DefaultValue "Naked input"\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] customizedInputs\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Filled\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "filled-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "filled-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-email-input"\r\n                HTMLAttr.Label "Email"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "email"\r\n                HTMLAttr.AutoComplete "email"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-dense"\r\n                HTMLAttr.Label "Dense"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-textarea"\r\n                HTMLAttr.Label "Multiline placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                // HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.FilledInputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With filled TextField"\r\n                HTMLAttr.Id "filled-simple-start-adornment"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [ \r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-amount"\r\n                HTMLAttr.Value this.state.amount\r\n                HTMLAttr.Label "Amount"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleAmountChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "$" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-weight"\r\n                HTMLAttr.Value this.state.weight\r\n                HTMLAttr.Label "Weight"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                TextFieldProp.HelperText ("Weight" |> str |> U2.Case1 |> U3.Case1)\r\n                DOMAttr.OnChange this.handleWeightChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-password"\r\n                HTMLAttr.Value this.state.password\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handlePasswordChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [\r\n                            iconButton [\r\n                                HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                DOMAttr.OnClick this.handleClickShowPassword\r\n                            ] [\r\n                                icon [] [\r\n                                    str (if this.state.showPassword then "visibility_off"\r\n                                         else "visibility")\r\n                                ]\r\n                            ]\r\n                        ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.Input\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Input [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n    ]\r\n\r\nlet inputTextFields (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        input [\r\n            HTMLAttr.DefaultValue "Hello world"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.Placeholder "Placeholder"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.Value "Disabled"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Disabled true\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.DefaultValue "Error"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.Error true\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] inputTextFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []'},function(e,n){e.exports='module Demos.TextFields.InputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("withoutLabel", [\r\n            CSSProp.MarginTop (theme.spacing.unit * 3)\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With normal TextField"\r\n                HTMLAttr.Id "simple-start-adornment"\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            formControl [\r\n                MaterialProp.FullWidth true\r\n                HTMLAttr.Class !!classes?margin\r\n            ] [\r\n                inputLabel [ HTMLAttr.HtmlFor "adornment-amount" ] [ str "Amount" ]\r\n                input [\r\n                    HTMLAttr.Id "adornment-amount"\r\n                    HTMLAttr.Value this.state.amount\r\n                    DOMAttr.OnChange this.handleAmountChange\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "$" ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ]\r\n            formControl [\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?withoutLabel, true\r\n                    !!classes?textField, true\r\n                ]\r\n                HTMLAttr.Custom("aria-describedby", "weight-helper-text")\r\n            ] [\r\n                input [\r\n                    HTMLAttr.Id "adornment-weight"\r\n                    HTMLAttr.Value this.state.weight\r\n                    DOMAttr.OnChange this.handleWeightChange\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.End ]\r\n                            [ str "Kg" ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                    MaterialProp.InputProps [ HTMLAttr.Custom ("aria-label", "Weight") ]\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "weight-helper-text" ] [ str "Weight" ]\r\n            ]\r\n            formControl [\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n            ] [\r\n                inputLabel [ HTMLAttr.HtmlFor "adornment-password" ] [ str "Password" ]\r\n                input [\r\n                    HTMLAttr.Id "adornment-password"\r\n                    HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                    HTMLAttr.Value this.state.password\r\n                    DOMAttr.OnChange this.handlePasswordChange\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.End ]\r\n                            [\r\n                                iconButton [\r\n                                    HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                    DOMAttr.OnClick this.handleClickShowPassword\r\n                                ] [\r\n                                    icon [] [\r\n                                        str (if this.state.showPassword then "visibility_off"\r\n                                             else "visibility")\r\n                                    ]\r\n                                ]\r\n                             ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ]\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Layout\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet layoutTextFields (props : IClassesProps) =\r\n    let classes = props?classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        textField [\r\n            HTMLAttr.Label "None"\r\n            HTMLAttr.Id "margin-none"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n        ] []\r\n        textField [\r\n            HTMLAttr.Label "Dense"\r\n            HTMLAttr.Id "margin-dense"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n            MaterialProp.Margin FormControlMargin.Dense\r\n        ] []\r\n        textField [\r\n            HTMLAttr.Label "Normal"\r\n            HTMLAttr.Id "margin-normal"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n            MaterialProp.Margin FormControlMargin.Normal\r\n        ] []\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] layoutTextFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Outlined\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "outlined-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "outlined-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-email-input"\r\n                HTMLAttr.Label "Email"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "email"\r\n                HTMLAttr.AutoComplete "email"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-dense"\r\n                HTMLAttr.Label "Dense"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-textarea"\r\n                HTMLAttr.Label "Multiline placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                // HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.OutlinedInputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With outlined TextField"\r\n                HTMLAttr.Id "outlined-simple-start-adornment"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [ \r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-amount"\r\n                HTMLAttr.Value this.state.amount\r\n                HTMLAttr.Label "Amount"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleAmountChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "$" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-weight"\r\n                HTMLAttr.Value this.state.weight\r\n                HTMLAttr.Label "Weight"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                TextFieldProp.HelperText ("Weight" |> str |> U2.Case1 |> U3.Case1)\r\n                DOMAttr.OnChange this.handleWeightChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-password"\r\n                HTMLAttr.Value this.state.password\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handlePasswordChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [\r\n                            iconButton [\r\n                                HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                DOMAttr.OnClick this.handleClickShowPassword\r\n                            ] [\r\n                                icon [] [\r\n                                    str (if this.state.showPassword then "visibility_off"\r\n                                         else "visibility")\r\n                                ]\r\n                            ]\r\n                        ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.TextField\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "standard-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "standard-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-dense"\r\n                HTMLAttr.Label "Dense"\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-textarea"\r\n                HTMLAttr.Label "With placeholder multiline"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "standard-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "standard-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.WithIcon\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Custom("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n    ]\r\n\r\nlet inputWithIcon (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [] [\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [ HTMLAttr.HtmlFor "input-with-icon-adornment" ] [\r\n                str "With a start adornment"\r\n            ]\r\n            input [ \r\n                HTMLAttr.Id "input-with-icon-adornment"\r\n                InputProp.StartAdornment (\r\n                    inputAdornment [ InputAdornmentProp.Position InputAdornmentPosition.Start ] [\r\n                        icon [] [ str "account_circle" ]\r\n                    ] |> U2.Case1 |> U3.Case1\r\n                )\r\n            ]\r\n        ]\r\n        textField [\r\n            HTMLAttr.Class !!classes?margin\r\n            HTMLAttr.Id "input-with-icon-textfield"\r\n            HTMLAttr.Label "TextField"\r\n            ChildrenProp.InputProps [\r\n                InputProp.StartAdornment (\r\n                    inputAdornment [ InputAdornmentProp.Position InputAdornmentPosition.Start ] [\r\n                        icon [] [ str "account_circle" ]\r\n                    ] |> U2.Case1 |> U3.Case1\r\n                )\r\n            ]\r\n        ] []\r\n        div [ Class !!classes?margin ] [\r\n            grid [\r\n                GridProp.Container true\r\n                GridProp.Spacing GridSpacing.``8``\r\n                GridProp.AlignItems GridAlignItems.FlexEnd\r\n            ] [\r\n                grid [ GridProp.Item true ] [\r\n                    icon [] [ str "account_circle" ]\r\n                ]\r\n                grid [ GridProp.Item true ] [\r\n                    textField [\r\n                        HTMLAttr.Id "input-with-icon-grid"\r\n                        HTMLAttr.Label "With a grid"\r\n                    ] []\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] inputWithIcon\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []'},function(e,n){e.exports='module GettingStarted.Installation.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Components\r\n\r\nlet text = importDefault "./Installation.md"\r\n\r\nlet root () =\r\n    Markdown.view text'},function(e,n){e.exports='module GettingStarted.MigrationToV2.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Components\r\n\r\nlet text = importDefault "./MigrationToV2.md"\r\n\r\nlet root () =\r\n    Markdown.view text\r\n'},function(e,n){e.exports='module GettingStarted.Usage.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Components\r\n\r\nlet text = importDefault "./Usage.md"\r\n\r\nlet root () =\r\n    Markdown.view text\r\n'},function(e,n){e.exports='module Global\r\n\r\nlet [<Literal>] libVersion = "v2.5.0"\r\n\r\ntype Page =\r\n    | Home\r\n    | Installation\r\n    | Usage\r\n    | MigrationToV2\r\n    | AppBar\r\n    | Avatars\r\n    | Buttons\r\n    | TextFields\r\n    | SignIn\r\n    | Overrides\r\n    | Themes\r\n    | CssInJs\r\n    | DefaultTheme\r\n    | Api of string\r\n    // TODO Add other demos\r\n\r\ntype NavItem = {\r\n    Title : string\r\n    Children : NavItem list\r\n    Href : Page option\r\n}\r\n\r\nlet toHash page =\r\n    match page with\r\n    | Home -> "#/home"\r\n    | Installation -> "#/getting-started/installation"\r\n    | Usage -> "#/getting-started/usage"\r\n    | MigrationToV2 -> "#/getting-started/migration-to-v2"\r\n    | AppBar -> "#/demos/app-bar"\r\n    | Avatars -> "#/demos/avatars"\r\n    | Buttons -> "#/demos/buttons"\r\n    | TextFields -> "#/demos/text-fields"\r\n    | SignIn -> "#/pagelayout/signin"\r\n    | Overrides -> "#/customization/overrides"\r\n    | Themes -> "#/customization/themes"\r\n    | CssInJs -> "#/customization/css-in-js"\r\n    | DefaultTheme -> "#/customization/default-theme"\r\n    | Api comp -> "#/api/" + comp\r\n\r\nlet toCamelCase (s : string) =\r\n    s |> String.mapi (fun i c ->\r\n        if i = 0 || s.[i - 1] = \'-\' then System.Char.ToUpper c\r\n        else c)\r\n\r\n\r\nlet toTitle = function\r\n    | Home -> ""\r\n    | Installation -> "Installation"\r\n    | Usage -> "Usage"\r\n    | MigrationToV2 -> "Migration to version 2"\r\n    | AppBar -> "App Bar"\r\n    | Avatars -> "Avatars"\r\n    | Buttons -> "Buttons"\r\n    | TextFields -> "Text Fields"\r\n    | SignIn -> "Sign-in"\r\n    | Overrides -> "Overrides"\r\n    | Themes -> "Themes"\r\n    | CssInJs -> "Css in JS (F#)"\r\n    | DefaultTheme -> "Default Theme"\r\n    | Api comp -> (toCamelCase comp).Replace("-","")\r\n'},function(e,n){e.exports='module Home.View\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen App.Types\r\nopen Components\r\nopen Global\r\nopen Utils\r\nopen Fable.Import\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\nlet homeStyles (theme : ITheme) : IStyles list =\r\n    let xsBreakpoint = theme.breakpoints.only MaterialSize.Xs\r\n    let smBreakpoint = theme.breakpoints.only MaterialSize.Sm\r\n    [\r\n        Styles.Custom ("hero", [\r\n            MinHeight "80vh"\r\n            Flex "0 0 auto"\r\n            Display "flex"\r\n            JustifyContent "center"\r\n            CSSProp.AlignItems "center"\r\n            BackgroundColor theme.palette.background.paper\r\n            CSSProp.Color theme.palette.primary.dark\r\n        ])\r\n        Styles.Text [\r\n            Display "flex"\r\n            FlexDirection "column"\r\n            JustifyContent "center"\r\n            CSSProp.AlignItems "center"\r\n        ]\r\n        Styles.Title [\r\n            CSSProp.LetterSpacing ".2rem"\r\n            CSSProp.TextIndent ".7rem"\r\n            CSSProp.FontWeight theme.typography.fontWeightLight\r\n            CSSProp.WhiteSpace "nowrap"\r\n            customCss xsBreakpoint [\r\n                CSSProp.FontSize 28\r\n            ]\r\n        ]\r\n        Styles.Headline [\r\n            PaddingLeft (theme.spacing.unit * 4)\r\n            PaddingRight (theme.spacing.unit * 4)\r\n            MarginTop theme.spacing.unit\r\n            CSSProp.MaxWidth 500\r\n            TextAlign "center"\r\n        ]\r\n        Styles.Content [\r\n            PaddingBottom (theme.spacing.unit * 8)\r\n            PaddingTop (theme.spacing.unit * 8)\r\n            customCss smBreakpoint [\r\n                PaddingTop (theme.spacing.unit * 12)\r\n            ]\r\n        ]\r\n        Styles.Button [\r\n            MarginTop (theme.spacing.unit * 3)\r\n        ]\r\n        Styles.Custom ("logo", [\r\n            CSSProp.MarginTop (theme.spacing.unit * 3)\r\n            CSSProp.MarginRight 0\r\n            CSSProp.MarginLeft 0\r\n            CSSProp.MarginBottom (theme.spacing.unit * 4)\r\n            Width "100%"\r\n            Height "35vw"\r\n            MaxHeight 200\r\n        ])\r\n        Styles.Custom ("support", [\r\n            CSSProp.TextAlign "center"\r\n            CSSProp.MarginBottom 30\r\n        ])\r\n    ]\r\n\r\ntype HomeProps =\r\n    abstract member dispatch : (Msg->unit) with get,set\r\n    inherit Mui.IClassesProps\r\n\r\n\r\ntype HomeClasses =\r\n    abstract member hero : string\r\n    abstract member content : string\r\n    abstract member logo : string\r\n    abstract member text : string\r\n    abstract member title : string\r\n    abstract member headline : string\r\n    abstract member button : string\r\n    abstract member support: string\r\n    inherit Mui.IClasses\r\n\r\nlet supportText = importDefault "./Support.md"\r\nlet logo = importDefault "../../public/img/fable-material-ui-logo.svg"\r\n\r\nlet home (props : HomeProps) =\r\n    let classes : HomeClasses = !!props.classes\r\n    fragment [] [\r\n        div [ Class classes.hero ] [\r\n            div [ Class classes.content ] [\r\n                img [\r\n                    Src logo\r\n                    Alt "Fable Material-UI Logo"\r\n                    Class classes.logo\r\n                ]\r\n                div [ Class classes.text ] [\r\n                    typography [\r\n                        TypographyProp.Variant TypographyVariant.H3\r\n                        TypographyProp.Align TypographyAlign.Center\r\n                        MaterialProp.Component ("h1" |> U3.Case1)\r\n                        TypographyProp.Color TypographyColor.Inherit\r\n                        TypographyProp.GutterBottom true\r\n                        Class classes.title\r\n                    ] [ str "FABLE MATERIAL-UI" ]\r\n                    typography [\r\n                        TypographyProp.Variant TypographyVariant.H5\r\n                        MaterialProp.Component ("h2" |> U3.Case1)\r\n                        TypographyProp.Color TypographyColor.Inherit\r\n                        TypographyProp.GutterBottom true\r\n                        Class classes.headline\r\n                    ] [ str "Fable bindings for Material-UI React components"]\r\n                    Mui.button [\r\n                        MaterialProp.Component ("a" |> U3.Case1)\r\n                        Href ("/" + toHash Installation)\r\n                        Class classes.button\r\n                        ButtonProp.Variant ButtonVariant.Outlined\r\n                        MaterialProp.Color ComponentColor.Primary\r\n                    ] [ str "Get Started" ]\r\n                ]\r\n            ]\r\n        ]\r\n        div [ Class classes.support ] [\r\n            Markdown.view supportText\r\n        ]\r\n    ]\r\n\r\nlet homeWithStyles = Mui.withStyles (StyleType.Func homeStyles) [] home\r\n\r\nlet root dispatch =\r\n    let props = createEmpty<HomeProps>\r\n    props.dispatch <- dispatch\r\n    from homeWithStyles props []\r\n'},function(e,n){e.exports='module Import.Marked\r\nopen Fable.Core\r\n\r\ntype MarkedOptions =\r\n    abstract member baseUrl : string with get,set\r\n    abstract member breaks : bool with get,set\r\n    abstract member gfm : bool with get,set\r\n    abstract member headerIds : bool with get,set\r\n    abstract member highlight : (string->string->string) with get,set\r\n    abstract member langPrefix : string with get,set\r\n    abstract member mangle : bool with get,set\r\n    abstract member pedantic : bool with get,set\r\n    abstract member renderer : obj with get,set\r\n    abstract member sanitize : bool with get,set\r\n    abstract member santitizer : (string->string) with get,set\r\n    abstract member silent : bool with get,set\r\n    abstract member smartLists : bool with get,set\r\n    abstract member smartypants : bool with get,set\r\n    abstract member tables : bool with get,set\r\n    abstract member xhtml : bool with get,set\r\n\r\ntype [<AbstractClass>] Marked =\r\n    [<Import("default", "marked")>]\r\n    static member marked ((markdownString : string), (?options : MarkedOptions), (?callback : (string->obj->unit))) : string =\r\n        jsNative\r\n\r\n\r\n'},function(e,n){e.exports='module Import.Prism\r\n\r\nopen Fable.Core.JsInterop\r\n\r\ntype Prism =\r\n    abstract highlight: text: string * grammar: obj -> string\r\n    abstract member languages: obj\r\n\r\nlet prism : Prism = importDefault "prismjs"\r\n'},function(e,n){e.exports='module Layout.AppBar\r\n\r\nopen Elmish.React\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen App.Types\r\nopen Global\r\nopen Utils\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\nmodule MProps = Fable.MaterialUI.Props\r\n\r\nlet githubIcon =\r\n    Mui.svgIcon [] [\r\n        path [\r\n            SVGAttr.D "M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3"\r\n        ] []\r\n    ]\r\n\r\nlet menuButton model dispatch =\r\n    let button =\r\n        Mui.iconButton [\r\n            IconProp.Color IconColor.Inherit\r\n            OnClick (fun _ -> OpenMenu true |> dispatch)\r\n        ] [ Mui.icon [] [ str "menu" ] ]\r\n    match model.isLanding with\r\n    | false -> Mui.hidden [ LgUp true ] [ button ]\r\n    | _ -> button\r\n\r\nlet appBarStyles (theme : ITheme) : IStyles list =\r\n    let lgBreakpoint = theme.breakpoints.up(MaterialSize.Lg |> U2.Case1)\r\n    [\r\n        Styles.Custom ("appBar", [\r\n            customCss lgBreakpoint [\r\n                Left 250\r\n                Width "calc(100% - 250px)"\r\n            ]\r\n        ])\r\n        Styles.Custom ("landingAppBar", [\r\n            Left 0\r\n            Width "100vw"\r\n            BoxShadow "unset"\r\n        ])\r\n    ]\r\n\r\n\r\ntype AppBarClasses =\r\n    abstract member appBar : string\r\n    abstract member landingAppBar : string\r\n\r\nlet appBar (props : AppProps) =\r\n    let classes : AppBarClasses = !!props.classes\r\n    Mui.appBar [\r\n        MProps.Position AppBarPosition.Fixed\r\n        Class ([(classes.appBar, true); (classes.landingAppBar, props.model.isLanding)] |> classNames)\r\n    ] [\r\n        Mui.toolbar [] [\r\n            lazyView2 menuButton props.model props.dispatch\r\n            Mui.typography [\r\n                TypographyProp.Variant TypographyVariant.H6\r\n                MaterialProp.Color ComponentColor.Inherit\r\n            ] [ props.model.currentPage |> toTitle |> str ]\r\n            div [ Class "flex" ] []\r\n            Mui.tooltip [\r\n                TooltipProp.Title ((str "Github") |> U2.Case1 |> U3.Case1)\r\n                TooltipProp.EnterDelay 300\r\n            ] [\r\n                Mui.iconButton [\r\n                    IconProp.Color IconColor.Inherit\r\n                    MaterialProp.Component ("a" |> U3.Case1)\r\n                    Target "_blank"\r\n                    Href "https://github.com/mvsmal/fable-material-ui"\r\n                ] [ githubIcon ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet appBarWithStyles = Mui.withStyles (StyleType.Func appBarStyles) [] appBar\r\n\r\nlet view model dispatch =\r\n    let props = createEmpty<AppProps>\r\n    props.model <- model\r\n    props.dispatch <- dispatch\r\n    from appBarWithStyles props []\r\n'},function(e,n){e.exports="module Layout.Drawer\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen App.Types\r\nopen Global\r\nopen Elmish.React.Common\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\nlet drawerStyles : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            Width 250\r\n        ]\r\n        Styles.Paper [\r\n            Width 250\r\n        ]\r\n    ]\r\n\r\n\r\ntype AppDrawerProps =\r\n    abstract member isLanding: bool with get,set\r\n    abstract member currentPage: Page with get,set\r\n    abstract member menuOpen: bool with get,set\r\n    abstract member dispatch: (Msg->unit) with get,set\r\n    inherit Mui.IClassesProps\r\n\r\n\r\nlet drawer (props : AppDrawerProps) =\r\n    nav [] [\r\n        yield Mui.hidden [\r\n            LgUp (not props.isLanding)\r\n            Implementation HiddenImplementation.Js\r\n        ] [\r\n            Mui.swipeableDrawer [\r\n                DrawerProp.Variant DrawerVariant.Temporary\r\n                MaterialProp.Open props.menuOpen\r\n                MaterialProp.OnOpen (fun _ -> OpenMenu true |> props.dispatch)\r\n                MaterialProp.OnClose (fun _ -> OpenMenu false |> props.dispatch)\r\n                ModalProps [ KeepMounted true ]\r\n                Classes [\r\n                    ClassNames.Paper !!props.classes?paper\r\n                ]\r\n            ] [\r\n                lazyView2 Layout.Menu.view props.currentPage props.dispatch ]\r\n        ]\r\n        if not props.isLanding then\r\n            yield Mui.hidden [\r\n                MdDown true\r\n                Implementation HiddenImplementation.Js\r\n            ] [\r\n                Mui.drawer [\r\n                    DrawerProp.Variant DrawerVariant.Permanent\r\n                    MaterialProp.Open true\r\n                    Class !!props.classes?root\r\n                    Classes [\r\n                        ClassNames.Paper !!props.classes?paper\r\n                    ]\r\n                ] [\r\n                    lazyView2 Layout.Menu.view props.currentPage props.dispatch ]\r\n            ]\r\n    ]\r\n\r\nlet drawerWithStyles = Mui.withStyles (StyleType.Styles drawerStyles) [] drawer\r\n\r\nlet view (model : Model) dispatch =\r\n    let props = createEmpty<AppDrawerProps>\r\n    props.currentPage <- model.currentPage\r\n    props.isLanding <- model.isLanding\r\n    props.menuOpen <- model.menuOpen\r\n    props.dispatch <- dispatch\r\n    from drawerWithStyles props []\r\n"},function(e,n){e.exports='module Layout.Layout\r\n\r\nopen Elmish.React\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\n\r\nopen App.Types\r\nopen Global\r\nopen Utils\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\nlet theme =\r\n    Mui.createMuiTheme [\r\n        Typography [\r\n            UseNextVariants true\r\n        ]\r\n        ThemeProp.Palette [\r\n            PaletteProp.Type PaletteType.Light\r\n            PaletteProp.Primary [\r\n                PaletteIntentionProp.Main Colors.blue.``500``\r\n            ]\r\n            PaletteProp.Secondary [\r\n                PaletteIntentionProp.Main\r\n                    (Mui.ColorManipulator.darken (Colors.pink.A400, 0.08))\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet layoutStyles (theme : ITheme) : IStyles list=\r\n    let lgBreakpoint = theme.breakpoints.up(MaterialSize.Lg |> U2.Case1)\r\n    let smBreakpoint = theme.breakpoints.up(MaterialSize.Sm |> U2.Case1)\r\n    [\r\n        Styles.Root [\r\n            Display "flex"\r\n            PaddingBottom 40\r\n        ]\r\n        Styles.Custom ("menuButton", [\r\n            MarginLeft -12\r\n            MarginRight 20\r\n        ])\r\n        Styles.Custom ("main", [\r\n            PaddingTop 80\r\n            Flex "1 1 100%"\r\n            CSSProp.MaxWidth "100%"\r\n            CSSProp.Margin "0 auto"\r\n            CSSProp.PaddingLeft (theme.spacing.unit * 2)\r\n            CSSProp.PaddingRight (theme.spacing.unit * 2)\r\n            CSSProp.FontFamily theme.typography.fontFamily\r\n            CSSProp.FontSize 16\r\n            // CSSProp.Color theme.palette.text.primary\r\n            customCss smBreakpoint [\r\n                PaddingLeft (theme.spacing.unit * 4)\r\n                PaddingRight (theme.spacing.unit * 4)\r\n            ]\r\n            customCss lgBreakpoint [\r\n                PaddingLeft (theme.spacing.unit * 5)\r\n                PaddingRight (theme.spacing.unit * 9)\r\n                CSSProp.MaxWidth "calc(100% - 250px)"\r\n            ]\r\n        ])\r\n        Styles.Custom ("landingMain", [\r\n            CSSProp.Padding 0\r\n            CSSProp.MaxWidth "100vw"\r\n            MarginLeft 0\r\n        ])\r\n]\r\n\r\ntype LayoutClasses =\r\n    abstract member main : string\r\n    abstract member landingMain : string\r\n    abstract member root : string\r\n    inherit Mui.IClasses\r\n\r\nlet layout (props : AppProps) =\r\n    let content = function\r\n        | Page.Home -> Home.View.root props.dispatch\r\n        | Page.Installation -> GettingStarted.Installation.View.root ()\r\n        | Page.MigrationToV2 -> GettingStarted.MigrationToV2.View.root ()\r\n        | Page.Usage -> GettingStarted.Usage.View.root ()\r\n        | Page.AppBar -> Demos.AppBar.View.view ()\r\n        | Page.Avatars -> Demos.Avatars.View.root ()\r\n        | Page.Buttons -> Demos.Buttons.View.view ()\r\n        | Page.TextFields -> Demos.TextFields.View.view ()\r\n        | Page.SignIn -> PageLayoutDemos.SignIn.root ()\r\n        | Page.Overrides -> Customization.Overrides.View.view ()\r\n        | Page.Themes -> Customization.Themes.View.view ()\r\n        | Page.CssInJs -> Customization.CssInJs.View.view ()\r\n        | Page.DefaultTheme -> Customization.DefaultTheme.View.view ()\r\n        | Page.Api comp -> Api.View.view comp\r\n\r\n    let classes : LayoutClasses = !!props.classes\r\n    let mainClasses =\r\n        [\r\n            (classes.main, true)\r\n            (classes.landingMain, props.model.isLanding)\r\n        ] |> classNames\r\n    Mui.muiThemeProvider [MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        div [ Class classes.root ] [\r\n            lazyView2 Layout.AppBar.view props.model props.dispatch\r\n            lazyView2 Layout.Drawer.view props.model props.dispatch\r\n            main [ Class mainClasses ] [ content props.model.currentPage ]\r\n        ]\r\n    ]\r\n\r\nlet layoutWithStyles = Mui.withStyles (StyleType.Func layoutStyles) [] layout\r\n\r\nlet view model dispatch =\r\n    let props = createEmpty<AppProps>\r\n    props.model <- model\r\n    props.dispatch <- dispatch\r\n    from layoutWithStyles props []\r\n'},function(e,n){e.exports='module Layout.Menu\r\n\r\nopen Elmish.React.Common\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nopen App.Types\r\nopen Global\r\nopen Utils\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\n\r\ntype MenuClasses =\r\n    abstract member root: string\r\n    abstract member toolbar: string\r\n    abstract member headerLink: string\r\n    abstract member title: string\r\n    inherit Mui.IClasses\r\n\r\n\r\ntype MenuProps =\r\n    abstract member currentPage : Page with get, set\r\n    abstract member dispatch : (Msg->unit) with get,set\r\n    inherit Mui.IClassesProps\r\n\r\nlet menuStyles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Title [\r\n            CSSProp.Color theme.palette.text.secondary\r\n            CSSProp.MarginBottom (theme.spacing.unit / 2)\r\n        ]\r\n        Styles.Root [ Width 250 ]\r\n        Styles.Custom ("toolbar", [\r\n            Display "flex"\r\n            FlexDirection "column"\r\n            JustifyContent "center"\r\n            CSSProp.AlignItems "flex-start"\r\n        ])\r\n        Styles.Custom ("headerLink", [\r\n            CSSProp.Transition "color .2s ease-in-out"\r\n            customCss "&:hover" [\r\n                CSSProp.Color theme.palette.primary.main\r\n                TextDecoration "underline"\r\n            ]\r\n        ])\r\n    ]\r\nlet menu (props : MenuProps) =\r\n    let classes : MenuClasses = !!props.classes\r\n    div [ Class classes.root ] [\r\n        Mui.toolbar [ Class classes.toolbar ] [\r\n            a [\r\n                Class classes.title\r\n                Href (toHash Home)\r\n                OnClick (fun _ -> OpenMenu false |> props.dispatch)\r\n            ] [\r\n                Mui.typography\r\n                    [ TypographyProp.Variant TypographyVariant.H6\r\n                      Class classes.headerLink\r\n                      TypographyProp.Color TypographyColor.Inherit ]\r\n                    [ str "Fable Material-UI" ]\r\n            ]\r\n            a [\r\n                Target "_blank"\r\n                Rel "noopener noreferrer"\r\n                Href "https://github.com/mvsmal/fable-material-ui/releases"\r\n            ] [\r\n                Mui.typography\r\n                    [ TypographyProp.Variant TypographyVariant.Caption\r\n                      Class classes.headerLink ]\r\n                    [ str libVersion ]\r\n            ]\r\n        ]\r\n        Mui.divider []\r\n        lazyView2 Layout.Navigation.view props.currentPage props.dispatch\r\n    ]\r\n\r\nlet menuWithStyles<\'a> = Mui.withStyles (StyleType.Func menuStyles) [] menu\r\n\r\nlet view currentPage dispatch =\r\n    let props = createEmpty<MenuProps>\r\n    props.currentPage <- currentPage\r\n    props.dispatch <- dispatch\r\n    from menuWithStyles props []\r\n'},function(e,n){e.exports='module Layout.Navigation\r\n\r\nopen Global\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\nmodule MColors = Fable.MaterialUI.Colors\r\n\r\nlet navItems = [\r\n    {\r\n        Title = "Getting Started"\r\n        Href = None\r\n        Children =\r\n            [\r\n                { Title = "Installation"; Href = Some Page.Installation; Children = [] }\r\n                { Title = "Usage"; Href = Some Page.Usage; Children = [] }\r\n                { Title = "Migration to version 2"; Href = Some Page.MigrationToV2; Children = [] }\r\n            ]\r\n    }\r\n    {\r\n        Title = "Component demos"\r\n        Href = None\r\n        Children =\r\n            [\r\n                { Title = "App Bar"; Href = Some Page.AppBar; Children = [] }\r\n                { Title = "Buttons"; Href = Some Page.Buttons; Children = [] }\r\n                { Title = "Text Fields"; Href = Some Page.TextFields; Children = [] }\r\n                // { Title = "Avatars"; Href = Some Page.Avatars; Children = [] }\r\n            ]\r\n    }\r\n    {\r\n        Title = "Customization"\r\n        Href = None\r\n        Children =\r\n            [\r\n                { Title = "Themes"; Href = Some Page.Themes; Children = [] }\r\n                { Title = "Overrides"; Href = Some Page.Overrides; Children = [] }\r\n                { Title = "CSS in JS (F#)"; Href = Some Page.CssInJs; Children = [] }\r\n                { Title = "Default Theme"; Href = Some Page.DefaultTheme; Children = [] }\r\n            ]\r\n    }\r\n    {\r\n        Title = "Components API"\r\n        Href = None\r\n        Children =\r\n            [\r\n                { Title = "AppBar"; Href = Some (Page.Api "app-bar"); Children = [] }\r\n                { Title = "Avatar"; Href = Some (Page.Api "avatar"); Children = [] }\r\n                { Title = "Backdrop"; Href = Some (Page.Api "backdrop"); Children = [] }\r\n                { Title = "Badge"; Href = Some (Page.Api "badge"); Children = [] }\r\n                { Title = "BottomNavigation"; Href = Some (Page.Api "bottom-navigation"); Children = [] }\r\n                { Title = "BottomNavigationAction"; Href = Some (Page.Api "bottom-navigation-action"); Children = [] }\r\n                { Title = "Button"; Href = Some (Page.Api "button"); Children = [] }\r\n                { Title = "ButtonBase"; Href = Some (Page.Api "button-base"); Children = [] }\r\n                { Title = "Card"; Href = Some (Page.Api "card"); Children = [] }\r\n                { Title = "CardActionArea"; Href = Some (Page.Api "card-action-area"); Children = [] }\r\n                { Title = "CardActions"; Href = Some (Page.Api "card-actions"); Children = [] }\r\n                { Title = "CardContent"; Href = Some (Page.Api "card-content"); Children = [] }\r\n                { Title = "CardHeader"; Href = Some (Page.Api "card-header"); Children = [] }\r\n                { Title = "CardMedia"; Href = Some (Page.Api "card-media"); Children = [] }\r\n                { Title = "Checkbox"; Href = Some (Page.Api "checkbox"); Children = [] }\r\n                { Title = "Chip"; Href = Some (Page.Api "chip"); Children = [] }\r\n                { Title = "CircularProgress"; Href = Some (Page.Api "circular-progress"); Children = [] }\r\n                { Title = "ClickAwayListener"; Href = Some (Page.Api "click-away-listener"); Children = [] }\r\n                { Title = "Collapse"; Href = Some (Page.Api "collapse"); Children = [] }\r\n                { Title = "CssBaseline"; Href = Some (Page.Api "css-baseline"); Children = [] }\r\n                { Title = "Dialog"; Href = Some (Page.Api "dialog"); Children = [] }\r\n                { Title = "DialogActions"; Href = Some (Page.Api "dialog-actions"); Children = [] }\r\n                { Title = "DialogContentText"; Href = Some (Page.Api "dialog-content-text"); Children = [] }\r\n                { Title = "DialogContent"; Href = Some (Page.Api "dialog-content"); Children = [] }\r\n                { Title = "DialogTitle"; Href = Some (Page.Api "dialog-title"); Children = [] }\r\n                { Title = "Divider"; Href = Some (Page.Api "divider"); Children = [] }\r\n                { Title = "Drawer"; Href = Some (Page.Api "drawer"); Children = [] }\r\n                { Title = "ExpansionPanel"; Href = Some (Page.Api "expansion-panel"); Children = [] }\r\n                { Title = "ExpansionPanelActions"; Href = Some (Page.Api "expansion-panel-actions"); Children = [] }\r\n                { Title = "ExpansionPanelDetails"; Href = Some (Page.Api "expansion-panel-details"); Children = [] }\r\n                { Title = "ExpansionPanelSummary"; Href = Some (Page.Api "expansion-panel-summary"); Children = [] }\r\n                { Title = "Fab"; Href = Some (Page.Api "fab"); Children = [] }\r\n                { Title = "Fade"; Href = Some (Page.Api "fade"); Children = [] }\r\n                { Title = "FilledInput"; Href = Some (Page.Api "filled-input"); Children = [] }\r\n                { Title = "FormControl"; Href = Some (Page.Api "form-control"); Children = [] }\r\n                { Title = "FormControlLabel"; Href = Some (Page.Api "form-control-label"); Children = [] }\r\n                { Title = "FormGroup"; Href = Some (Page.Api "form-group"); Children = [] }\r\n                { Title = "FormHelperText"; Href = Some (Page.Api "form-helper-text"); Children = [] }\r\n                { Title = "FormLabel"; Href = Some (Page.Api "form-label"); Children = [] }\r\n                { Title = "Grid"; Href = Some (Page.Api "grid"); Children = [] }\r\n                { Title = "GridList"; Href = Some (Page.Api "grid-list"); Children = [] }\r\n                { Title = "GridListTile"; Href = Some (Page.Api "grid-list-tile"); Children = [] }\r\n                { Title = "GridListTileBar"; Href = Some (Page.Api "grid-list-tile-bar"); Children = [] }\r\n                { Title = "Grow"; Href = Some (Page.Api "grow"); Children = [] }\r\n                { Title = "Hidden"; Href = Some (Page.Api "hidden"); Children = [] }\r\n                { Title = "Icon"; Href = Some (Page.Api "icon"); Children = [] }\r\n                { Title = "IconButton"; Href = Some (Page.Api "icon-button"); Children = [] }\r\n                { Title = "Input"; Href = Some (Page.Api "input"); Children = [] }\r\n                { Title = "InputAdornment"; Href = Some (Page.Api "input-adornment"); Children = [] }\r\n                { Title = "InputBase"; Href = Some (Page.Api "input-base"); Children = [] }\r\n                { Title = "InputLabel"; Href = Some (Page.Api "input-label"); Children = [] }\r\n                { Title = "LinearProgress"; Href = Some (Page.Api "linear-progress"); Children = [] }\r\n                { Title = "List"; Href = Some (Page.Api "list"); Children = [] }\r\n                { Title = "ListItem"; Href = Some (Page.Api "list-item"); Children = [] }\r\n                { Title = "ListItemAvatar"; Href = Some (Page.Api "list-item-avatar"); Children = [] }\r\n                { Title = "ListItemIcon"; Href = Some (Page.Api "list-item-icon"); Children = [] }\r\n                { Title = "ListItemSecondaryAction"; Href = Some (Page.Api "list-item-secondary-action"); Children = [] }\r\n                { Title = "ListItemText"; Href = Some (Page.Api "list-item-text"); Children = [] }\r\n                { Title = "ListSubheader"; Href = Some (Page.Api "list-subheader"); Children = [] }\r\n                { Title = "Menu"; Href = Some (Page.Api "menu"); Children = [] }\r\n                { Title = "MenuItem"; Href = Some (Page.Api "menu-item"); Children = [] }\r\n                { Title = "MenuList"; Href = Some (Page.Api "menu-list"); Children = [] }\r\n                { Title = "MobileStepper"; Href = Some (Page.Api "mobile-stepper"); Children = [] }\r\n                { Title = "Modal"; Href = Some (Page.Api "modal"); Children = [] }\r\n                { Title = "MuiThemeProvider"; Href = Some (Page.Api "mui-theme-provider"); Children = [] }\r\n                { Title = "NativeSelect"; Href = Some (Page.Api "native-select"); Children = [] }\r\n                { Title = "OutlinedInput"; Href = Some (Page.Api "outlined-input"); Children = [] }\r\n                { Title = "Paper"; Href = Some (Page.Api "paper"); Children = [] }\r\n                { Title = "Popover"; Href = Some (Page.Api "popover"); Children = [] }\r\n                { Title = "Popper"; Href = Some (Page.Api "popper"); Children = [] }\r\n                { Title = "Portal"; Href = Some (Page.Api "portal"); Children = [] }\r\n                { Title = "Radio"; Href = Some (Page.Api "radio"); Children = [] }\r\n                { Title = "RadioGroup"; Href = Some (Page.Api "radio-group"); Children = [] }\r\n                // { Title = "RootRef"; Href = Some (Page.Api "root-ref"); Children = [] }\r\n                { Title = "Select"; Href = Some (Page.Api "select"); Children = [] }\r\n                { Title = "Slide"; Href = Some (Page.Api "slide"); Children = [] }\r\n                { Title = "Snackbar"; Href = Some (Page.Api "snackbar"); Children = [] }\r\n                { Title = "SnackbarContent"; Href = Some (Page.Api "snackbar-content"); Children = [] }\r\n                { Title = "Step"; Href = Some (Page.Api "step"); Children = [] }\r\n                { Title = "StepButton"; Href = Some (Page.Api "step-button"); Children = [] }\r\n                { Title = "StepConnector"; Href = Some (Page.Api "step-connector"); Children = [] }\r\n                { Title = "StepContent"; Href = Some (Page.Api "step-content"); Children = [] }\r\n                { Title = "StepIcon"; Href = Some (Page.Api "step-icon"); Children = [] }\r\n                { Title = "StepLabel"; Href = Some (Page.Api "step-label"); Children = [] }\r\n                { Title = "Stepper"; Href = Some (Page.Api "stepper"); Children = [] }\r\n                { Title = "SvgIcon"; Href = Some (Page.Api "svg-icon"); Children = [] }\r\n                { Title = "SwipeableDrawer"; Href = Some (Page.Api "swipeable-drawer"); Children = [] }\r\n                { Title = "Switch"; Href = Some (Page.Api "switch"); Children = [] }\r\n                { Title = "Tab"; Href = Some (Page.Api "tab"); Children = [] }\r\n                { Title = "Table"; Href = Some (Page.Api "table"); Children = [] }\r\n                { Title = "TableBody"; Href = Some (Page.Api "table-body"); Children = [] }\r\n                { Title = "TableCell"; Href = Some (Page.Api "table-cell"); Children = [] }\r\n                { Title = "TableFooter"; Href = Some (Page.Api "table-footer"); Children = [] }\r\n                { Title = "TableHead"; Href = Some (Page.Api "table-head"); Children = [] }\r\n                { Title = "TablePagination"; Href = Some (Page.Api "table-pagination"); Children = [] }\r\n                { Title = "TableRow"; Href = Some (Page.Api "table-row"); Children = [] }\r\n                { Title = "TableSortLabel"; Href = Some (Page.Api "table-sort-label"); Children = [] }\r\n                { Title = "Tabs"; Href = Some (Page.Api "tabs"); Children = [] }\r\n                { Title = "TextField"; Href = Some (Page.Api "text-field"); Children = [] }\r\n                { Title = "Toolbar"; Href = Some (Page.Api "toolbar"); Children = [] }\r\n                { Title = "Tooltip"; Href = Some (Page.Api "tooltip"); Children = [] }\r\n                { Title = "TouchRipple"; Href = Some (Page.Api "touch-ripple"); Children = [] }\r\n                { Title = "Typography"; Href = Some (Page.Api "typography"); Children = [] }\r\n                { Title = "Zoom"; Href = Some (Page.Api "zoom"); Children = [] }            ]\r\n    }\r\n    {\r\n        Title = "Page layout demos"\r\n        Href = None\r\n        Children =\r\n            [\r\n                { Title = "Sign-in"; Href = Some Page.SignIn; Children = [] }\r\n            ]\r\n    }\r\n]\r\n\r\nlet rec mapNavigation currentPage dispatch (depth: int) =\r\n    fun item ->\r\n        let opened =\r\n            if not (item.Children |> List.isEmpty)\r\n            then item.Children |> List.exists (fun i -> i.Href = Some currentPage)\r\n            else false\r\n        let childItems = item.Children |> List.map (mapNavigation currentPage dispatch (depth + 1))\r\n        Layout.NavigationItem.view item depth opened currentPage childItems dispatch\r\n\r\nlet view currentPage dispatch =\r\n    Mui.list [] (navItems |> List.map (mapNavigation currentPage dispatch 0))\r\n\r\n'},function(e,n){e.exports='module Layout.NavigationItem\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Import.React\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\n\r\nopen App.Types\r\nopen Global\r\nopen Utils\r\n\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\nlet subNavStyles (theme: ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [\r\n            CSSProp.JustifyContent "flex-start"\r\n            CSSProp.LetterSpacing 0\r\n            CSSProp.PaddingLeft 24\r\n            CSSProp.TextTransform "none"\r\n            CSSProp.Width "100%"\r\n            CSSProp.FontWeight theme.typography.fontWeightMedium\r\n        ]\r\n        Styles.Custom ("collapse", [\r\n            CSSProp.Padding 0\r\n            CSSProp.Margin 0\r\n        ])\r\n    ]\r\n\r\n\r\ntype SubNavProps =\r\n    abstract member title: string with get, set\r\n    abstract member opened: bool with get, set\r\n    abstract member childItems: ReactElement list with get, set\r\n    inherit Mui.IClassesProps\r\n\r\n\r\ntype SubNavState = {\r\n    opened: bool\r\n}\r\n\r\ntype SubNav (p) =\r\n    inherit PureComponent<SubNavProps,SubNavState>(p)\r\n    do\r\n        base.setInitState { opened = p.opened }\r\n    member this.Toggle _ =\r\n        this.setState (fun s p -> { s with opened = not s.opened })\r\n\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n        fragment [] [\r\n            Mui.button [\r\n                OnClick this.Toggle\r\n                MaterialProp.Classes [ ClassNames.Root !!classes?button ]\r\n            ] [ str this.props.title ]\r\n            Mui.collapse [\r\n                In this.state.opened\r\n                UnmountOnExit true\r\n                Class !!classes?collapse\r\n            ] [\r\n                Mui.list [] this.props.childItems ]\r\n        ]\r\n\r\nlet subNav props =\r\n    ofType<SubNav, SubNavProps, SubNavState> props []\r\nlet subNavWithStyles<\'a> = Mui.withStyles (StyleType.Func subNavStyles) [] subNav\r\n\r\nlet navItemStyles (theme: ITheme) : IStyles list =\r\n    [\r\n        Styles.Custom ("listItem", [\r\n            CSSProp.Display "block"\r\n            CSSProp.PaddingTop 0\r\n            CSSProp.PaddingBottom 0\r\n        ])\r\n        Styles.Custom ("bold", [\r\n            CSSProp.FontWeight 500\r\n        ])\r\n        Styles.Button [\r\n            CSSProp.JustifyContent "flex-start"\r\n            CSSProp.LetterSpacing 0\r\n            CSSProp.TextTransform "none"\r\n            CSSProp.Width "100%"\r\n            CSSProp.FontWeight theme.typography.fontWeightRegular\r\n        ]\r\n        Styles.Selected [\r\n            CSSProp.Color theme.palette.primary.main\r\n            CSSProp.FontWeight theme.typography.fontWeightMedium\r\n        ]\r\n    ]\r\n\r\n\r\ntype NavItemProps =\r\n    abstract member title : string with get,set\r\n    abstract member href : Page option with get,set\r\n    abstract member depth : int with get,set\r\n    abstract member currentPage : Page with get,set\r\n    abstract member opened : bool with get,set\r\n    abstract member childItems : ReactElement list with get,set\r\n    abstract member dispatch : (Msg->unit) with get,set\r\n    inherit Mui.IClassesProps\r\n\r\nlet navItem (props : NavItemProps) =\r\n    let style = [ CSSProp.PaddingLeft (8 * (3 + 2 * props.depth)) ]\r\n    match props.href with\r\n    | Some page ->\r\n        let buttonClasses =\r\n            [ (!!props.classes?selected, props.currentPage = page) ] |> classNames\r\n        Mui.listItem [\r\n            DisableGutters true\r\n            Class !!props.classes?listItem\r\n        ] [\r\n            Mui.button [\r\n                DisableRipple true\r\n                MaterialProp.Component ("a" |> U3.Case1)\r\n                Style style\r\n                Class buttonClasses\r\n                MaterialProp.Classes [ ClassNames.Root !!props.classes?button ]\r\n                HTMLAttr.Href (toHash page)\r\n                OnClick (fun _ -> OpenMenu false |> props.dispatch)\r\n            ] [ str props.title ]\r\n        ]\r\n    | None ->\r\n        let subNavProps = createEmpty<SubNavProps>\r\n        subNavProps.opened <- props.opened\r\n        subNavProps.title <- props.title\r\n        subNavProps.childItems <- props.childItems\r\n        Mui.listItem [\r\n            DisableGutters true\r\n            Class !!props.classes?listItem\r\n        ] [ from subNavWithStyles subNavProps [] ]\r\n\r\nlet navItemWithStyles = Mui.withStyles (StyleType.Func navItemStyles) [] navItem\r\n\r\nlet view item depth opened currentPage childItems dispatch =\r\n    let props = createEmpty<NavItemProps>\r\n    props.title <- item.Title\r\n    props.href <- item.Href\r\n    props.depth <- depth\r\n    props.currentPage <- currentPage\r\n    props.opened <- opened\r\n    props.childItems <- childItems\r\n    props.dispatch <- dispatch\r\n    from navItemWithStyles props []\r\n'},function(e,n){e.exports='module PageLayoutDemos.SignIn\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nmodule Mui = Fable.Helpers.MaterialUI\r\n\r\nlet toObj = keyValueList CaseRules.LowerFirst\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    // In Fable 2 you don\'t need to create a seperate variable.\r\n    let breakPoint = theme.breakpoints.up( U2.Case2 <| 400 + theme.spacing.unit * 3 * 2 )\r\n\r\n    [\r\n        Styles.Layout [\r\n            Width "auto"\r\n            Display "block"\r\n            MarginLeft (theme.spacing.unit * 3)\r\n            MarginRight (theme.spacing.unit * 3)\r\n            CSSProp.Custom(\r\n                breakPoint, [\r\n                    Width 400\r\n                    MarginLeft "auto"\r\n                    MarginRight "auto"\r\n                ] |> toObj)\r\n        ]\r\n        Styles.Paper [\r\n            MarginTop (theme.spacing.unit * 8)\r\n            Display "Flex"\r\n            FlexDirection "column"\r\n            CSSProp.AlignItems "center"\r\n            CSSProp.Padding (sprintf "%ipx %ipx %ipx" (theme.spacing.unit * 2) (theme.spacing.unit * 3) (theme.spacing.unit * 3))            \r\n        ]\r\n\r\n        Styles.Avatar [\r\n            CSSProp.Margin theme.spacing.unit\r\n            BackgroundColor theme.palette.secondary.main\r\n        ]\r\n\r\n        Styles.Form [\r\n            Width "100%"\r\n            MarginTop theme.spacing.unit\r\n        ]\r\n\r\n        Styles.Custom (\r\n            "submit",\r\n            [MarginTop (theme.spacing.unit * 3)]\r\n        )\r\n    ]\r\n\r\nlet withStyles<\'a> = Mui.withStyles (StyleType.Func styles) []\r\n\r\nlet lockIcon =\r\n    Mui.svgIcon [] [\r\n        path [\r\n            SVGAttr.D "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"\r\n        ] []\r\n    ]\r\n\r\nlet signIn props =\r\n    let classes = props?classes\r\n\r\n    main [Class !!classes?layout ] [\r\n        paper [Class !!classes?paper] [\r\n            avatar [Class !!classes?avatar] [\r\n                lockIcon\r\n            ]\r\n\r\n            typography [Variant TypographyVariant.H5] [ str "Sign in" ]\r\n\r\n            form [Class !!classes?form] [\r\n                formControl [MaterialProp.Margin FormControlMargin.Normal; HTMLAttr.Required true; MaterialProp.FullWidth true] [\r\n                    inputLabel [HtmlFor "email"] [str "Email Address"]\r\n                    input [\r\n                        Id "email"\r\n                        HTMLAttr.Name "email"\r\n                        AutoComplete "email"\r\n                        AutoFocus true\r\n                    ]\r\n                ]\r\n\r\n                formControl [MaterialProp.Margin FormControlMargin.Normal; HTMLAttr.Required true; MaterialProp.FullWidth true] [\r\n                    inputLabel [HtmlFor "password"] [str "Password"]\r\n                    input [\r\n                        HTMLAttr.Name "password"\r\n                        HTMLAttr.Type "password"\r\n                        Id "password"\r\n                        AutoComplete "current-password"\r\n                    ]\r\n                ]\r\n\r\n                button [ HTMLAttr.Type "submit"\r\n                         MaterialProp.FullWidth true\r\n                         ButtonProp.Variant ButtonVariant.Contained\r\n                         MaterialProp.Color ComponentColor.Primary\r\n                         Class !!classes?submit ]  [\r\n                    str "Sign in"\r\n                ]\r\n            ]\r\n        ]        \r\n    ]\r\n\r\nlet root () =\r\n    from (signIn |> withStyles) createEmpty []'},function(e,n){e.exports='module App.State\r\n\r\nopen Elmish\r\nopen Elmish.Browser.Navigation\r\nopen Elmish.Browser.UrlParser\r\nopen Fable.Import.Browser\r\nopen Fable.Import\r\nopen Global\r\nopen Types\r\n\r\nlet pageParser: Parser<Page->Page,Page> =\r\n    oneOf [\r\n        map Home (s "/")\r\n        map Home (s "home")\r\n        map Installation (s "getting-started" </> s "installation")\r\n        map Usage (s "getting-started" </> s "usage")\r\n        map MigrationToV2 (s "getting-started" </> s "migration-to-v2")\r\n        map AppBar (s "demos" </> s "app-bar")\r\n        map Avatars (s "demos" </> s "avatars")\r\n        map Buttons (s "demos" </> s "buttons")\r\n        map TextFields (s "demos" </> s "text-fields")\r\n        map SignIn (s "pagelayout" </> s "signin")\r\n        map Overrides (s "customization" </> s "overrides")\r\n        map Themes (s "customization" </> s "themes")\r\n        map CssInJs (s "customization" </> s "css-in-js")\r\n        map DefaultTheme (s "customization" </> s "default-theme")\r\n        map Api (s "api" </> str)\r\n    ]\r\n\r\nlet urlUpdate (result: Option<Page>) model =\r\n    match result with\r\n    | None ->\r\n        model,Navigation.modifyUrl (toHash model.currentPage)\r\n    | Some page ->\r\n        { model with currentPage = page; isLanding = (page = Home) }, [fun _ -> Browser.window.scroll(0.,0.) ]\r\n\r\nlet init result =\r\n    let (model, cmd) =\r\n        urlUpdate result\r\n           { currentPage = Home\r\n             isLanding = true\r\n             menuOpen = false\r\n           }\r\n    model, Cmd.batch [ cmd ]\r\n\r\nlet update (msg: Msg) model =\r\n    match msg with\r\n    | OpenMenu o->\r\n        { model with menuOpen = o}, Cmd.Empty\r\n'},function(e,n){e.exports="module App.Types\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.MaterialUI\r\nopen Global\r\n\r\ntype Msg =\r\n    | OpenMenu of bool\r\n\r\ntype Model = {\r\n    currentPage: Page\r\n    isLanding: bool\r\n    menuOpen: bool\r\n}\r\n\r\n\r\ntype AppProps =\r\n    abstract member model : Model with get,set\r\n    abstract member dispatch : (Msg->unit) with get,set\r\n    inherit IClassesProps\r\n"},function(e,n){e.exports='module Utils\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Helpers.React.Props\r\n\r\nlet toObj list =\r\n    keyValueList CaseRules.LowerFirst list\r\n\r\nlet classNames =\r\n    List.choose (fun (txt,add) -> if add then Some txt else None)\r\n    >> String.concat " "\r\n\r\nlet customCss name styles =\r\n    CSSProp.Custom (name, styles |> toObj)\r\n\r\nlet customAttr name props =\r\n    HTMLAttr.Custom (name, props |> toObj)'},function(e,n){e.exports='module Demos.AppBar.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.AppBar\r\nopen Components\r\n\r\nlet text = importDefault "./AppBar.md"\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view "## Simple App Bar" "./Demos/AppBar/SimpleAppBar.fs" SimpleAppBar.view\r\n        Demo.view "## App Bar with buttons" "./Demos/AppBar/AppBarWithButtons.fs" AppBarWithButtons.view\r\n    ]'},function(e,n){e.exports='module Demos.AppBar.AppBarWithButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            FlexGrow 1\r\n        ]\r\n        Styles.Custom\r\n            ("flex", [\r\n                FlexGrow 1\r\n            ])\r\n        Styles.Custom\r\n            ("menuButton", [\r\n                CSSProp.MarginLeft -12\r\n                CSSProp.MarginRight 20\r\n            ])\r\n    ]\r\n\r\nlet appBar (props : IClassesProps) =\r\n    let classes = props.classes\r\n    div [ Class !!classes?root ] [\r\n        appBar [\r\n            AppBarProp.Position AppBarPosition.Static\r\n        ] [\r\n            toolbar [] [\r\n                iconButton [\r\n                    Class !!classes?menuButton\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                    HTMLAttr.Custom ("aria-label", "Menu")\r\n                ] [ icon [] [ str "menu" ] ]\r\n                typography [\r\n                    Class !!classes?flex\r\n                    TypographyProp.Variant TypographyVariant.H6\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "News" ]\r\n                button [\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "Login" ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet appBarWithStyles = withStyles<IClassesProps> (StyleType.Styles styles) [] appBar\r\n\r\nlet view () =\r\n    from appBarWithStyles createEmpty []'},function(e,n){e.exports='module Demos.AppBar.SimpleAppBar\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles : IStyles list =\r\n    [ Styles.Root [ CSSProp.FlexGrow 1 ] ]\r\n\r\nlet appBar (props : IClassesProps) =\r\n    div [ Class !!props.classes?root ] [\r\n        appBar [\r\n            AppBarProp.Position AppBarPosition.Static\r\n            MaterialProp.Color ComponentColor.Default\r\n        ] [\r\n            toolbar [] [\r\n                typography [\r\n                    TypographyProp.Variant TypographyVariant.H6\r\n                    MaterialProp.Color ComponentColor.Inherit\r\n                ] [ str "Photos" ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet appBarWithStyles = withStyles<IClassesProps> (StyleType.Styles styles) [] appBar\r\n\r\nlet view () =\r\n    from appBarWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Avatars.View\r\nopen Fable.Helpers.React\r\n\r\nlet root () =\r\n    div [] [ str "avatars" ]\r\n'},function(e,n){e.exports='module Demos.Buttons.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.Buttons\r\nopen Components\r\n\r\nlet text = importDefault "./Buttons.md"\r\n\r\nlet textButtonsText = """\r\n## Text Buttons\r\n\r\n[Text buttons](https://material.io/design/components/buttons.html#text-button)\r\nare typically used for less-pronounced actions, including those located:\r\n\r\n- In dialogs\r\n- In cards\r\n\r\nIn cards, text buttons help maintain an emphasis on card content.\r\n"""\r\n\r\nlet outlinedButtonsText = """\r\n## Outlined Buttons\r\n\r\n[Outlined buttons](https://material.io/design/components/buttons.html#outlined-button)\r\nare medium-emphasis buttons. They contain actions that are important,\r\nbut aren’t the primary action in an app.\r\n\r\n### Alternatives\r\n\r\nOutlined buttons are also a lower emphasis alternative to contained buttons,\r\nor a higher emphasis alternative to text buttons.\r\n"""\r\n\r\nlet containedButtonsText = """\r\n## Contained Buttons\r\n\r\n[Contained buttons](https://material.io/design/components/buttons.html#contained-button)\r\nare high-emphasis, distinguished by their use of elevation and fill.\r\nThey contain actions that are primary to your app.\r\n\r\nThe last example of this demo show how to use an upload button.\r\n"""\r\n\r\nlet floatingButtonsText = """\r\n## Floating Action Buttons\r\n\r\nA [floating action button](https://material.io/design/components/buttons-floating-action-button.html)\r\n(FAB) performs the primary, or most common, action on a screen.\r\nIt appears in front of all screen content, typically as a circular shape with an icon in its center.\r\nFABs come in three types: regular, mini, and extended.\r\n\r\nOnly use a FAB if it is the most suitable way to present a screen’s primary action.\r\n\r\nOnly one floating action button is recommended per screen to represent the most common action.\r\n"""\r\n\r\nlet floatingButtonZoomText = """\r\nThe floating action button animates onto the screen as an expanding piece of material, by default.\r\n\r\nA floating action button that spans multiple lateral screens (such as tabbed screens) should briefly disappear,\r\nthen reappear if its action changes.\r\n\r\nThe Zoom transition can be used to achieve this. Note that since both the exiting and entering\r\nanimations are triggered at the same time, we use `enterDelay` to allow the outgoing Floating Action Button\'s\r\nanimation to finish before the new one enters.\r\n"""\r\n\r\nlet buttonSizesText = """\r\n## Sizes\r\n\r\nFancy larger or smaller buttons? Use the `ButtonProp.Size` or the `ButtonProp.Mini` property.\r\n"""\r\n\r\nlet iconButtonsText = """\r\n## Icon Buttons\r\n\r\nIcon buttons are commonly found in app bars and toolbars.\r\n\r\nIcons are also appropriate for toggle buttons that allow a single choice to be selected or\r\ndeselected, such as adding or removing a star to an item.\r\n"""\r\n\r\nlet iconLabelButtonsText = """\r\n### Buttons with icons and label\r\n\r\nSometimes you might want to have icons for certain button to enhance the UX of the application as we recognize logos more easily than plain text. For example, if you have a delete button you can label it with a dustbin icon.\r\n"""\r\n\r\nlet customizedButtonsText = """\r\n## Customized Buttons\r\n\r\nIf you have been reading the [overrides documentation page](#/customization/overrides)\r\nbut you are not confident jumping in,\r\nhere are examples of how you can change the main color of a Button using classes,\r\nand using a theme; and of a Bootstrap style Button.\r\n"""\r\n\r\nlet complexButtonsText = """\r\n## Complex Buttons\r\n\r\nThe Text Buttons, Contained Buttons, Floating Action Buttons and Icon Buttons are built on top of the same component: the `ButtonBase`.\r\nYou can take advantage of this lower level component to build custom interactions.\r\n"""\r\n\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view textButtonsText "./Demos/Buttons/TextButtons.fs" TextButtons.view\r\n        Demo.view outlinedButtonsText "./Demos/Buttons/OutlinedButtons.fs" OutlinedButtons.view\r\n        Demo.view containedButtonsText "./Demos/Buttons/ContainedButtons.fs" ContainedButtons.view\r\n        Demo.view floatingButtonsText "./Demos/Buttons/FloatingActionButtons.fs" FloatingActionButtons.view\r\n        Demo.view floatingButtonZoomText "./Demos/Buttons/FloatingActionButtonZoom.fs" FloatingActionButtonZoom.view\r\n        Demo.view buttonSizesText "./Demos/Buttons/ButtonSizes.fs" ButtonSizes.view\r\n        Demo.view iconButtonsText "./Demos/Buttons/IconButtons.fs" IconButtons.view\r\n        Demo.view iconLabelButtonsText "./Demos/Buttons/IconLabelButtons.fs" IconLabelButtons.view\r\n        Demo.view customizedButtonsText "./Demos/Buttons/CustomizedButtons.fs" CustomizedButtons.view\r\n    ]\r\n'},function(e,n){e.exports='module Demos.Buttons.ButtonSizes\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [ Styles.Button [ CSSProp.Margin theme.spacing.unit ] ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            button [\r\n                ButtonProp.Size ButtonSize.Small\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Small" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Medium\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Medium" ]\r\n            button [\r\n                ButtonProp.Size ButtonSize.Large\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Large" ]\r\n        ]\r\n        R.div [] [\r\n            fab [\r\n                FabProp.Size FabSize.Small\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n            fab [\r\n                FabProp.Size FabSize.Medium\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n            fab [\r\n                FabProp.Size FabSize.Large\r\n                MaterialProp.Color ComponentColor.Secondary\r\n                HTMLAttr.Class !!classes?button\r\n                HTMLAttr.Custom ("aria-label", "Add")\r\n            ] [ icon [] [ R.str "add_icon" ]]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports="module Demos.Buttons.ComplexButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n"},function(e,n){e.exports='module Demos.Buttons.ContainedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Default" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            HTMLAttr.Href "#/demos/buttons"\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "contained-button-file"\r\n            HTMLAttr.Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "contained-button-file" ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.CustomizedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\nmodule R = Fable.Helpers.React\r\n\r\nlet toObj = keyValueList CaseRules.LowerFirst\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [ CSSProp.Margin theme.spacing.unit])\r\n        Styles.Custom\r\n            ("cssRoot", [\r\n                CSSProp.Color (theme.palette.getContrastText(Colors.purple.``500``))\r\n                CSSProp.BackgroundColor Colors.purple.``500``\r\n                CSSProp.Custom\r\n                    ("&:hover", [ CSSProp.BackgroundColor Colors.purple.``700`` ] |> toObj)\r\n            ])\r\n        Styles.Custom\r\n            ("boostrapRoot", [\r\n                CSSProp.BoxShadow "none"\r\n                CSSProp.TextTransform "none"\r\n                CSSProp.FontSize 16\r\n                CSSProp.Padding "6px 12px"\r\n                CSSProp.Border "1px solid"\r\n                CSSProp.BackgroundColor "#007bff"\r\n                CSSProp.BorderColor "#007bff"\r\n                CSSProp.FontFamily\r\n                    ([ "-apple-system"\r\n                       "BlinkMacSystemFont"\r\n                       @"""Segoe UI"""\r\n                       "Roboto"\r\n                       @"""Helvetica Neue"""\r\n                       "Arial"\r\n                       "sans-serif"\r\n                       @"""Apple Color Emoji"""\r\n                       @"""Segoe UI Emoji"""\r\n                       @"""Segoe UI Symbol"""] |> String.concat ",")\r\n                CSSProp.Custom\r\n                    ("&:hover", [\r\n                        CSSProp.BackgroundColor "#0069d9"\r\n                        CSSProp.BorderColor "#0069d9"\r\n                    ] |> toObj)\r\n                CSSProp.Custom\r\n                    ("&:active", [\r\n                        CSSProp.BoxShadow "none"\r\n                        CSSProp.BackgroundColor "#0062cc"\r\n                        CSSProp.BorderColor "#0062cc"\r\n                    ] |> toObj)\r\n                CSSProp.Custom\r\n                    ("&:focus", [\r\n                        CSSProp.BoxShadow "0 0 0 0.2rem rgba(0,123,255,.5)"\r\n                    ] |> toObj)\r\n            ])\r\n    ]\r\n\r\nlet theme = createMuiTheme [\r\n                Typography [\r\n                    // Needed until Material-UI v4 to avoid deprecation warning: https://material-ui.com/style/typography#migration-to-typography-v2\r\n                    UseNextVariants true\r\n                ]\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [ PaletteIntentionProp.Main Colors.green.``500`` ]\r\n                ]\r\n            ]\r\n\r\n\r\nlet buttons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [ HTMLAttr.Class !!classes?container ] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class ([!!classes?margin; !!classes?cssRoot] |> String.concat " ")\r\n        ] [ R.str "Custom CSS" ]\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Contained\r\n                MaterialProp.Color ComponentColor.Primary\r\n                HTMLAttr.Class !!classes?margin\r\n            ] [ R.str "MuiThemeProvider" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            MaterialProp.DisableRipple true\r\n            HTMLAttr.Class ([!!classes?margin; !!classes?bootstrapRoot] |> String.concat " ")\r\n        ] [ R.str "Bootstrap" ]\r\n    ]\r\n\r\nlet buttonsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.FloatingActionButtonZoom\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Import.React\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\nmodule R = Fable.Helpers.React\r\n\r\nlet tabContainer children =\r\n    typography [\r\n        MaterialProp.Component ("div" |> U3.Case1)\r\n        Style [ CSSProp.Padding (8 * 3) ]\r\n    ] children\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.BackgroundColor theme.palette.background.paper\r\n            CSSProp.Width 500\r\n            CSSProp.Position "relative"\r\n            CSSProp.MinHeight 200\r\n        ]\r\n        Styles.Fab [\r\n            CSSProp.Position "absolute"\r\n            CSSProp.Bottom (theme.spacing.unit * 2)\r\n            CSSProp.Right (theme.spacing.unit * 2)\r\n        ]\r\n        Styles.Custom (\r\n            "fabGreen",\r\n            [\r\n                CSSProp.Color theme.palette.common.white\r\n                CSSProp.BackgroundColor Colors.green.``500``\r\n            ]\r\n        )\r\n    ]\r\n\r\n\r\ntype Fab = {\r\n    color : ComponentColor\r\n    className : string\r\n    icon : ReactElement\r\n}\r\n\r\n\r\ntype ButtonsProps =\r\n    inherit IClassesProps\r\n\r\n\r\ntype ButtonsState = {\r\n    value : int\r\n}\r\n\r\ntype FloatingActionButtonZoom (props) =\r\n    inherit Component<ButtonsProps,ButtonsState>(props)\r\n    do base.setInitState { value = 0 }\r\n\r\n    member this.handleChange _ index =\r\n        this.setState (fun s _ -> { s with value = index })\r\n\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n        let theme : ITheme = !!this.props?theme\r\n        let transitionExit = theme.transitions.duration.leavingScreen\r\n        let transitionsDuration = [\r\n            TransitionDurationProp.Enter theme.transitions.duration.enteringScreen\r\n            TransitionDurationProp.Exit transitionExit\r\n        ]\r\n        let fabs = [\r\n            {\r\n                color = ComponentColor.Primary\r\n                className = !!classes?fab\r\n                icon = icon [] [ R.str "add_icon" ]\r\n            }\r\n            {\r\n                color = ComponentColor.Secondary\r\n                className = !!classes?fab\r\n                icon = icon [] [ R.str "edit_icon" ]\r\n            }\r\n            {\r\n                color = ComponentColor.Inherit\r\n                className = !!classes?fab + " " + !!classes?fabGreen\r\n                icon = icon [] [ R.str "keyboard_arrow_up_icon" ]\r\n            }\r\n        ]\r\n\r\n        R.div [ Class !!classes?root ] [\r\n            yield appBar [\r\n                AppBarProp.Position AppBarPosition.Static\r\n                MaterialProp.Color ComponentColor.Default\r\n            ] [\r\n                tabs [\r\n                    MaterialProp.Value this.state.value\r\n                    TabsProp.OnChange this.handleChange\r\n                    TabsProp.IndicatorColor TabsIndicatorColor.Primary\r\n                    TabsProp.TextColor TabsTextColor.Primary\r\n                    MaterialProp.FullWidth true\r\n                ] [\r\n                    tab [ MaterialProp.Label (R.str "Item One" |> U2.Case1 |> U3.Case1)]\r\n                    tab [ MaterialProp.Label (R.str "Item Two" |> U2.Case1 |> U3.Case1)]\r\n                    tab [ MaterialProp.Label (R.str "Item Three" |> U2.Case1 |> U3.Case1)]\r\n                ]\r\n            ]\r\n            yield (match this.state.value with\r\n                   | 1 -> tabContainer [ R.str "Item Two"]\r\n                   | 2 -> tabContainer [ R.str "Item Three"]\r\n                   | _ -> tabContainer [ R.str "Item One" ] )\r\n            yield! fabs |> List.mapi (fun i f ->\r\n                zoom [\r\n                    Key (f.color |> string)\r\n                    MaterialProp.In (this.state.value = i)\r\n                    MaterialProp.Timeout (transitionsDuration |> U2.Case2)\r\n                    Style [\r\n                        CSSProp.TransitionDelay\r\n                            ((if this.state.value = i then transitionExit else 0.) |> sprintf "%.0fms")\r\n                    ]\r\n                    TransitionProp.UnmountOnExit true\r\n                ] [\r\n                    fab [\r\n                        HTMLAttr.Class f.className\r\n                        MaterialProp.Color f.color\r\n                    ] [ f.icon ]\r\n                ])\r\n        ]\r\n\r\nlet floatingButtonsZoom props =\r\n    R.ofType<FloatingActionButtonZoom,_,_> props []\r\n\r\nlet floatingButtonsZoomWithStyles =\r\n    withStyles<ButtonsProps> (StyleType.Func styles) [ StyleOption.WithTheme true ] floatingButtonsZoom\r\n\r\nlet view () =\r\n    R.from floatingButtonsZoomWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.FloatingActionButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Custom ("extendedIcon", [ CSSProp.MarginRight theme.spacing.unit ])\r\n    ]\r\n\r\nlet fabs (props : IClassesProps) =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        fab [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "add_icon" ]]\r\n        fab [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "edit_icon" ]]\r\n        fab [\r\n            FabProp.Variant FabVariant.Extended\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ \r\n            icon [] [ R.str "navigation_icon" ]\r\n            R.str "Extended"\r\n        ]\r\n        fab [\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ]]\r\n    ]\r\n\r\nlet fabsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] fabs\r\n\r\nlet view () =\r\n    R.from fabsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.IconButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        iconButton [\r\n            HTMLAttr.Custom ("aria-label", "Delete")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Custom ("aria-label", "Delete")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "delete_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Custom ("aria-label", "Add an alarm")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "alarm_icon" ] ]\r\n        iconButton [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Custom ("aria-label", "Add to shopping cart")\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ icon [] [ R.str "add_shopping_cart_icon" ] ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "icon-button-file"\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "icon-button-file" ] [\r\n            iconButton [\r\n                MaterialProp.Color ComponentColor.Primary\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ icon [] [ R.str "photo_camera_icon" ] ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.IconLabelButtons\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Custom ("leftIcon", [ CSSProp.MarginRight theme.spacing.unit ])\r\n        Styles.Custom ("rightIcon", [ CSSProp.MarginLeft theme.spacing.unit ])\r\n        Styles.Custom ("iconSmall", [ CSSProp.FontSize 20 ])\r\n    ]\r\n\r\nlet buttons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Delete"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "delete_icon" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Send"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "send" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Default\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            R.str "Upload"\r\n            icon [ HTMLAttr.Class !!classes?rightIcon ] [ R.str "cloud_up" ]\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            icon [ HTMLAttr.Class !!classes?leftIcon ] [ R.str "keyboard_voice" ]\r\n            R.str "Talk"\r\n        ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Contained\r\n            ButtonProp.Size ButtonSize.Small\r\n            HTMLAttr.Class !!classes?button\r\n        ] [\r\n            icon [\r\n                HTMLAttr.Class (!!classes?leftIcon + " " + !!classes?iconSmall)\r\n            ] [ R.str "save" ]\r\n            R.str "Save"\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles = withStyles<IClassesProps> (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []\r\n'},function(e,n){e.exports='module Demos.Buttons.OutlinedButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI.Props\r\nmodule R = Fable.Helpers.React\r\n\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [ CSSProp.Margin theme.spacing.unit ]\r\n        Styles.Input [ CSSProp.Display "none" ]\r\n    ]\r\n\r\nlet buttons props =\r\n    let classes = props?classes\r\n    R.div [] [\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Default" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            MaterialProp.Color ComponentColor.Primary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Disabled true\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            ButtonProp.Variant ButtonVariant.Outlined\r\n            HTMLAttr.Href "#/demos/buttons"\r\n            HTMLAttr.Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            HTMLAttr.Accept "image/*"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Id "outlined-button-file"\r\n            HTMLAttr.Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [ HTMLAttr.HtmlFor "outlined-button-file" ] [\r\n            button [\r\n                ButtonProp.Variant ButtonVariant.Outlined\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                HTMLAttr.Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet buttonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] buttons\r\n\r\nlet view () =\r\n    R.from buttonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.Buttons.TextButtons\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nmodule R = Fable.Helpers.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Button [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n        Styles.Input [\r\n            Display "none"\r\n        ]\r\n    ]\r\nlet textButtons (props : IClassesProps) =\r\n    let classes = props.classes\r\n    R.div [] [\r\n        button [ Class !!classes?button ] [ R.str "Default" ]\r\n        button [\r\n            MaterialProp.Color ComponentColor.Primary\r\n            Class !!classes?button\r\n        ] [ R.str "Primary" ]\r\n        button [\r\n            MaterialProp.Color ComponentColor.Secondary\r\n            Class !!classes?button\r\n        ] [ R.str "Secondary" ]\r\n        button [\r\n            HTMLAttr.Disabled true\r\n            Class !!classes?button\r\n        ] [ R.str "Disabled" ]\r\n        button [\r\n            Href "#/demos/buttons"\r\n            Class !!classes?button\r\n        ] [ R.str "Link" ]\r\n        R.input [\r\n            Accept "image/*"\r\n            Class !!classes?input\r\n            Id "flat-button-file"\r\n            Multiple true\r\n            HTMLAttr.Type "file"\r\n        ]\r\n        R.label [\r\n            HtmlFor "flat-button-file"\r\n        ] [\r\n            button [\r\n                MaterialProp.Component ("span" |> U3.Case1)\r\n                Class !!classes?button\r\n            ] [ R.str "Upload" ]\r\n        ]\r\n    ]\r\n\r\nlet textButtonsWithStyles<\'a> = withStyles (StyleType.Func styles) [] textButtons\r\n\r\nlet view () =\r\n    R.from textButtonsWithStyles createEmpty []'},function(e,n){e.exports='module Demos.TextFields.View\r\n\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\n\r\nopen Demos.TextFields\r\nopen Components\r\n\r\nlet text = importDefault "./TextFields.md"\r\nlet textFieldText = """\r\n## TextField\r\n\r\nThe `TextField` wrapper component is a complete form control including a label, input and help text.\r\n"""\r\n\r\nlet outlinedText = """\r\n## Outlined\r\n\r\n`TextField` supports outlined styling.\r\n"""\r\n\r\nlet filledText = """\r\n## Filled\r\n\r\n`TextField` supports filled styling.\r\n"""\r\n\r\nlet composedText = """\r\n## Components\r\n\r\n`TextField` is composed of smaller components (\r\n`FormControl`,\r\n`Input`,\r\n`InputLabel`,\r\nand `FormHelperText`\r\n) that you can leverage directly to significantly customize your form inputs.\r\n\r\nYou might also have noticed that some native HTML input properties are missing from the `TextField` component.\r\nThis is on purpose.\r\nThe component takes care of the most used properties, then it\'s up to the user to use the underlying component shown in the following demo. Still, you can use `inputProps` (and `InputProps`, `InputLabelProps` properties) if you want to avoid some boilerplate.\r\n"""\r\n\r\nlet layoutText = """\r\n## Layout\r\n\r\n`TextField`, `FormControl` allow the specification of `margin` to alter the vertical spacing of inputs. Using\r\n`none` (default) will not apply margins to the `FormControl`, whereas `dense` and `normal` will as well as alter\r\nother styles to meet the specification.\r\n"""\r\n\r\nlet inputAdornmentsText = """\r\n## Input Adornments\r\n\r\n`Input` allows the provision of `InputAdornment`.\r\nThese can be used to add a prefix, a suffix or an action to an input.\r\nFor instance, you can use an icon button to hide or reveal the password.\r\n"""\r\n\r\nlet customizedText = """\r\n## Customized inputs\r\n\r\nIf you have been reading the overrides documentation page\r\nbut you are not confident jumping in, here\'s an example of how you can change the main color of an Input.\r\n"""\r\n\r\nlet withIconText = """\r\n## With icon\r\n\r\nIcons can be specified as prepended or appended.\r\n"""\r\nlet view () =\r\n    div [] [\r\n        Markdown.view text\r\n        Demo.view textFieldText "./Demos/TextFields/TextField.fs" TextField.view\r\n        Demo.view outlinedText "./Demos/TextFields/Outlined.fs" Outlined.view\r\n        Demo.view filledText "./Demos/TextFields/Filled.fs" Filled.view\r\n        Demo.view composedText "./Demos/TextFields/Composed.fs" Composed.view\r\n        Demo.view "## Input" "./Demos/TextFields/Input.fs" Input.view\r\n        Demo.view layoutText "./Demos/TextFields/Layout.fs" Layout.view\r\n        Demo.view inputAdornmentsText "./Demos/TextFields/InputAdornments.fs" InputAdornments.view\r\n        Demo.view "## Filled Input Adornments" "./Demos/TextFields/FilledInputAdornments.fs" FilledInputAdornments.view\r\n        Demo.view "## Outlined Input Adornments" "./Demos/TextFields/OutlinedInputAdornments.fs" OutlinedInputAdornments.view\r\n        Demo.view customizedText "./Demos/TextFields/Customized.fs" Customized.view\r\n        Demo.view withIconText "./Demos/TextFields/WithIcon.fs" WithIcon.view\r\n    ]\r\n'},function(e,n){e.exports='module Demos.TextFields.Composed\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.FormControl [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n    ]\r\n\r\ntype ComposedTextFieldState = {\r\n    name : string\r\n}\r\n\r\ntype ComposedTextField(p) =\r\n    inherit Component<IClassesProps,ComposedTextFieldState>(p)\r\n    do\r\n        base.setInitState { name = "Composed TextField" }\r\n\r\n    member private this.handleChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    override this.render() =\r\n        let classes = this.props.classes\r\n        div [ HTMLAttr.Class !!classes?container ] [\r\n            formControl [ HTMLAttr.Class !!classes?formControl ] [\r\n                inputLabel [ HtmlFor "component-simple" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-simple"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Custom ("aria-describedby", "component-helper-text")\r\n            ] [\r\n                inputLabel [ HtmlFor "component-helper" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-helper"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "component-helper-text" ] [\r\n                    str "Some important helper text"\r\n                ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Disabled true\r\n            ] [\r\n                inputLabel [ HtmlFor "component-disabled" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-disabled"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ ] [ str "Disabled" ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                HTMLAttr.Custom ("aria-describedby", "component-error-text")\r\n                MaterialProp.Error true\r\n            ] [\r\n                inputLabel [ HtmlFor "component-error" ] [ str "Name" ]\r\n                input [\r\n                    HTMLAttr.Id "component-error"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "component-error-text" ] [ str "Error" ]\r\n            ]\r\n            formControl [\r\n                HTMLAttr.Class !!classes?formControl\r\n                FormControlProp.Variant FormControlVariant.Filled\r\n            ] [\r\n                inputLabel [ HtmlFor "component-filled" ] [ str "Name" ]\r\n                filledInput [\r\n                    HTMLAttr.Id "component-filled"\r\n                    HTMLAttr.Value this.state.name\r\n                    DOMAttr.OnChange this.handleChange\r\n                ] []\r\n            ]\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<ComposedTextField,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.Customized\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.MaterialUI\r\n\r\nlet toObj props = keyValueList CaseRules.LowerFirst props\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("cssLabel", [\r\n            CSSProp.Custom ("&$cssFocused",\r\n                [\r\n                    CSSProp.Color Colors.purple.``500``\r\n                ] |> toObj)\r\n        ])\r\n        Styles.Custom ("cssFocused", [])\r\n        Styles.Custom ("cssUnderline", [\r\n            CSSProp.Custom ("&:after", [\r\n                CSSProp.BorderBottomColor Colors.purple.``500``\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapRoot", [\r\n            CSSProp.Custom ("label + &", [\r\n                CSSProp.MarginTop (theme.spacing.unit * 3)\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapInput", [\r\n            CSSProp.BorderRadius 4\r\n            CSSProp.BackgroundColor theme.palette.common.white\r\n            CSSProp.Border "1px solid #ced4da"\r\n            CSSProp.FontSize 16\r\n            CSSProp.Padding "10px 12px"\r\n            CSSProp.Transition (theme.transitions.create(["border-color"; "box-shadow"] |> U2.Case2))\r\n            CSSProp.FontFamily (\r\n                [ "-apple-system"\r\n                  "BlinkMacSystemFont"\r\n                  "\\"Segou UI\\""\r\n                  "Roboto"\r\n                  "\\"Helvetica Neue\\""\r\n                  "Arial"\r\n                  "sans-serif"\r\n                  "\\"Apple Color Emoji\\""\r\n                  "\\"Segoe UI Emoji\\""\r\n                  "\\"Segoe UI Symbol\\"" ] |> String.concat(","))\r\n            CSSProp.Custom ("&:focus", [\r\n                CSSProp.BorderColor "#80bdff"\r\n                CSSProp.BoxShadow "0 0 0 0.2rem rgba(0,123,255,.25)"\r\n            ] |> toObj)\r\n        ])\r\n        Styles.Custom ("bootstrapFormLabel", [\r\n            CSSProp.FontSize 18\r\n        ])\r\n    ]\r\n\r\nlet theme = createMuiTheme([\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                ]\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.green.``500``\r\n                    ]\r\n                ]\r\n            ])\r\n\r\nlet customizedInputs (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [\r\n                HTMLAttr.HtmlFor "custom-css-input"\r\n                ChildrenProp.FormLabelClasses [\r\n                    ClassNames.Root !!classes?cssLabel\r\n                    ClassNames.Focused !!classes?cssFocused\r\n                ]\r\n            ] [ str "Custom CSS" ]\r\n            input [\r\n                HTMLAttr.Id "custom-css-input"\r\n                MaterialProp.Classes [\r\n                    ClassNames.Underline !!classes?cssUnderline\r\n                ]\r\n            ]\r\n        ]\r\n        muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n            textField [\r\n                HTMLAttr.Class !!classes?margin\r\n                HTMLAttr.Label "MuiThemeProvider"\r\n                HTMLAttr.Id "mui-theme-provider-input"\r\n            ] []\r\n        ]\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [\r\n                InputLabelProp.Shrink true\r\n                HTMLAttr.HtmlFor "bootstrap-input"\r\n                HTMLAttr.Class !!classes?bootstrapFormLabel\r\n            ] [ str "Bootstrap" ]\r\n            inputBase [\r\n                HTMLAttr.Id "bootstrap-input"\r\n                HTMLAttr.DefaultValue "react-bootstrap"\r\n                MaterialProp.Classes [\r\n                    ClassNames.Root !!classes?bootstrapRoot\r\n                    ClassNames.Input !!classes?bootstrapInput\r\n                ]\r\n            ]\r\n        ]\r\n        inputBase [\r\n            HTMLAttr.Class !!classes?margin\r\n            HTMLAttr.DefaultValue "Naked input"\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] customizedInputs\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Filled\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "filled-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "filled-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-email-input"\r\n                HTMLAttr.Label "Email"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "email"\r\n                HTMLAttr.AutoComplete "email"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-dense"\r\n                HTMLAttr.Label "Dense"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-textarea"\r\n                HTMLAttr.Label "Multiline placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                // HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.FilledInputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With filled TextField"\r\n                HTMLAttr.Id "filled-simple-start-adornment"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [ \r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-amount"\r\n                HTMLAttr.Value this.state.amount\r\n                HTMLAttr.Label "Amount"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handleAmountChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "$" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-weight"\r\n                HTMLAttr.Value this.state.weight\r\n                HTMLAttr.Label "Weight"\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                TextFieldProp.HelperText ("Weight" |> str |> U2.Case1 |> U3.Case1)\r\n                DOMAttr.OnChange this.handleWeightChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "filled-adornment-password"\r\n                HTMLAttr.Value this.state.password\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                TextFieldProp.Variant TextFieldVariant.Filled\r\n                DOMAttr.OnChange this.handlePasswordChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Filled\r\n                        ] [\r\n                            iconButton [\r\n                                HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                DOMAttr.OnClick this.handleClickShowPassword\r\n                            ] [\r\n                                icon [] [\r\n                                    str (if this.state.showPassword then "visibility_off"\r\n                                         else "visibility")\r\n                                ]\r\n                            ]\r\n                        ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.Input\r\n\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Input [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ]\r\n    ]\r\n\r\nlet inputTextFields (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        input [\r\n            HTMLAttr.DefaultValue "Hello world"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.Placeholder "Placeholder"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.Value "Disabled"\r\n            HTMLAttr.Class !!classes?input\r\n            HTMLAttr.Disabled true\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n        input [\r\n            HTMLAttr.DefaultValue "Error"\r\n            HTMLAttr.Class !!classes?input\r\n            MaterialProp.Error true\r\n            MaterialProp.InputProps [\r\n                HTMLAttr.Custom ("aria-label", "Description")\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] inputTextFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []'},function(e,n){e.exports='module Demos.TextFields.InputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("withoutLabel", [\r\n            CSSProp.MarginTop (theme.spacing.unit * 3)\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With normal TextField"\r\n                HTMLAttr.Id "simple-start-adornment"\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            formControl [\r\n                MaterialProp.FullWidth true\r\n                HTMLAttr.Class !!classes?margin\r\n            ] [\r\n                inputLabel [ HTMLAttr.HtmlFor "adornment-amount" ] [ str "Amount" ]\r\n                input [\r\n                    HTMLAttr.Id "adornment-amount"\r\n                    HTMLAttr.Value this.state.amount\r\n                    DOMAttr.OnChange this.handleAmountChange\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.Start ]\r\n                            [ str "$" ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ]\r\n            formControl [\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?withoutLabel, true\r\n                    !!classes?textField, true\r\n                ]\r\n                HTMLAttr.Custom("aria-describedby", "weight-helper-text")\r\n            ] [\r\n                input [\r\n                    HTMLAttr.Id "adornment-weight"\r\n                    HTMLAttr.Value this.state.weight\r\n                    DOMAttr.OnChange this.handleWeightChange\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.End ]\r\n                            [ str "Kg" ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                    MaterialProp.InputProps [ HTMLAttr.Custom ("aria-label", "Weight") ]\r\n                ]\r\n                formHelperText [ HTMLAttr.Id "weight-helper-text" ] [ str "Weight" ]\r\n            ]\r\n            formControl [\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n            ] [\r\n                inputLabel [ HTMLAttr.HtmlFor "adornment-password" ] [ str "Password" ]\r\n                input [\r\n                    HTMLAttr.Id "adornment-password"\r\n                    HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                    HTMLAttr.Value this.state.password\r\n                    DOMAttr.OnChange this.handlePasswordChange\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment\r\n                            [ InputAdornmentProp.Position InputAdornmentPosition.End ]\r\n                            [\r\n                                iconButton [\r\n                                    HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                    DOMAttr.OnClick this.handleClickShowPassword\r\n                                ] [\r\n                                    icon [] [\r\n                                        str (if this.state.showPassword then "visibility_off"\r\n                                             else "visibility")\r\n                                    ]\r\n                                ]\r\n                             ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ]\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Layout\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet layoutTextFields (props : IClassesProps) =\r\n    let classes = props?classes\r\n\r\n    div [ Class !!classes?container ] [\r\n        textField [\r\n            HTMLAttr.Label "None"\r\n            HTMLAttr.Id "margin-none"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n        ] []\r\n        textField [\r\n            HTMLAttr.Label "Dense"\r\n            HTMLAttr.Id "margin-dense"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n            MaterialProp.Margin FormControlMargin.Dense\r\n        ] []\r\n        textField [\r\n            HTMLAttr.Label "Normal"\r\n            HTMLAttr.Id "margin-normal"\r\n            HTMLAttr.DefaultValue "Default value"\r\n            HTMLAttr.Class !!classes?textField\r\n            TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n            MaterialProp.Margin FormControlMargin.Normal\r\n        ] []\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] layoutTextFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.Outlined\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "outlined-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "outlined-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-email-input"\r\n                HTMLAttr.Label "Email"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "email"\r\n                HTMLAttr.AutoComplete "email"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-dense"\r\n                HTMLAttr.Label "Dense"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-textarea"\r\n                HTMLAttr.Label "Multiline placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                // HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.OutlinedInputAdornments\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Root [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n        Styles.Custom ("textField", [\r\n            CSSProp.FlexBasis 200\r\n        ])\r\n    ]\r\n\r\nlet ranges = [\r\n    "0-20", "0 to 20"\r\n    "21-50", "21 to 50"\r\n    "51-100", "51 to 100"\r\n]\r\n\r\ntype InputAdornmentsProps = {\r\n    amount : string\r\n    password : string\r\n    weight : string\r\n    weightRange : string\r\n    showPassword : bool\r\n}\r\n\r\ntype InputAdornments(p) =\r\n    inherit Component<IClassesProps, InputAdornmentsProps>(p)\r\n    do\r\n        base.setInitState {\r\n            amount = ""\r\n            password = ""\r\n            weight = ""\r\n            weightRange = ""\r\n            showPassword = false\r\n        }\r\n    member private this.handleWeightChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weight = value })\r\n    member private this.handleWeightRangeChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with weightRange = value })\r\n    member private this.handleAmountChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with amount = value })\r\n    member private this.handlePasswordChange (e : FormEvent) =\r\n        let value = e.Value\r\n        this.setState (fun s _ -> { s with password = value })\r\n    \r\n    member private this.handleClickShowPassword _ =\r\n        this.setState (fun s _ -> { s with showPassword = not s.showPassword })\r\n    override this.render() =\r\n        let classes = this.props.classes\r\n\r\n        div [ Class !!classes?root ] [\r\n            textField [\r\n                HTMLAttr.Label "With outlined TextField"\r\n                HTMLAttr.Id "outlined-simple-start-adornment"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [ \r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                TextFieldProp.Select true\r\n                HTMLAttr.Label "With Select"\r\n                HTMLAttr.Value this.state.weightRange\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleWeightRangeChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] (ranges |> List.map (fun (k,l) -> menuItem [ Prop.Key k; HTMLAttr.Value k] [ str l ]))\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-amount"\r\n                HTMLAttr.Value this.state.amount\r\n                HTMLAttr.Label "Amount"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handleAmountChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.StartAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.Start\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "$" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-weight"\r\n                HTMLAttr.Value this.state.weight\r\n                HTMLAttr.Label "Weight"\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                TextFieldProp.HelperText ("Weight" |> str |> U2.Case1 |> U3.Case1)\r\n                DOMAttr.OnChange this.handleWeightChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [ str "Kg" ]\r\n                        |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "outlined-adornment-password"\r\n                HTMLAttr.Value this.state.password\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Type (if this.state.showPassword then "text" else "password")\r\n                TextFieldProp.Variant TextFieldVariant.Outlined\r\n                DOMAttr.OnChange this.handlePasswordChange\r\n                classList [\r\n                    !!classes?margin, true\r\n                    !!classes?textField, true\r\n                ]\r\n                ChildrenProp.InputProps [\r\n                    InputProp.EndAdornment (\r\n                        inputAdornment [\r\n                            InputAdornmentProp.Position InputAdornmentPosition.End\r\n                            InputAdornmentProp.Variant InputAdornmentVariant.Outlined\r\n                        ] [\r\n                            iconButton [\r\n                                HTMLAttr.Custom("aria-label", "Toggle password visibility")\r\n                                DOMAttr.OnClick this.handleClickShowPassword\r\n                            ] [\r\n                                icon [] [\r\n                                    str (if this.state.showPassword then "visibility_off"\r\n                                         else "visibility")\r\n                                ]\r\n                            ]\r\n                        ]\r\n                    |> U2.Case1 |> U3.Case1)\r\n                ]\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<InputAdornments,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n\r\n'},function(e,n){e.exports='module Demos.TextFields.TextField\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\nopen Fable.Import.React\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Container [\r\n            CSSProp.Display "flex"\r\n            CSSProp.FlexWrap "wrap"\r\n        ]\r\n        Styles.Custom ("textField", [\r\n            CSSProp.MarginLeft theme.spacing.unit\r\n            CSSProp.MarginRight theme.spacing.unit\r\n            CSSProp.Width 200\r\n        ])\r\n        Styles.Dense [\r\n            CSSProp.MarginTop 19\r\n        ]\r\n        Styles.Custom("menu", [\r\n            CSSProp.Width 200\r\n        ])\r\n    ]\r\n\r\nlet currencies = [\r\n    ("$", "USD")\r\n    ("€", "EUR")\r\n    ("฿", "BTC")\r\n    ("¥", "JPY")\r\n]\r\n\r\ntype TextFieldState = {\r\n    name : string\r\n    age : string\r\n    multiline : string\r\n    currency : string\r\n}\r\n\r\ntype TextFields (p) =\r\n    inherit React.Component<IClassesProps,TextFieldState>(p)\r\n    do\r\n        base.setInitState {\r\n            name = "Cat in the Hat"\r\n            age = ""\r\n            multiline = "Controlled"\r\n            currency = "EUR"\r\n        }\r\n    \r\n    member private this.handleNameChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with name = value })\r\n    \r\n    member private this.handleMultilineChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with multiline = value })\r\n\r\n    member private this.handleAgeChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with age = value })\r\n    \r\n    member private this.handleCurrencyChange (event : FormEvent) =\r\n        let value = event.Value\r\n        this.setState (fun s _ -> { s with currency = value })\r\n    \r\n    override this.render() =\r\n        form [\r\n            HTMLAttr.Class !!this.props.classes?container\r\n            HTMLAttr.NoValidate true\r\n            HTMLAttr.AutoComplete "off"\r\n        ] [\r\n            textField [\r\n                HTMLAttr.Id "standard-name"\r\n                HTMLAttr.Label "Name"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Value this.state.name\r\n                DOMAttr.OnChange this.handleNameChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-uncontrolled"\r\n                HTMLAttr.Label "Uncontrolled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "foo"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-required"\r\n                HTMLAttr.Label "Required"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Required true\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-error"\r\n                HTMLAttr.Label "Error"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                MaterialProp.Error true\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Disabled true\r\n                HTMLAttr.Id "standard-disabled"\r\n                HTMLAttr.Label "Disabled"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-password-input"\r\n                HTMLAttr.Label "Password"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "password"\r\n                HTMLAttr.AutoComplete "current-password"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-read-only-input"\r\n                HTMLAttr.Label "Read Only"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Hello World"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.InputProps [\r\n                    HTMLAttr.ReadOnly true\r\n                ]\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-dense"\r\n                HTMLAttr.Label "Dense"\r\n                classList [\r\n                    (!!this.props.classes?textField, true)\r\n                    (!!this.props.classes?dense, true)\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Dense\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-multiline-flexible"\r\n                HTMLAttr.Label "Multiline"\r\n                MaterialProp.Multiline true\r\n                MaterialProp.RowsMax 4\r\n                HTMLAttr.Value this.state.multiline\r\n                DOMAttr.OnChange this.handleMultilineChange\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-multiline-static"\r\n                HTMLAttr.Label "Multiline"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Rows 4\r\n                MaterialProp.Multiline true\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-helperText"\r\n                HTMLAttr.Label "Helper text"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Default Value"\r\n                TextFieldProp.HelperText ("Some important text" |> str |> U2.Case1 |> U3.Case1)\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-with-placeholder"\r\n                HTMLAttr.Label "With placeholder"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-textarea"\r\n                HTMLAttr.Label "With placeholder multiline"\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Multiline true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-number"\r\n                HTMLAttr.Label "Number"\r\n                HTMLAttr.Value this.state.age\r\n                HTMLAttr.Type "number"\r\n                DOMAttr.OnChange this.handleAgeChange\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-search"\r\n                HTMLAttr.Label "Search field"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-select-currency"\r\n                HTMLAttr.Label "Select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> menuItem [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "standard-select-currency-native"\r\n                HTMLAttr.Label "Native select"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.Type "search"\r\n                HTMLAttr.Value this.state.currency\r\n                DOMAttr.OnChange this.handleCurrencyChange\r\n                TextFieldProp.HelperText ("Please select your currency" |> str |> U2.Case1 |> U3.Case1)\r\n                TextFieldProp.Select true\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n                ChildrenProp.SelectProps [\r\n                    SelectProp.Native true\r\n                    ChildrenProp.MenuProps [\r\n                        HTMLAttr.Class !!this.props.classes?menu\r\n                    ]\r\n                ]\r\n            ] (currencies |> List.map (fun (k,v) -> option [ Prop.Key v; HTMLAttr.Value v ] [ str k ]))\r\n            textField [\r\n                HTMLAttr.Id "standard-full-width"\r\n                HTMLAttr.Label "Label"\r\n                Style [ CSSProp.Margin 8 ]\r\n                HTMLAttr.Placeholder "Placeholder"\r\n                MaterialProp.FullWidth true\r\n                TextFieldProp.HelperText ("Full width!" |> str |> U2.Case1 |> U3.Case1)\r\n                ChildrenProp.InputLabelProps [\r\n                    InputLabelProp.Shrink true\r\n                ]\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n            textField [\r\n                HTMLAttr.Id "standard-bare"\r\n                HTMLAttr.Class !!this.props.classes?textField\r\n                HTMLAttr.DefaultValue "Bare"\r\n                MaterialProp.Margin FormControlMargin.Normal\r\n            ] []\r\n        ]\r\n\r\nlet textFields props =\r\n    ofType<TextFields,_,_> props []\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] textFields\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []\r\n'},function(e,n){e.exports='module Demos.TextFields.WithIcon\r\n\r\nopen Fable.Core\r\nopen Fable.Helpers.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.Helpers.React.Props\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI.Themes\r\n\r\nlet styles (theme : ITheme) : IStyles list =\r\n    [\r\n        Styles.Custom("margin", [\r\n            CSSProp.Margin theme.spacing.unit\r\n        ])\r\n    ]\r\n\r\nlet inputWithIcon (props : IClassesProps) =\r\n    let classes = props.classes\r\n\r\n    div [] [\r\n        formControl [ Class !!classes?margin ] [\r\n            inputLabel [ HTMLAttr.HtmlFor "input-with-icon-adornment" ] [\r\n                str "With a start adornment"\r\n            ]\r\n            input [ \r\n                HTMLAttr.Id "input-with-icon-adornment"\r\n                InputProp.StartAdornment (\r\n                    inputAdornment [ InputAdornmentProp.Position InputAdornmentPosition.Start ] [\r\n                        icon [] [ str "account_circle" ]\r\n                    ] |> U2.Case1 |> U3.Case1\r\n                )\r\n            ]\r\n        ]\r\n        textField [\r\n            HTMLAttr.Class !!classes?margin\r\n            HTMLAttr.Id "input-with-icon-textfield"\r\n            HTMLAttr.Label "TextField"\r\n            ChildrenProp.InputProps [\r\n                InputProp.StartAdornment (\r\n                    inputAdornment [ InputAdornmentProp.Position InputAdornmentPosition.Start ] [\r\n                        icon [] [ str "account_circle" ]\r\n                    ] |> U2.Case1 |> U3.Case1\r\n                )\r\n            ]\r\n        ] []\r\n        div [ Class !!classes?margin ] [\r\n            grid [\r\n                GridProp.Container true\r\n                GridProp.Spacing GridSpacing.``8``\r\n                GridProp.AlignItems GridAlignItems.FlexEnd\r\n            ] [\r\n                grid [ GridProp.Item true ] [\r\n                    icon [] [ str "account_circle" ]\r\n                ]\r\n                grid [ GridProp.Item true ] [\r\n                    textField [\r\n                        HTMLAttr.Id "input-with-icon-grid"\r\n                        HTMLAttr.Label "With a grid"\r\n                    ] []\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nlet textFieldsWithStyles = withStyles (StyleType.Func styles) [] inputWithIcon\r\n\r\nlet view () =\r\n    from textFieldsWithStyles createEmpty<IClassesProps> []'},function(e,n){e.exports='// <auto-generated>\n//     Generated by the FSharp WriteCodeFragment class.\n// </auto-generated>\nnamespace FSharp\n\nopen System\nopen System.Reflection\n\r\n\r\n[<assembly: System.Reflection.AssemblyCompanyAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")>]\r\n[<assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")>]\r\n[<assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")>]\r\n[<assembly: System.Reflection.AssemblyProductAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyTitleAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")>]\r\ndo()\r\n'},function(e,n){e.exports='// <auto-generated>\n//     Generated by the FSharp WriteCodeFragment class.\n// </auto-generated>\nnamespace FSharp\n\nopen System\nopen System.Reflection\n\r\n\r\n[<assembly: System.Reflection.AssemblyCompanyAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyConfigurationAttribute("Release")>]\r\n[<assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")>]\r\n[<assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")>]\r\n[<assembly: System.Reflection.AssemblyProductAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyTitleAttribute("Fable.MaterialUI.Docs")>]\r\n[<assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")>]\r\ndo()\r\n'},function(e,n,t){var r={"./app-bar.md":540,"./avatar.md":541,"./backdrop.md":542,"./badge.md":543,"./bottom-navigation-action.md":544,"./bottom-navigation.md":545,"./button-base.md":546,"./button.md":547,"./card-action-area.md":548,"./card-actions.md":549,"./card-content.md":550,"./card-header.md":551,"./card-media.md":552,"./card.md":553,"./checkbox.md":554,"./chip.md":555,"./circular-progress.md":556,"./click-away-listener.md":557,"./collapse.md":558,"./css-baseline.md":559,"./dialog-actions.md":560,"./dialog-content-text.md":561,"./dialog-content.md":562,"./dialog-title.md":563,"./dialog.md":564,"./divider.md":565,"./drawer.md":566,"./expansion-panel-actions.md":567,"./expansion-panel-details.md":568,"./expansion-panel-summary.md":569,"./expansion-panel.md":570,"./fab.md":571,"./fade.md":572,"./filled-input.md":573,"./form-control-label.md":574,"./form-control.md":575,"./form-group.md":576,"./form-helper-text.md":577,"./form-label.md":578,"./grid-list-tile-bar.md":579,"./grid-list-tile.md":580,"./grid-list.md":581,"./grid.md":582,"./grow.md":583,"./hidden.md":584,"./icon-button.md":585,"./icon.md":586,"./input-adornment.md":587,"./input-base.md":588,"./input-label.md":589,"./input.md":590,"./linear-progress.md":591,"./list-item-avatar.md":592,"./list-item-icon.md":593,"./list-item-secondary-action.md":594,"./list-item-text.md":595,"./list-item.md":596,"./list-subheader.md":597,"./list.md":598,"./menu-item.md":599,"./menu-list.md":600,"./menu.md":601,"./mobile-stepper.md":602,"./modal.md":603,"./mui-theme-provider.md":604,"./native-select.md":605,"./outlined-input.md":606,"./paper.md":607,"./popover.md":608,"./popper.md":609,"./portal.md":610,"./radio-group.md":611,"./radio.md":612,"./root-ref.md":613,"./select.md":614,"./slide.md":615,"./snackbar-content.md":616,"./snackbar.md":617,"./step-button.md":618,"./step-connector.md":619,"./step-content.md":620,"./step-icon.md":621,"./step-label.md":622,"./step.md":623,"./stepper.md":624,"./svg-icon.md":625,"./swipeable-drawer.md":626,"./switch.md":627,"./tab.md":628,"./table-body.md":629,"./table-cell.md":630,"./table-footer.md":631,"./table-head.md":632,"./table-pagination.md":633,"./table-row.md":634,"./table-sort-label.md":635,"./table.md":636,"./tabs.md":637,"./text-field.md":638,"./toolbar.md":639,"./tooltip.md":640,"./touch-ripple.md":641,"./typography.md":642,"./zoom.md":643};function a(e){var n=s(e);return t(n)}function s(e){var n=r[e];if(n+1)return n;var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}a.keys=function(){return Object.keys(r)},a.resolve=s,(e.exports=a).id=539},function(e,n){e.exports='# AppBar\r\n\r\n<p class="description">The API documentation of the AppBar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.appBar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list |   | Override or extend the styles applied to the component. \x3c!--See [CSS API](#css-api) below for more details.--\x3e |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Primary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">AppBarProp.Position</span> | <span class="prop-type">type&nbsp;AppBarPosition&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Fixed<br>&nbsp;&nbsp;&#124;&nbsp;Absolute<br>&nbsp;&nbsp;&#124;&nbsp;Sticky<br>&nbsp;&nbsp;&#124;&nbsp;Static<br>&nbsp;&nbsp;&#124;&nbsp;Relative<br></span> | <span class="prop-default">AppBarPosition.Fixed</span> | The positioning type. The behavior of the different options is described [here](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning). Note: `Sticky` is not universally supported and will fall back to `Static` when unavailable. |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper/)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.PositionFixed</span> | Styles applied to the root element if `position = Fixed`.\r\n| <span class="prop-name">ClassNames.PositionAbsolute</span> | Styles applied to the root element if `position = Absolute`.\r\n| <span class="prop-name">ClassNames.PositionSticky</span> | Styles applied to the root element if `position = Sticky`.\r\n| <span class="prop-name">ClassNames.PositionStatic</span> | Styles applied to the root element if `position = Static`.\r\n| <span class="prop-name">ClassNames.PositionRelative</span> | Styles applied to the root element if `position = Relative`.\r\n| <span class="prop-name">ClassNames.ColorDefault</span> | Styles applied to the root element if `color = Default`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color = Primary`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color = Secondary`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/AppBar/AppBar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiAppBar`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\r\n## Demos\r\n\r\n- [App Bar](#/demos/app-bar)\r\n\r\n'},function(e,n){e.exports='# Avatar\r\n\r\n<p class="description">The API documentation of the Avatar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.avatar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component. See [CSS API](#css-api) below for more details. |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">AvatarProp.ImgProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `img` element if the component is used to display an image. |\r\n| <span class="prop-name">HTMLAttr.Alt</span> | <span class="prop-type">string</span> |   | Used in combination with `src` or `srcSet` to provide an alt attribute for the rendered `img` element. |\r\n| <span class="prop-name">HTMLAttr.Sizes</span> | <span class="prop-type">string</span> |   | The `sizes` attribute for the `img` element. |\r\n| <span class="prop-name">HTMLAttr.Src</span> | <span class="prop-type">string</span> |   | The `src` attribute for the `img` element. |\r\n| <span class="prop-name">HTMLAttr.SrcSet</span> | <span class="prop-type">string</span> |   | The `srcSet` attribute for the `img` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorDefault</span> | Styles applied to the root element if `Color = Default`.\r\n| <span class="prop-name">ClassNames.Img</span> | Styles applied to the img element if either `Src` or `SrcSet` is defined.\r\n\r\nHave a look at [overriding with classes](/customization/overrides/#overriding-with-classes) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Avatar/Avatar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](/customization/themes/#customizing-all-instances-of-a-component-type),\r\nyou need to use the following style sheet name: `MuiAvatar`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Avatars](/demos/avatars/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Backdrop\r\n\r\n<p class="description">The API documentation of the Backdrop React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.backdrop (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span>  |   | Override or extend the styles applied to the component. See [CSS API](#css-api) below for more details. |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span>  |   | If `true`, the backdrop is open. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span>  |   | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an list of `TransitionDurationProp`. |\r\n| <span class="prop-name">BackdropProp.Invisible</span> | <span class="prop-type">bool</span>  | <span class="prop-default">false</span> | If `true`, the backdrop is invisible. It can be used when rendering a popover or a custom select component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Invisible</span> | Styles applied to the root element if `Invisible = true`.\r\n\r\nHave a look at [overriding with classes](/customization/overrides/#overriding-with-classes) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Backdrop/Backdrop.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](/customization/themes/#customizing-all-instances-of-a-component-type),\r\nyou need to use the following style sheet name: `MuiBackdrop`.\r\n\r\n'},function(e,n){e.exports='# Badge\r\n\r\n<p class="description">The API documentation of the Badge React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.badge (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"span"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name required">BadgeProp.BadgeContent *</span> | <span class="prop-type">ReactNode</span> |   | The content rendered within the badge. |\r\n| <span class="prop-name">BadgeProp.Color</span> | <span class="prop-type">type&nbsp;BadgeColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br>&nbsp;&nbsp;&#124;&nbsp;Error<br></span> | <span class="prop-default">BadgeColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">BadgeProp.Invisible</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the badge will be invisible. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Badge</span> | Styles applied to the badge `span` element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.ColorError</span> | Styles applied to the root element if `color="error"`.\r\n| <span class="prop-name">ClassNames.Invisible</span> | Styles applied to the badge `span` element if `invisible={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Badge/Badge.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiBadge`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Badges](/demos/badges/)--\x3e\r\n\r\n'},function(e,n){e.exports='# BottomNavigationAction\r\n\r\n<p class="description">The API documentation of the BottomNavigationAction React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.bottomNavigationAction (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | The icon element. |\r\n| <span class="prop-name">MaterialProp.Label</span> | <span class="prop-type">ReactNode</span> |   | The label element. |\r\n| <span class="prop-name">BottomNavigationActionProp.ShowLabel</span> | <span class="prop-type">bool</span> |   | If `true`, the `BottomNavigationAction` will show its label. By default, only the selected `BottomNavigationAction` inside `BottomNavigation` will show its label. |\r\n| <span class="prop-name">BottomNavigationActionProp.Value</span> | <span class="prop-type">obj</span> |   | You can provide your own value. Otherwise, we fallback to the child position index. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Selected</span> | Styles applied to the root element if selected.\r\n| <span class="prop-name">ClassNames.IconOnly</span> | Styles applied to the root element if `showLabel={false}` and not selected.\r\n| <span class="prop-name">ClassNames.Wrapper</span> | Styles applied to the span element that wraps the icon and label.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the label\'s span element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/BottomNavigationAction/BottomNavigationAction.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiBottomNavigationAction`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Bottom Navigation](/demos/bottom-navigation/)--\x3e\r\n\r\n'},function(e,n){e.exports='# BottomNavigation\r\n\r\n<p class="description">The API documentation of the BottomNavigation React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.bottomNavigation (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">BottomNavigationProp.OnChange</span> | <span class="prop-type">obj->obj->unit</span> |   | Callback fired when the value changes.<br><br>**Signature:**<br>`(event:obj)->(value:obj)->unit`<br>*event:* The event source of the callback<br>*value:* We default to the index of the child |\r\n| <span class="prop-name">BottomNavigationProp.ShowLabels</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, all `BottomNavigationAction`s will show their labels. By default, only the selected `BottomNavigationAction` will show its label. |\r\n| <span class="prop-name">BottomNavigationProp.Value</span> | <span class="prop-type">obj</span> |   | The value of the currently selected `BottomNavigationAction`. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/BottomNavigation/BottomNavigation.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiBottomNavigation`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Bottom Navigation](/demos/bottom-navigation/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ButtonBase\r\n\r\n<p class="description">The API documentation of the ButtonBase React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.buttonBase (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n`ButtonBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating a button.\r\nIt contains a load of style reset and some focus/ripple logic.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"button"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the base button will be disabled. |\r\n| <span class="prop-name">ButtonBaseProp.Action</span> | <span class="prop-type">IButtonBaseActions->unit<br><br>type&nbsp;IButtonBaseActions&nbsp;=<br>&nbsp;&nbsp;abstract&nbsp;focusVisible:&nbsp;unit&nbsp;&#8209;&gt;&nbsp;bool</span> |   | Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It currently only supports `focusVisible()` action.<br><br>**Signature:**<br>`(actions:IButtonBaseActions)->unit`<br>*actions:* This object contains all possible actions that can be triggered programmatically. |\r\n| <span class="prop-name">ButtonBaseProp.ButtonRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native button component. |\r\n| <span class="prop-name">ButtonBaseProp.CenterRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the ripples will be centered. They won\'t start at the cursor interaction position. |\r\n| <span class="prop-name">ButtonBaseProp.DisableTouchRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the touch ripple effect will be disabled. |\r\n| <span class="prop-name">ButtonBaseProp.FocusRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the base button will have a keyboard focus ripple. `disableRipple` must also be `false`. |\r\n| <span class="prop-name">ButtonBaseProp.FocusVisibleClassName</span> | <span class="prop-type">string</span> |   | This property can help a person know which element has the keyboard focus. The class name will be applied when the element gain the focus through a keyboard interaction. It\'s a polyfill for the [CSS :focus-visible feature](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo). The rational for using this feature [is explain here](https://github.com/WICG/focus-visible/blob/master/explainer.md). |\r\n| <span class="prop-name">ButtonBaseProp.OnFocusVisible</span> | <span class="prop-type">FocusEvent->unit</span> |   | Callback fired when the component is focused with a keyboard. We trigger a `onFocus` callback too. |\r\n| <span class="prop-name">ButtonBaseProp.Type</span> | <span class="prop-type">type&nbsp;ButtonBaseType&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Button<br>&nbsp;&nbsp;&#124;&nbsp;Submit<br>&nbsp;&nbsp;&#124;&nbsp;Reset<br></span> | <span class="prop-default">ButtonBaseType.Button</span> | Used to control the button\'s purpose. This property passes the value to the `type` attribute of the native button component. Valid property values include `button`, `submit`, and `reset`. |\r\n| <span class="prop-name">ChildrenProp.TouchRippleProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `TouchRipple` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.FocusVisible</span> | Styles applied to the root element if keyboard focused.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ButtonBase/ButtonBase.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiButtonBase`.\r\n\r\n## Demos\r\n\r\n- [Buttons](#/demos/buttons/)\r\n\r\n'},function(e,n){e.exports='# Button\r\n\r\n<p class="description">The API documentation of the Button React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.button (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"button"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will take up the full width of its container. |\r\n| <span class="prop-name">HTMLAttr.Href</span> | <span class="prop-type">string</span> |   | The URL to link to when the button is clicked. If defined, an `a` element will be used as the root node. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will be disabled. |\r\n| <span class="prop-name">ButtonProp.DisableFocusRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the  keyboard focus ripple will be disabled. `MaterialProp.DisableRipple` must also be true. |\r\n| <span class="prop-name">ButtonProp.Mini</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, and `Variant` is `Fab`, will use mini floating action button styling. |\r\n| <span class="prop-name">ButtonProp.Size</span> | <span class="prop-type">type&nbsp;ButtonSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Small<br>&nbsp;&nbsp;&#124;&nbsp;Medium<br>&nbsp;&nbsp;&#124;&nbsp;Large<br></span> | <span class="prop-default">ButtonSize.Medium</span> | The size of the button. `Small` is equivalent to the dense button styling. |\r\n| <span class="prop-name">ButtonProp.Variant</span> | <span class="prop-type">type&nbsp;ButtonVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Text<br>&nbsp;&nbsp;&#124;&nbsp;Flat<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Contained<br>&nbsp;&nbsp;&#124;&nbsp;Raised<br>&nbsp;&nbsp;&#124;&nbsp;Fab<br>&nbsp;&nbsp;&#124;&nbsp;ExtendedFab<br></span> | <span class="prop-default">ButtonVariant.Text</span> | The variant to use. __WARNING__: `Flat` and `Raised` are deprecated. Instead use `Text` and `Contained` respectively. `Fab` and `ExtendedFab` are deprecated. Instead use component [Fab](#/api/fab) |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the span element that wraps the children.\r\n| <span class="prop-name">ClassNames.Text</span> | Styles applied to the root element if `variant="text"`.\r\n| <span class="prop-name">ClassNames.TextPrimary</span> | Styles applied to the root element if `variant="text"` and `color="primary"`.\r\n| <span class="prop-name">ClassNames.TextSecondary</span> | Styles applied to the root element if `variant="text"` and `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Flat</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.FlatPrimary</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.FlatSecondary</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.Outlined</span> | Styles applied to the root element if `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.OutlinedPrimary</span> | Styles applied to the root element if `variant="outlined"` and `color="primary"`.\r\n| <span class="prop-name">ClassNames.OutlinedSecondary</span> | Styles applied to the root element if `variant="outlined"` and `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Contained</span> | Styles applied to the root element if `variant="[contained \\| fab]"`.\r\n| <span class="prop-name">ClassNames.ContainedPrimary</span> | Styles applied to the root element if `variant="[contained \\| fab]"` and `color="primary"`.\r\n| <span class="prop-name">ClassNames.ContainedSecondary</span> | Styles applied to the root element if `variant="[contained \\| fab]"` and `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Raised</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.RaisedPrimary</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.RaisedSecondary</span> | Styles applied to the root element for backwards compatibility with legacy variant naming.\r\n| <span class="prop-name">ClassNames.Fab</span> | Styles applied to the root element if `variant="[fab \\| extendedFab]"`.\r\n| <span class="prop-name">ClassNames.ExtendedFab</span> | Styles applied to the root element if `variant="extendedFab"`.\r\n| <span class="prop-name">ClassNames.FocusVisible</span> | Styles applied to the ButtonBase root element if the button is keyboard focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.ColorInherit</span> | Styles applied to the root element if `color="inherit"`.\r\n| <span class="prop-name">ClassNames.Mini</span> | Styles applied to the root element if `size="mini"` & `variant="[fab \\| extendedFab]"`.\r\n| <span class="prop-name">ClassNames.SizeSmall</span> | Styles applied to the root element if `size="small"`.\r\n| <span class="prop-name">ClassNames.SizeLarge</span> | Styles applied to the root element if `size="large"`.\r\n| <span class="prop-name">ClassNames.FullWidth</span> | Styles applied to the root element if `fullWidth={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Button/Button.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiButton`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Buttons](#/demos/buttons/)\r\n\r\n'},function(e,n){e.exports='# CardActionArea\r\n\r\n<p class="description">The API documentation of the CardActionArea React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cardActionArea (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.FocusVisible</span> | Styles applied to the ButtonBase root element if the action area is keyboard focused.\r\n| <span class="prop-name">ClassNames.FocusHighlight</span> | Styles applied to the overlay that covers the action area when it is keyboard focused.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CardActionArea/CardActionArea.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCardActionArea`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CardActions\r\n\r\n<p class="description">The API documentation of the CardActions React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cardActions (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">CardActionsProps.DisableActionSpacing</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the card actions do not have additional margin. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Action</span> | Styles applied to the children.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CardActions/CardActions.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCardActions`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CardContent\r\n\r\n<p class="description">The API documentation of the CardContent React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cardContent (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CardContent/CardContent.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCardContent`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CardHeader\r\n\r\n<p class="description">The API documentation of the CardHeader React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cardHeader (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableTypography</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the children won\'t be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the `title` text, and optional `subheader` text with the Typography component. |\r\n| <span class="prop-name">CardHeaderProp.Action</span> | <span class="prop-type">ReactNode</span> |   | The action to display in the card header. |\r\n| <span class="prop-name">CardHeaderProp.Avatar</span> | <span class="prop-type">ReactNode</span> |   | The Avatar for the Card Header. |\r\n| <span class="prop-name">CardHeaderProp.Subheader</span> | <span class="prop-type">ReactNode</span> |   | The content of the component. |\r\n| <span class="prop-name">CardHeaderProp.SubheaderTypographyProps</span> | <span class="prop-type">IHTMLProp list</span> |   | These props will be forwarded to the subheader (as long as disableTypography is not `true`). |\r\n| <span class="prop-name">CardHeaderProp.Title</span> | <span class="prop-type">ReactNode</span> |   | The content of the Card Title. |\r\n| <span class="prop-name">CardHeaderProp.TitleTypographyProps</span> | <span class="prop-type">IHTMLProp list</span> |   | These props will be forwarded to the title (as long as disableTypography is not `true`). |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Avatar</span> | Styles applied to the avatar element.\r\n| <span class="prop-name">ClassNames.Action</span> | Styles applied to the action element.\r\n| <span class="prop-name">ClassNames.Content</span> | Styles applied to the content wrapper element.\r\n| <span class="prop-name">ClassNames.Title</span> | Styles applied to the title Typography element.\r\n| <span class="prop-name">ClassNames.Subheader</span> | Styles applied to the subheader Typography element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CardHeader/CardHeader.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCardHeader`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CardMedia\r\n\r\n<p class="description">The API documentation of the CardMedia React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cardMedia (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | Component for rendering image. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">HTMLAttr.Src</span> | <span class="prop-type">string</span> |   | An alias for `image` property. Available only with media components. Media components: `video`, `audio`, `picture`, `iframe`, `img`. |\r\n| <span class="prop-name">CardMediaProp.Image</span> | <span class="prop-type">string</span> |   | Image to be displayed as a background image. Either `image` or `src` prop must be specified. Note that caller must specify height otherwise the image will not be visible. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Media</span> | Styles applied to the root element if `component="video, audio, picture, iframe, or img"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CardMedia/CardMedia.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCardMedia`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Card\r\n\r\n<p class="description">The API documentation of the Card React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.card (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">CardProp.Raised</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the card will use raised styling. |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Card/Card.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCard`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Checkbox\r\n\r\n<p class="description">The API documentation of the Checkbox React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.checkbox (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Secondary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.CheckedIcon</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">&lt;CheckBoxIcon /></span> | The icon to display when the component is checked. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">&lt;CheckBoxOutlineBlankIcon /></span> | The icon to display when the component is unchecked. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Checked</span> | <span class="prop-type">bool</span> |   | If `true`, the component is checked. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the switch will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | The input component property `type`. |\r\n| <span class="prop-name">HTMLAttr.Value</span> | <span class="prop-type">string</span> |   | The value of the component. |\r\n| <span class="prop-name">CheckBoxProp.Indeterminate</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a `data-indeterminate` attribute on the input. |\r\n| <span class="prop-name">CheckBoxProp.IndeterminateIcon</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">&lt;IndeterminateCheckBoxIcon /></span> | The icon to display when the component is indeterminate. |\r\n| <span class="prop-name">SelectionControlProp.OnChange</span> | <span class="prop-type">FormEvent->bool->unit</span> |   | Callback fired when the state is changed.<br><br>**Signature:**<br>`(event: FormEvent)->(checked: boolean)->unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.checked`.<br>*checked:* The `checked` value of the switch |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Checked</span> | Styles applied to the root element if `checked={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Indeterminate</span> | Styles applied to the root element if `indeterminate={true}`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Checkbox/Checkbox.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCheckbox`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Chip\r\n\r\n<p class="description">The API documentation of the Chip React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.chip (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\nChips represent complex entities in small blocks, such as a contact.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | Icon element. |\r\n| <span class="prop-name">MaterialProp.Label</span> | <span class="prop-type">ReactNode</span> |   | The content of the label. |\r\n| <span class="prop-name">ChipProp.Avatar</span> | <span class="prop-type">ReactElement</span> |   | Avatar element. |\r\n| <span class="prop-name">ChipProp.Clickable</span> | <span class="prop-type">bool</span> |   | If true, the chip will appear clickable, and will raise when pressed, even if the onClick property is not defined. If false, the chip will not be clickable, even if onClick peoperty is defined. This can be used, for example, along with the component property to indicate an anchor Chip is clickable. |\r\n| <span class="prop-name">ChipProp.DeleteIcon</span> | <span class="prop-type">ReactElement</span> |   | Override the default delete icon element. Shown only if `onDelete` is set. |\r\n| <span class="prop-name">ChipProp.OnDelete</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback function fired when the delete icon is clicked. If set, the delete icon will be shown. |\r\n| <span class="prop-name">ChipProp.Variant</span> | <span class="prop-type">type&nbsp;ChipVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br></span> | <span class="prop-default">ChipVariant.Default</span> | The variant to use. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Clickable</span> | Styles applied to the root element if `onClick` is defined or `clickable={true}`.\r\n| <span class="prop-name">ClassNames.ClickableColorPrimary</span> | \r\n| <span class="prop-name">ClassNames.ClickableColorSecondary</span> | \r\n| <span class="prop-name">ClassNames.Deletable</span> | Styles applied to the root element if `onDelete` is defined.\r\n| <span class="prop-name">ClassNames.DeletableColorPrimary</span> | Styles applied to the root element if `onDelete` and `color="primary"` is defined.\r\n| <span class="prop-name">ClassNames.DeletableColorSecondary</span> | Styles applied to the root element if `onDelete` and `color="secondary"` is defined.\r\n| <span class="prop-name">ClassNames.Outlined</span> | Styles applied to the root element if `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.OutlinedPrimary</span> | Styles applied to the root element if `variant="outlined"` and `color="primary"`.\r\n| <span class="prop-name">ClassNames.OutlinedSecondary</span> | Styles applied to the root element if `variant="outlined"` and `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Avatar</span> | Styles applied to the `avatar` element.\r\n| <span class="prop-name">ClassNames.AvatarColorPrimary</span> | Styles applied to the `avatar` element if `color="primary"`\r\n| <span class="prop-name">ClassNames.AvatarColorSecondary</span> | Styles applied to the `avatar` element if `color="secondary"`\r\n| <span class="prop-name">ClassNames.AvatarChildren</span> | Styles applied to the `avatar` elements children.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles applied to the `icon` element.\r\n| <span class="prop-name">ClassNames.IconColorPrimary</span> | Styles applied to the `icon` element if `color="primary"`\r\n| <span class="prop-name">ClassNames.IconColorSecondary</span> | Styles applied to the `icon` element if `color="secondary"`\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the label `span` element`.\r\n| <span class="prop-name">ClassNames.DeleteIcon</span> | Styles applied to the `deleteIcon` element.\r\n| <span class="prop-name">ClassNames.DeleteIconColorPrimary</span> | Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`.\r\n| <span class="prop-name">ClassNames.DeleteIconColorSecondary</span> | Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`.\r\n| <span class="prop-name">ClassNames.DeleteIconOutlinedColorPrimary</span> | Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.DeleteIconOutlinedColorSecondary</span> | Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Chip/Chip.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiChip`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Chips](/demos/chips/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CircularProgress\r\n\r\n<p class="description">The API documentation of the CircularProgress React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.circularProgress (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n## ARIA\r\n\r\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Primary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">CircularProgresProp.Size</span> | <span class="prop-type">type&nbsp;CircularProgressSize&nbsp;=&nbsp;U2&lt;int,&nbsp;string&gt;</span> | <span class="prop-default">40</span> | The size of the circle. |\r\n| <span class="prop-name">CircularProgresProp.Thickness</span> | <span class="prop-type">float</span> | <span class="prop-default">3.6</span> | The thickness of the circle. |\r\n| <span class="prop-name">CircularProgresProp.Value</span> | <span class="prop-type">int</span> | <span class="prop-default">0</span> | The value of the progress indicator for the determinate and static variants. Value between 0 and 100. |\r\n| <span class="prop-name">CircularProgresProp.Variant</span> | <span class="prop-type">type&nbsp;CircularProgressVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Determinate<br>&nbsp;&nbsp;&#124;&nbsp;Indeterminate<br>&nbsp;&nbsp;&#124;&nbsp;Static<br></span> | <span class="prop-default">CircularProgressVariant.Indeterminate</span> | The variant to use. Use indeterminate when there is no progress value. |\r\n| <span class="prop-name">CircularProgresProp.DisableShrink</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the shrink animation is disabled. This only works if variant is `indeterminate`. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Static</span> | Styles applied to the root element if `variant="static"`.\r\n| <span class="prop-name">ClassNames.Indeterminate</span> | Styles applied to the root element if `variant="indeterminate"`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Svg</span> | Styles applied to the `svg` element.\r\n| <span class="prop-name">ClassNames.Circle</span> | Styles applied to the `circle` svg path.\r\n| <span class="prop-name">ClassNames.CircleStatic</span> | Styles applied to the `circle` svg path if `variant="static"`.\r\n| <span class="prop-name">ClassNames.CircleIndeterminate</span> | Styles applied to the `circle` svg path if `variant="indeterminate"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/CircularProgress/CircularProgress.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCircularProgress`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Progress](/demos/progress/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ClickAwayListener\r\n\r\n<p class="description">The API documentation of the ClickAwayListener React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.clickAwayListener (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nListen for click events that occur somewhere in the document, outside of the element itself.\r\nFor instance, if you need to hide a menu when people click anywhere else on your page.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">ClickAwayListenerProp.MouseEvent</span> | <span class="prop-type">type&nbsp;[&lt;Erase&gt;]&nbsp;ClickAwayListenerMouseEvent&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Event&nbsp;of&nbsp;MouseEvent<br>&nbsp;&nbsp;&#124;&nbsp;False<br><br>type&nbsp;MouseEvent&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;OnClick<br>&nbsp;&nbsp;&#124;&nbsp;OnMouseDown<br>&nbsp;&nbsp;&#124;&nbsp;OnMouseUp<br></span> | <span class="prop-default">MouseEvent.OnMouseUp</span> | The mouse event to listen to. You can disable the listener by providing `false`. |\r\n| <span class="prop-name required">ClickAwayListenerProp.OnClickAway *</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when a "click away" event is detected. |\r\n| <span class="prop-name">ClickAwayListenerProp.TouchEvent</span> | <span class="prop-type">type&nbsp;[&lt;Erase&gt;]&nbsp;ClickAwayListenerTouchEvent&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Event&nbsp;of&nbsp;TouchEvent<br>&nbsp;&nbsp;&#124;&nbsp;False<br><br>type&nbsp;TouchEvent&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;OnTouchStart<br>&nbsp;&nbsp;&#124;&nbsp;OnTouchEnd<br></span> | <span class="prop-default">TouchEvent.OnTouchEnd</span> | The touch event to listen to. You can disable the listener by providing `false`. |\r\n\r\nAny other properties supplied will be spread to the root element ([EventListener](https://github.com/oliviertassinari/react-event-listener/)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [EventListener](https://github.com/oliviertassinari/react-event-listener/) component, from react-event-listener, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\x3c!--- [Click Away Listener](/utils/click-away-listener/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Collapse\r\n\r\n<p class="description">The API documentation of the Collapse React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.collapse (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe Collapse transition is used by the\r\n[Vertical Stepper](/demos/steppers/#vertical-stepper) StepContent component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.In</span> | <span class="prop-type">bool</span> |   | If `true`, the component will transition in. |\r\n| <span class="prop-name">CollapseProp.CollapsedHeight</span> | <span class="prop-type">string</span> | <span class="prop-default">"0px"</span> | The height of the container when collapsed. |\r\n| <span class="prop-name">CollapseProp.Timeout</span> | <span class="prop-type">U3&lt;float,&nbsp;TransitionDuration&nbsp;list,&nbsp;AutoEnum&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br><br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">duration.standard</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.<br>Set to `Auto` to automatically calculate transition time based on height. |\r\n\r\nAny other properties supplied will be spread to the root element ([Transition](https://reactcommunity.org/react-transition-group/#Transition)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Container</span> | Styles applied to the container element.\r\n| <span class="prop-name">ClassNames.Entered</span> | Styles applied to the container element when the transition has entered.\r\n| <span class="prop-name">ClassNames.Wrapper</span> | Styles applied to the outer wrapper element.\r\n| <span class="prop-name">ClassNames.WrapperInner</span> | Styles applied to the inner wrapper element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Collapse/Collapse.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiCollapse`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Transition](https://reactcommunity.org/react-transition-group/#Transition) component, from react-transition-group, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\x3c!--- [Transitions](/utils/transitions/)--\x3e\r\n\r\n'},function(e,n){e.exports='# CssBaseline\r\n\r\n<p class="description">The API documentation of the CssBaseline React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.cssBaseline (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\nKickstart an elegant, consistent, and simple baseline to build upon.\r\n\r\nAny properties supplied will be spread to the root element (native element).\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Css Baseline](/style/css-baseline/)--\x3e\r\n\r\n'},function(e,n){e.exports='# DialogActions\r\n\r\n<p class="description">The API documentation of the DialogActions React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.dialogActions (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">DialogActionsProp.DisableActionSpacing</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the dialog actions do not have additional margin. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Action</span> | Styles applied to the children.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/DialogActions/DialogActions.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDialogActions`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# DialogContentText\r\n\r\n<p class="description">The API documentation of the DialogContentText React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.dialogContentText (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element ([Typography](#/api/typography)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/DialogContentText/DialogContentText.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDialogContentText`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Typography](#/api/typography) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# DialogContent\r\n\r\n<p class="description">The API documentation of the DialogContent React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.dialogContent (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/DialogContent/DialogContent.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDialogContent`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# DialogTitle\r\n\r\n<p class="description">The API documentation of the DialogTitle React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.dialogTitle (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DisableTypography</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the children won\'t be wrapped by a typography component. For instance, this can be useful to render an h4 instead of the default h2. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/DialogTitle/DialogTitle.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDialogTitle`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Dialog\r\n\r\n<p class="description">The API documentation of the Dialog React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.dialog (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nDialogs are overlaid modal paper based components with a backdrop.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the Dialog is open. |\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the dialog stretches to `maxWidth`. |\r\n| <span class="prop-name">MaterialProp.OnEnter</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the dialog enters. |\r\n| <span class="prop-name">MaterialProp.OnEntering</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the dialog is entering. |\r\n| <span class="prop-name">MaterialProp.OnEntered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the dialog has entered. |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.OnExit</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the dialog exits. |\r\n| <span class="prop-name">MaterialProp.OnExited</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the dialog has exited. |\r\n| <span class="prop-name">MaterialProp.OnExiting</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the dialog is exiting. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{ enter: duration.enteringScreen, exit: duration.leavingScreen }</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n| <span class="prop-name">ModalProp.DisableBackdropClick</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, clicking the backdrop will not fire the `onClose` callback. |\r\n| <span class="prop-name">ModalProp.DisableEscapeKeyDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, hitting escape will not fire the `onClose` callback. |\r\n| <span class="prop-name">ModalProp.OnBackdropClick</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the backdrop is clicked. |\r\n| <span class="prop-name">ModalProp.OnEscapeKeyDown</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the escape key is pressed, `disableKeyboard` is false and the modal is in focus. |\r\n| <span class="prop-name">DialogProp.FullScreen</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the dialog will be full-screen |\r\n| <span class="prop-name">DialogProp.MaxWidth</span> | <span class="prop-type">type&nbsp;DialogMaxWidth&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Xs<br>&nbsp;&nbsp;&#124;&nbsp;Sm<br>&nbsp;&nbsp;&#124;&nbsp;Md<br>&nbsp;&nbsp;&#124;&nbsp;Lg<br>&nbsp;&nbsp;&#124;&nbsp;Xl&nbsp;&nbsp;&#124;&nbsp;False<br></span> | <span class="prop-default">DialogMaxWidth.Sm</span> | Determine the max width of the dialog. The dialog width grows with the size of the screen, this property is useful on the desktop where you might need some coherent different width size across your application. Set to `false` to disable `maxWidth`. |\r\n| <span class="prop-name">DialogProp.Scroll</span> | <span class="prop-type">type&nbsp;DialogScroll&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Body<br>&nbsp;&nbsp;&#124;&nbsp;Paper<br></span> | <span class="prop-default">DialogScroll.Paper</span> | Determine the container for scrolling the dialog. |\r\n| <span class="prop-name">ChildrenProp.PaperProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Paper`](#/api/paper) element. |\r\n| <span class="prop-name">ChildrenProp.TransitionComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Fade</span> | Transition component. |\r\n| <span class="prop-name">ChildrenProp.TransitionProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Transition` element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Modal](#/api/modal)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ScrollPaper</span> | Styles applied to the root element if `scroll="paper"`.\r\n| <span class="prop-name">ClassNames.ScrollBody</span> | Styles applied to the root element if `scroll="body"`.\r\n| <span class="prop-name">ClassNames.Paper</span> | Styles applied to the `Paper` component.\r\n| <span class="prop-name">ClassNames.PaperScrollPaper</span> | Styles applied to the `Paper` component if `scroll="paper"`.\r\n| <span class="prop-name">ClassNames.PaperScrollBody</span> | Styles applied to the `Paper` component if `scroll="body"`.\r\n| <span class="prop-name">ClassNames.PaperWidthXs</span> | Styles applied to the `Paper` component if `maxWidth="xs"`.\r\n| <span class="prop-name">ClassNames.PaperWidthSm</span> | Styles applied to the `Paper` component if `maxWidth="sm"`.\r\n| <span class="prop-name">ClassNames.PaperWidthMd</span> | Styles applied to the `Paper` component if `maxWidth="md"`.\r\n| <span class="prop-name">ClassNames.PaperWidthLg</span> | Styles applied to the `Paper` component if `maxWidth="lg"`.\r\n| <span class="prop-name">ClassNames.PaperFullWidth</span> | Styles applied to the `Paper` component if `fullWidth={true}`.\r\n| <span class="prop-name">ClassNames.PaperFullScreen</span> | Styles applied to the `Paper` component if `fullScreen={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Dialog/Dialog.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDialog`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Modal](#/api/modal) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Divider\r\n\r\n<p class="description">The API documentation of the Divider React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.divider (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"hr"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Inset</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the divider will be indented. |\r\n| <span class="prop-name">DividerProp.Absolute</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> |  |\r\n| <span class="prop-name">DividerProp.Light</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the divider will have a lighter color. |\r\n| <span class="prop-name">DividerProp.Variant</span> | <span class="prop-type">type&nbsp;DividerVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;FullWidth<br>&nbsp;&nbsp;&#124;&nbsp;Inset<br>&nbsp;&nbsp;&#124;&nbsp;Middle<br> | <span class="prop-default">DividerProp.FullWidth</span> | The variant to use. \r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Absolute</span> | Styles applied to the root element if `absolute={true}`.\r\n| <span class="prop-name">ClassNames.Inset</span> | Styles applied to the root element if `inset={true}`.\r\n| <span class="prop-name">ClassNames.Light</span> | Styles applied to the root element if `light={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Divider/Divider.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDivider`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dividers](/demos/dividers/)--\x3e\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Drawer\r\n\r\n<p class="description">The API documentation of the Drawer React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.drawer (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe properties of the [Modal](#/api/modal) component are available\r\nwhen `DrawerProp.Variant = Temporary` is set.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Elevation</span> | <span class="prop-type">int</span> | <span class="prop-default">16</span> | The elevation of the drawer. |\r\n| <span class="prop-name">MaterialProp.Open</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the drawer is open. |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{ enter: duration.enteringScreen, exit: duration.leavingScreen }</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n| <span class="prop-name">ChildrenProp.ModalProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Modal`](#/api/modal) element. |\r\n| <span class="prop-name">ChildrenProp.PaperProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Paper`](#/api/paper) element. |\r\n| <span class="prop-name">ChildrenProp.SlideProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Slide`](#/api/slide) element. |\r\n| <span class="prop-name">DrawerProp.Anchor</span> | <span class="prop-type">type&nbsp;Anchor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;Top<br>&nbsp;&nbsp;&#124;&nbsp;Right<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br></span> | <span class="prop-default">Anchor.Left</span> | Side from which the drawer will appear. |\r\n| <span class="prop-name">DrawerProp.Variant</span> | <span class="prop-type">type&nbsp;DrawerVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Permanent<br>&nbsp;&nbsp;&#124;&nbsp;Persistent<br>&nbsp;&nbsp;&#124;&nbsp;Temporary<br></span> | <span class="prop-default">DrawerVariant.Temporary</span> | The variant to use. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Docked</span> | Styles applied to the root element if `variant="permanent or persistent"`.\r\n| <span class="prop-name">ClassNames.Paper</span> | Styles applied to the `Paper` component.\r\n| <span class="prop-name">ClassNames.PaperAnchorLeft</span> | Styles applied to the `Paper` component if `anchor="left"`.\r\n| <span class="prop-name">ClassNames.PaperAnchorRight</span> | Styles applied to the `Paper` component if `anchor="right"`.\r\n| <span class="prop-name">ClassNames.PaperAnchorTop</span> | Styles applied to the `Paper` component if `anchor="top"`.\r\n| <span class="prop-name">ClassNames.PaperAnchorBottom</span> | Styles applied to the `Paper` component if `anchor="bottom"`.\r\n| <span class="prop-name">ClassNames.PaperAnchorDockedLeft</span> | Styles applied to the `Paper` component if `anchor="left"` & `variant` is not "temporary".\r\n| <span class="prop-name">ClassNames.PaperAnchorDockedTop</span> | Styles applied to the `Paper` component if `anchor="top"` & `variant` is not "temporary".\r\n| <span class="prop-name">ClassNames.PaperAnchorDockedRight</span> | Styles applied to the `Paper` component if `anchor="right"` & `variant` is not "temporary".\r\n| <span class="prop-name">ClassNames.PaperAnchorDockedBottom</span> | Styles applied to the `Paper` component if `anchor="bottom"` & `variant` is not "temporary".\r\n| <span class="prop-name">ClassNames.Modal</span> | Styles applied to the `Modal` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Drawer/Drawer.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiDrawer`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Drawers](/demos/drawers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ExpansionPanelActions\r\n\r\n<p class="description">The API documentation of the ExpansionPanelActions React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.expansionPanelActions (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Action</span> | Styles applied to the children.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ExpansionPanelActions/ExpansionPanelActions.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiExpansionPanelActions`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Expansion Panels](/demos/expansion-panels/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ExpansionPanelDetails\r\n\r\n<p class="description">The API documentation of the ExpansionPanelDetails React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.expansionPanelDetails (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ExpansionPanelDetails/ExpansionPanelDetails.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiExpansionPanelDetails`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Expansion Panels](/demos/expansion-panels/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ExpansionPanelSummary\r\n\r\n<p class="description">The API documentation of the ExpansionPanelSummary React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.expansionPanelSummary (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">ExpansionPanelSummaryProp.ExpandIcon</span> | <span class="prop-type">ReactNode</span> |   | The icon to display as the expand indicator. |\r\n| <span class="prop-name">ChildrenProp.IconButtonProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `TouchRipple` element wrapping the expand icon. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Expanded</span> | Styles applied to the root element if `expanded={true}`.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root and children wrapper elements when focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Content</span> | Styles applied to the children wrapper element.\r\n| <span class="prop-name">ClassNames.ExpandIcon</span> | Styles applied to the `IconButton` component when `expandIcon` is supplied.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ExpansionPanelSummary/ExpansionPanelSummary.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiExpansionPanelSummary`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Expansion Panels](/demos/expansion-panels/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ExpansionPanel\r\n\r\n<p class="description">The API documentation of the ExpansionPanel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.expansionPanel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the panel will be displayed in a disabled state. |\r\n| <span class="prop-name">ExpansionPanelProp.DefaultExpanded</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, expands the panel by default. |\r\n| <span class="prop-name">ExpansionPanelProp.Expanded</span> | <span class="prop-type">bool</span> |   | If `true`, expands the panel, otherwise collapse it. Setting this prop enables control over the panel. |\r\n| <span class="prop-name">ExpansionPanelProp.OnChange</span> | <span class="prop-type">obj->bool->unit</span> |   | Callback fired when the expand/collapse state is changed.<br><br>**Signature:**<br>`(event: obj)->(expanded: bool)->unit`<br>*event:* The event source of the callback<br>*expanded:* The `expanded` state of the panel |\r\n| <span class="prop-name">ChildrenProp.CollapseProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Collapse`](#/api/collapse) element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Expanded</span> | Styles applied to the root element if `expanded={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ExpansionPanel/ExpansionPanel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiExpansionPanel`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Expansion Panels](/demos/expansion-panels/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Fab\r\n\r\n<p class="description">The API documentation of the Fab React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.fab (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"button"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will take up the full width of its container. |\r\n| <span class="prop-name">HTMLAttr.Href</span> | <span class="prop-type">string</span> |   | The URL to link to when the button is clicked. If defined, an `a` element will be used as the root node. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will be disabled. |\r\n| <span class="prop-name">FabProp.DisableFocusRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the  keyboard focus ripple will be disabled. `MaterialProp.DisableRipple` must also be true. |\r\n| <span class="prop-name">FabProp.Size</span> | <span class="prop-type">type&nbsp;FabSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Small<br>&nbsp;&nbsp;&#124;&nbsp;Medium<br>&nbsp;&nbsp;&#124;&nbsp;Large<br></span> | <span class="prop-default">FabSize.Large</span> | The size of the button. `Small` is equivalent to the dense button styling. |\r\n| <span class="prop-name">FabProp.Variant</span> | <span class="prop-type">type&nbsp;FabVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Round<br>&nbsp;&nbsp;&#124;&nbsp;Extended<br> | <span class="prop-default">FabVariant.Round</span> | The variant to use. \r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the span element that wraps the children.\r\n| <span class="prop-name">ClassNames.Primary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.Secondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Extended</span> | Styles applied to the root element if `variant="extended"`.\r\n| <span class="prop-name">ClassNames.FocusVisible</span> | Styles applied to the ButtonBase root element if the button is keyboard focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.ColorInherit</span> | Styles applied to the root element if `color="inherit"`.\r\n| <span class="prop-name">ClassNames.SizeSmall</span> | Styles applied to the root element if `size="small"`.\r\n| <span class="prop-name">ClassNames.SizeMedium</span> | Styles applied to the root element if `size="medium"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Fab/Fab.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFab`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Buttons](#/demos/buttons/)\r\n\r\n'},function(e,n){e.exports='# Fade\r\n\r\n<p class="description">The API documentation of the Fade React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.fade (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe Fade transition is used by the [Modal](/utils/modal/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.In</span> | <span class="prop-type">bool</span> |   | If `true`, the component will transition in. |\r\n| <span class="prop-name">MaterialProp.Timeout</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{  enter: duration.enteringScreen,  exit: duration.leavingScreen,}</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n\r\nAny other properties supplied will be spread to the root element ([Transition](https://reactcommunity.org/react-transition-group/#Transition)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Transition](https://reactcommunity.org/react-transition-group/#Transition) component, from react-transition-group, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Transitions](/utils/transitions/)--\x3e\r\n\r\n'},function(e,n){e.exports='# FilledInput\r\n\r\n<p class="description">The API documentation of the FilledInput React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.filledInput (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the input will indicate an error. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> |   | If `true`, the input will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.RowsMax</span> | <span class="prop-type">int</span> |   | Maximum number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value, required for a controlled component. |\r\n| <span class="prop-name">MaterialProp.DefaultValue</span> | <span class="prop-type">obj</span> |   | The default input value, useful when not controlling the component. |\r\n| <span class="prop-name">HTMLAttr.AutoComplete</span> | <span class="prop-type">string</span> |   | This property helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\'s more like an autofill. You can learn more about it here: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill |\r\n| <span class="prop-name">HTMLAttr.AutoFocus</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be focused during the first mount. |\r\n| <span class="prop-name">HTMLAttr.ClassName</span> | <span class="prop-type">string</span> |   | The CSS class name of the wrapper element. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Multiline</span> | <span class="prop-type">bool</span> |   | If `true`, a textarea element will be rendered. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | Name attribute of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Placeholder</span> | <span class="prop-type">string</span> |   | The short hint displayed in the input before the user enters a value. |\r\n| <span class="prop-name">HTMLAttr.ReadOnly</span> | <span class="prop-type">bool</span> |   | It prevents the user from changing the value of the field (not from interacting with the field). |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be required. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> |   | Number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | Type of the input element. It should be a valid HTML5 input type. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback fired when the value is changed.<br><br>**Signature:**<br>`(event : FormEvent) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">FilledInputProp.EndAdornment</span> | <span class="prop-type">ReactNode</span> |   | End `InputAdornment` for this component. |\r\n| <span class="prop-name">FilledInputProp.InputComponent</span> | <span class="prop-type">ReactType</span> |   | The component used for the native input. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">FilledInputProp.StartAdornment</span> | <span class="prop-type">ReactNode</span> |   | Start `InputAdornment` for this component. |\r\n\r\nAny other properties supplied will be spread to the root element ([InputBase](#/api/input-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Underline</span> | Styles applied to the root element if `disableUnderline={false}`.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if the component is focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.AdornedStart</span> | Styles applied to the root element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.AdornedEnd</span> | Styles applied to the root element if `endAdornment` is provided.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.Multiline</span> | Styles applied to the root element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.Input</span> | Styles applied to the `input` element.\r\n| <span class="prop-name">ClassNames.InputMarginDense</span> | Styles applied to the `input` element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.InputMultiline</span> | Styles applied to the `input` element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.InputAdornedStart</span> | Styles applied to the `input` element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.InputAdornedEnd</span> | Styles applied to the `input` element if `endAdornment` is provided.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FilledInput/FilledInput.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFilledInput`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [InputBase](#/api/input-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Text Fields](#/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# FormControlLabel\r\n\r\n<p class="description">The API documentation of the FormControlLabel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.formControlLabel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nDrop in replacement of the `Radio`, `Switch` and `Checkbox` component.\r\nUse this component if you want to display an extra label.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Label</span> | <span class="prop-type">ReactNode</span> |   | The text to be used in an enclosing label element. |\r\n| <span class="prop-name">HTMLAttr.Checked</span> | <span class="prop-type">bool</span> |   | If `true`, the component appears selected. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the control will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   |  |\r\n| <span class="prop-name">HTMLAttr.Value</span> | <span class="prop-type">string</span> |   | The value of the component. |\r\n| <span class="prop-name">FormControlLabelProp.Control</span> | <span class="prop-type">ReactElement</span> |   | A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`. |\r\n| <span class="prop-name">FormControlLabelProp.LabelPlacement</span> | <span class="prop-type">type&nbsp;FormControlLabelPlacement&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;End<br>&nbsp;&nbsp;&#124;&nbsp;Start<br>&nbsp;&nbsp;&#124;&nbsp;Top<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br></span> | <span class="prop-default">FormControlLabelPlacement.End</span> | The position of the label. |\r\n| <span class="prop-name">FormControlLabelProp.OnChange</span> | <span class="prop-type">obj->bool->unit</span> |   | Callback fired when the state is changed.<br><br>**Signature:**<br>`(event: obj)->(checked: bool)->unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.checked`.<br>*checked:* The `checked` value of the switch |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.LabelPlacementStart</span> | Styles applied to the root element if `labelPlacement="start"`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the label\'s Typography component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FormControlLabel/FormControlLabel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFormControlLabel`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# FormControl\r\n\r\n<p class="description">The API documentation of the FormControl React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.formControl (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nProvides context such as filled/focused/error/required for form inputs.\r\nRelying on the context provides high flexibilty and ensures that the state always stays\r\nconsistent across the children of the `FormControl`.\r\nThis context is used by the following components:\r\n - FormLabel\r\n - FormHelperText\r\n - Input\r\n - InputLabel\r\n\r\n⚠️ Only one input can be used within a FormControl.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the label should be displayed in an error state. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the component will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> | <span class="prop-default">FormControlMargin.None</span> | If `dense` or `normal`, will adjust vertical spacing of this and contained components. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the label, input and helper text should be displayed in a disabled state. |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the label will indicate that the input is required. |\r\n| <span class="prop-name">FormControlProp.Variant</span> | <span class="prop-type">type&nbsp;FormControlVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> | <span class="prop-default">Standard</span> | The variant to use. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.MarginNormal</span> | Styles applied to the root element if `margin="normal"`.\r\n| <span class="prop-name">ClassNames.MarginDense</span> | Styles applied to the root element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.FullWidth</span> | Styles applied to the root element if `fullWidth={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FormControl/FormControl.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFormControl`.\r\n\r\n## Demos\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n- [Text Fields](#/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# FormGroup\r\n\r\n<p class="description">The API documentation of the FormGroup React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.formGroup (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n`FormGroup` wraps controls such as `Checkbox` and `Switch`.\r\nIt provides compact row layout.\r\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">FormGroupProp.Row</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Display group of elements in a compact row. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Row</span> | Styles applied to the root element if `row={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FormGroup/FormGroup.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFormGroup`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# FormHelperText\r\n\r\n<p class="description">The API documentation of the FormHelperText React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.formHelperText (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"p"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, helper text should be displayed in an error state. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=&nbsp;Dense<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the helper text should be displayed in a disabled state. |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the helper text should use required classes key. |\r\n| <span class="prop-name">FormHelperTextProp.Filled</span> | <span class="prop-type">bool</span> |   | If `true`, the helper text should use filled classes key. |\r\n| <span class="prop-name">FormHelperTextProp.Variant</span> | <span class="prop-type">type&nbsp;FormHelperTextVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> |   | The variant to use. |\r\n| <span class="prop-name">FormHelperTextProp.Focused</span> | <span class="prop-type">bool</span> |   | If `true`, the helper text should use focused classes key. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.MarginDense</span> | Styles applied to the root element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.Contained</span> | Styles applied to the root element if `variant="filled"` or `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if `focused={true}`.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the root element if `filled={true}`.\r\n| <span class="prop-name">ClassNames.Required</span> | Styles applied to the root element if `required={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FormHelperText/FormHelperText.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFormHelperText`.\r\n\r\n## Demos\r\n\r\n- [Text Fields](#/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# FormLabel\r\n\r\n<p class="description">The API documentation of the FormLabel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.formLabel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"label"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the label should be displayed in an error state. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the label should be displayed in a disabled state. |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the label will indicate that the input is required. |\r\n| <span class="prop-name">FormLabelProp.Filled</span> | <span class="prop-type">bool</span> |   | If `true`, the label should use filled classes key. |\r\n| <span class="prop-name">FormLabelProp.Focused</span> | <span class="prop-type">bool</span> |   | If `true`, the input of this label is focused (used by `FormGroup` components). |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if `focused={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the root element if `filled={true}`.\r\n| <span class="prop-name">ClassNames.Required</span> | Styles applied to the root element if `required={true}`.\r\n| <span class="prop-name">ClassNames.Asterisk</span> | \r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/FormLabel/FormLabel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiFormLabel`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# GridListTileBar\r\n\r\n<p class="description">The API documentation of the GridListTileBar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.gridListTileBar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">GridListTileBarProp.ActionIcon</span> | <span class="prop-type">ReactNode</span> |   | An IconButton element to be used as secondary action target (primary action target is the tile itself). |\r\n| <span class="prop-name">GridListTileBarProp.ActionPosition</span> | <span class="prop-type">type&nbsp;ActionPosition&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;Right<br></span> | <span class="prop-default">ActionPosition.Right</span> | Position of secondary action IconButton. |\r\n| <span class="prop-name">GridListTileBarProp.Subtitle</span> | <span class="prop-type">ReactNode</span> |   | String or element serving as subtitle (support text). |\r\n| <span class="prop-name">GridListTileBarProp.Title</span> | <span class="prop-type">ReactNode</span> |   | Title to be displayed on tile. |\r\n| <span class="prop-name">GridListTileBarProp.TitlePosition</span> | <span class="prop-type">type&nbsp;TitlePosition&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Top<br>&nbsp;&nbsp;&#124;&nbsp;TitlePosition.Bottom<br></span> | <span class="prop-default">Bottom</span> | Position of the title bar. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.TitlePositionBottom</span> | Styles applied to the root element if `titlePosition="bottom"`.\r\n| <span class="prop-name">ClassNames.TitlePositionTop</span> | Styles applied to the root element if `titlePosition="top"`.\r\n| <span class="prop-name">ClassNames.RootSubtitle</span> | Styles applied to the root element if a `subtitle` is provided.\r\n| <span class="prop-name">ClassNames.TitleWrap</span> | Styles applied to the title and subtitle container element.\r\n| <span class="prop-name">ClassNames.TitleWrapActionPosLeft</span> | Styles applied to the container element if `actionPosition="left"`.\r\n| <span class="prop-name">ClassNames.TitleWrapActionPosRight</span> | Styles applied to the container element if `actionPosition="right"`.\r\n| <span class="prop-name">ClassNames.Title</span> | Styles applied to the title container element.\r\n| <span class="prop-name">ClassNames.Subtitle</span> | Styles applied to the subtitle container element.\r\n| <span class="prop-name">ClassNames.ActionIcon</span> | Styles applied to the actionIcon if supplied.\r\n| <span class="prop-name">ClassNames.ActionIconActionPosLeft</span> | Styles applied to the actionIcon if `actionPosition="left"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/GridListTileBar/GridListTileBar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiGridListTileBar`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Grid List](/demos/grid-list/)--\x3e\r\n\r\n'},function(e,n){e.exports='# GridListTile\r\n\r\n<p class="description">The API documentation of the GridListTile React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.gridListTile (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"li"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">HTMLAttr.Cols</span> | <span class="prop-type">float</span> | <span class="prop-default">1</span> | Width of the tile in number of grid cells. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> | <span class="prop-default">1</span> | Height of the tile in number of grid cells. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Tile</span> | Styles applied to the `div` element that wraps the children.\r\n| <span class="prop-name">ClassNames.ImgFullHeight</span> | Styles applied to an `img` element child, if needed to ensure it covers the tile.\r\n| <span class="prop-name">ClassNames.ImgFullWidth</span> | Styles applied to an `img` element child, if needed to ensure it covers the tile.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/GridListTile/GridListTile.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiGridListTile`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Grid List](/demos/grid-list/)--\x3e\r\n\r\n'},function(e,n){e.exports='# GridList\r\n\r\n<p class="description">The API documentation of the GridList React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.gridList (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"ul"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">HTMLAttr.Cols</span> | <span class="prop-type">float</span> | <span class="prop-default">2</span> | Number of columns. |\r\n| <span class="prop-name">GridListProp.CellHeight</span> | <span class="prop-type">U2&lt;int,&nbsp;AutoEnum&gt;<br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">180</span> | Number of px for one cell height. You can set `AutoEnum.Auto` if you want to let the children determine the height. |\r\n| <span class="prop-name">GridListProp.Spacing</span> | <span class="prop-type">int</span> | <span class="prop-default">4</span> | Number of px for the spacing between tiles. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/GridList/GridList.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiGridList`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Grid List](/demos/grid-list/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Grid\r\n\r\n<p class="description">The API documentation of the Grid React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.grid (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">GridProp.AlignContent</span> | <span class="prop-type">type&nbsp;GridAlignContent&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Stretch<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;FlexStart<br>&nbsp;&nbsp;&#124;&nbsp;FlexEnd<br>&nbsp;&nbsp;&#124;&nbsp;SpaceBetween<br>&nbsp;&nbsp;&#124;&nbsp;SpaceAround<br></span> | <span class="prop-default">GridAlignContent.Stretch</span> | Defines the `align-content` style property. It\'s applied for all screen sizes. |\r\n| <span class="prop-name">GridProp.AlignItems</span> | <span class="prop-type">type&nbsp;GridAlignItems&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Stretch<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;BaseLine<br>&nbsp;&nbsp;&#124;&nbsp;FlexStart<br>&nbsp;&nbsp;&#124;&nbsp;FlexEnd<br></span> | <span class="prop-default">GridAlignItems.Stretch</span> | Defines the `align-items` style property. It\'s applied for all screen sizes. |\r\n| <span class="prop-name">GridProp.Container</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the component will have the flex *container* behavior. You should be wrapping *items* with a *container*. |\r\n| <span class="prop-name">GridProp.Direction</span> | <span class="prop-type">type&nbsp;GridDirection&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Row<br>&nbsp;&nbsp;&#124;&nbsp;Column<br>&nbsp;&nbsp;&#124;&nbsp;RowReverse<br>&nbsp;&nbsp;&#124;&nbsp;ColumnReverse<br></span> | <span class="prop-default">GridDirection.Row</span> | Defines the `flex-direction` style property. It is applied for all screen sizes. |\r\n| <span class="prop-name">GridProp.Item</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the component will have the flex *item* behavior. You should be wrapping *items* with a *container*. |\r\n| <span class="prop-name">GridProp.Justify</span> | <span class="prop-type">type&nbsp;GridJustify&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;FlexStart<br>&nbsp;&nbsp;&#124;&nbsp;FlexEnd<br>&nbsp;&nbsp;&#124;&nbsp;SpaceBetween<br>&nbsp;&nbsp;&#124;&nbsp;SpaceAround<br>&nbsp;&nbsp;&#124;&nbsp;SpaceEvenly<br></span> | <span class="prop-default">GridJustify.FlexStart</span> | Defines the `justify-content` style property. It is applied for all screen sizes. |\r\n| <span class="prop-name">GridProp.Lg</span> | <span class="prop-type">type&nbsp;GridSize&nbsp;=&nbsp;U3&lt;bool,&nbsp;AutoEnum,&nbsp;GridSizeNum&gt;<br><br>type&nbsp;GridSizeNum&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;1&#96;&#96;&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;2&#96;&#96;&nbsp;=&nbsp;2<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;3&#96;&#96;&nbsp;=&nbsp;3<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;4&#96;&#96;&nbsp;=&nbsp;4<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;5&#96;&#96;&nbsp;=&nbsp;5<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;6&#96;&#96;&nbsp;=&nbsp;6<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;7&#96;&#96;&nbsp;=&nbsp;7<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;9&#96;&#96;&nbsp;=&nbsp;9<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;10&#96;&#96;&nbsp;=&nbsp;10<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;11&#96;&#96;&nbsp;=&nbsp;11<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;12&#96;&#96;&nbsp;=&nbsp;12<br></span> | <span class="prop-default">false</span> | Defines the number of grids the component is going to use. It\'s applied for the `lg` breakpoint and wider screens if not overridden. |\r\n| <span class="prop-name">GridProp.Md</span> | <span class="prop-type">type&nbsp;GridSize&nbsp;=&nbsp;U3&lt;bool,&nbsp;AutoEnum,&nbsp;GridSizeNum&gt;<br><br>type&nbsp;GridSizeNum&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;1&#96;&#96;&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;2&#96;&#96;&nbsp;=&nbsp;2<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;3&#96;&#96;&nbsp;=&nbsp;3<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;4&#96;&#96;&nbsp;=&nbsp;4<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;5&#96;&#96;&nbsp;=&nbsp;5<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;6&#96;&#96;&nbsp;=&nbsp;6<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;7&#96;&#96;&nbsp;=&nbsp;7<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;9&#96;&#96;&nbsp;=&nbsp;9<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;10&#96;&#96;&nbsp;=&nbsp;10<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;11&#96;&#96;&nbsp;=&nbsp;11<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;12&#96;&#96;&nbsp;=&nbsp;12<br></span> | <span class="prop-default">false</span> | Defines the number of grids the component is going to use. It\'s applied for the `md` breakpoint and wider screens if not overridden. |\r\n| <span class="prop-name">GridProp.Sm</span> | <span class="prop-type">type&nbsp;GridSize&nbsp;=&nbsp;U3&lt;bool,&nbsp;AutoEnum,&nbsp;GridSizeNum&gt;<br><br>type&nbsp;GridSizeNum&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;1&#96;&#96;&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;2&#96;&#96;&nbsp;=&nbsp;2<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;3&#96;&#96;&nbsp;=&nbsp;3<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;4&#96;&#96;&nbsp;=&nbsp;4<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;5&#96;&#96;&nbsp;=&nbsp;5<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;6&#96;&#96;&nbsp;=&nbsp;6<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;7&#96;&#96;&nbsp;=&nbsp;7<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;9&#96;&#96;&nbsp;=&nbsp;9<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;10&#96;&#96;&nbsp;=&nbsp;10<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;11&#96;&#96;&nbsp;=&nbsp;11<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;12&#96;&#96;&nbsp;=&nbsp;12<br></span> | <span class="prop-default">false</span> | Defines the number of grids the component is going to use. It\'s applied for the `sm` breakpoint and wider screens if not overridden. |\r\n| <span class="prop-name">GridProp.Spacing</span> | <span class="prop-type">type&nbsp;GridSpacing&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;0&#96;&#96;&nbsp;=&nbsp;0<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;16&#96;&#96;&nbsp;=&nbsp;16<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;24&#96;&#96;&nbsp;=&nbsp;24<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;32&#96;&#96;&nbsp;=&nbsp;32<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;40&#96;&#96;&nbsp;=&nbsp;40<br></span> | <span class="prop-default">0</span> | Defines the space between the type `item` component. It can only be used on a type `container` component. |\r\n| <span class="prop-name">GridProp.Wrap</span> | <span class="prop-type">type&nbsp;GridWrap&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Nowrap<br>&nbsp;&nbsp;&#124;&nbsp;Wrap<br>&nbsp;&nbsp;&#124;&nbsp;WrapReverse<br></span> | <span class="prop-default">GridWrap.Wrap</span> | Defines the `flex-wrap` style property. It\'s applied for all screen sizes. |\r\n| <span class="prop-name">GridProp.Xl</span> | <span class="prop-type">type&nbsp;GridSize&nbsp;=&nbsp;U3&lt;bool,&nbsp;AutoEnum,&nbsp;GridSizeNum&gt;<br><br>type&nbsp;GridSizeNum&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;1&#96;&#96;&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;2&#96;&#96;&nbsp;=&nbsp;2<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;3&#96;&#96;&nbsp;=&nbsp;3<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;4&#96;&#96;&nbsp;=&nbsp;4<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;5&#96;&#96;&nbsp;=&nbsp;5<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;6&#96;&#96;&nbsp;=&nbsp;6<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;7&#96;&#96;&nbsp;=&nbsp;7<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;9&#96;&#96;&nbsp;=&nbsp;9<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;10&#96;&#96;&nbsp;=&nbsp;10<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;11&#96;&#96;&nbsp;=&nbsp;11<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;12&#96;&#96;&nbsp;=&nbsp;12<br></span> | <span class="prop-default">false</span> | Defines the number of grids the component is going to use. It\'s applied for the `xl` breakpoint and wider screens. |\r\n| <span class="prop-name">GridProp.Xs</span> | <span class="prop-type">type&nbsp;GridSize&nbsp;=&nbsp;U3&lt;bool,&nbsp;AutoEnum,&nbsp;GridSizeNum&gt;<br><br>type&nbsp;GridSizeNum&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;1&#96;&#96;&nbsp;=&nbsp;1<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;2&#96;&#96;&nbsp;=&nbsp;2<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;3&#96;&#96;&nbsp;=&nbsp;3<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;4&#96;&#96;&nbsp;=&nbsp;4<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;5&#96;&#96;&nbsp;=&nbsp;5<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;6&#96;&#96;&nbsp;=&nbsp;6<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;7&#96;&#96;&nbsp;=&nbsp;7<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;8&#96;&#96;&nbsp;=&nbsp;8<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;9&#96;&#96;&nbsp;=&nbsp;9<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;10&#96;&#96;&nbsp;=&nbsp;10<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;11&#96;&#96;&nbsp;=&nbsp;11<br>&nbsp;&nbsp;&#124;&nbsp;&#96;&#96;12&#96;&#96;&nbsp;=&nbsp;12<br></span> | <span class="prop-default">false</span> | Defines the number of grids the component is going to use. It\'s applied for all the screen sizes with the lowest priority. |\r\n| <span class="prop-name">GridProp.ZeroMinWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, it sets `min-width: 0` on the item. Refer to the limitations section of the documentation to better understand the use case. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Container</span> | Styles applied to the root element if `container={true}`.\r\n| <span class="prop-name">ClassNames.Item</span> | Styles applied to the root element if `item={true}`.\r\n| <span class="prop-name">ClassNames.ZeroMinWidth</span> | Styles applied to the root element if `zeroMinWidth={true}`.\r\n| <span class="prop-name">ClassNames.&#96;&#96;Direction-xs-column&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Direction-xs-column-reverse&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Direction-xs-row-reverse&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Wrap-xs-nowrap&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Wrap-xs-wrap-reverse&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-items-xs-center&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-items-xs-flex-start&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-items-xs-flex-end&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-items-xs-baseline&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-content-xs-center&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-content-xs-flex-start&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-content-xs-flex-end&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-content-xs-space-between&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Align-content-xs-space-around&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Justify-xs-center&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Justify-xs-flex-end&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Justify-xs-space-between&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Justify-xs-space-around&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Justify-xs-space-evenly&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Spacing-xs-8&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Spacing-xs-16&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Spacing-xs-24&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Spacing-xs-32&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Spacing-xs-40&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-auto&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-true&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-1&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-2&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-3&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-4&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-5&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-6&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-7&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-8&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-9&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-10&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-11&#96;&#96;</span> | \r\n| <span class="prop-name">ClassNames.&#96;&#96;Grid-xs-12&#96;&#96;</span> | \r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Grid/Grid.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiGrid`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Grid](/layout/grid/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Grow\r\n\r\n<p class="description">The API documentation of the Grow React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.grow (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe Grow transition is used by the [Tooltip](/demos/tooltips/) and\r\n[Popover](/utils/popover/) components.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.In</span> | <span class="prop-type">bool</span> |   | If `true`, show the component; triggers the enter or exit animation. |\r\n| <span class="prop-name">GrowProp.Timeout</span> | <span class="prop-type">U3&lt;float,&nbsp;TransitionDuration&nbsp;list,&nbsp;AutoEnum&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br><br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">AutoEnum.Auto</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.<br>Set to `AutoEnum.Auto` to automatically calculate transition time based on height. |\r\n\r\nAny other properties supplied will be spread to the root element ([Transition](https://reactcommunity.org/react-transition-group/#Transition)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Transition](https://reactcommunity.org/react-transition-group/#Transition) component, from react-transition-group, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Popover](/utils/popover/)--\x3e\r\n\x3c!--- [Transitions](/utils/transitions/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Hidden\r\n\r\n<p class="description">The API documentation of the Hidden React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.hidden (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nResponsively hides children based on the selected implementation.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">HiddenProp.Implementation</span> | <span class="prop-type">type&nbsp;HiddenImplementation&nbsp;=&nbsp;Js&nbsp;&#124;&nbsp;Css<br></span> | <span class="prop-default">HiddenImplementation.Js</span> | Specify which implementation to use.  `Js` is the default, `Css` works better for server side rendering. |\r\n| <span class="prop-name">HiddenProp.InitialWidth</span> | <span class="prop-type">type&nbsp;MaterialSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Xs<br>&nbsp;&nbsp;&#124;&nbsp;Sm<br>&nbsp;&nbsp;&#124;&nbsp;Md<br>&nbsp;&nbsp;&#124;&nbsp;Lg<br>&nbsp;&nbsp;&#124;&nbsp;Xl<br></span> |   | You can use this property when choosing the `Js` implementation with server side rendering.<br>As `window.innerWidth` is unavailable on the server, we default to rendering an empty componenent during the first mount. In some situation you might want to use an heristic to approximate the screen width of the client browser screen width.<br>For instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint |\r\n| <span class="prop-name">HiddenProp.LgDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and down will be hidden. |\r\n| <span class="prop-name">HiddenProp.LgUp</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and up will be hidden. |\r\n| <span class="prop-name">HiddenProp.MdDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and down will be hidden. |\r\n| <span class="prop-name">HiddenProp.MdUp</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and up will be hidden. |\r\n| <span class="prop-name">HiddenProp.Only</span> | <span class="prop-type">type&nbsp;HiddenOnly&nbsp;=&nbsp;U2&lt;MaterialSize,&nbsp;MaterialSize&nbsp;list&gt;<br><br>type&nbsp;MaterialSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Xs<br>&nbsp;&nbsp;&#124;&nbsp;Sm<br>&nbsp;&nbsp;&#124;&nbsp;Md<br>&nbsp;&nbsp;&#124;&nbsp;Lg<br>&nbsp;&nbsp;&#124;&nbsp;Xl<br></span> |   | Hide the given breakpoint(s). |\r\n| <span class="prop-name">HiddenProp.SmDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and down will be hidden. |\r\n| <span class="prop-name">HiddenProp.SmUp</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and up will be hidden. |\r\n| <span class="prop-name">HiddenProp.XlDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and down will be hidden. |\r\n| <span class="prop-name">HiddenProp.XlUp</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and up will be hidden. |\r\n| <span class="prop-name">HiddenProp.XsDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and down will be hidden. |\r\n| <span class="prop-name">HiddenProp.XsUp</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, screens this size and up will be hidden. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Hidden](/layout/hidden/)--\x3e\r\n\r\n'},function(e,n){e.exports='# IconButton\r\n\r\n<p class="description">The API documentation of the IconButton React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.iconButton (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nRefer to the [Icons](/style/icons/) section of the documentation\r\nregarding the available icon options.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will be disabled. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorInherit</span> | Styles applied to the root element if `color="inherit"`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the children container element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/IconButton/IconButton.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiIconButton`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Buttons](/demos/buttons/)\r\n\x3c!--- [Grid List](/demos/grid-list/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Icon\r\n\r\n<p class="description">The API documentation of the Icon React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.icon (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"span"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">IconProp.Color</span> | <span class="prop-type">type&nbsp;IconColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br>&nbsp;&nbsp;&#124;&nbsp;Action<br>&nbsp;&nbsp;&#124;&nbsp;Error<br>&nbsp;&nbsp;&#124;&nbsp;Disabled<br></span> | <span class="prop-default">IconColor.Inherit</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">IconProp.FontSize</span> | <span class="prop-type">type&nbsp;IconFontSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Small<br>&nbsp;&nbsp;&#124;&nbsp;Large<br></span> | <span class="prop-default">IconFontSize.Default</span> | The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.ColorAction</span> | Styles applied to the root element if `color="action"`.\r\n| <span class="prop-name">ClassNames.ColorError</span> | Styles applied to the root element if `color="error"`.\r\n| <span class="prop-name">ClassNames.ColorDisabled</span> | Styles applied to the root element if `color="disabled"`.\r\n| <span class="prop-name">ClassNames.FontSizeInherit</span> | Styles applied to the root element if `fontSize="inherit"`.\r\n| <span class="prop-name">ClassNames.FontSizeSmall</span> | Styles applied to the root element if `fontSize="small"`.\r\n| <span class="prop-name">ClassNames.FontSizeLarge</span> | Styles applied to the root element if `fontSize="large"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Icon/Icon.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiIcon`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Icons](/style/icons/)--\x3e\r\n\r\n'},function(e,n){e.exports='# InputAdornment\r\n\r\n<p class="description">The API documentation of the InputAdornment React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.inputAdornment (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableTypography</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If children is a string then disable wrapping in a Typography component. |\r\n| <span class="prop-name">InputAdornmentProp.Position</span> | <span class="prop-type">type&nbsp;InputAdornmentPosition&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Start<br>&nbsp;&nbsp;&#124;&nbsp;End<br></span> |   | The position this adornment should appear relative to the `Input`. |\r\n| <span class="prop-name">InputAdornmentProp.Variant</span> | <span class="prop-type">type&nbsp;InputAdornmentVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> |   | The variant to use. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the root element if `variant="filled"`\r\n| <span class="prop-name">ClassNames.PositionStart</span> | Styles applied to the root element if `position="start"`.\r\n| <span class="prop-name">ClassNames.PositionEnd</span> | Styles applied to the root element if `position="end"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/InputAdornment/InputAdornment.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiInputAdornment`.\r\n\r\n## Demos\r\n\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# InputBase\r\n\r\n<p class="description">The API documentation of the InputBase React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.inputBase (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n`InputBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating an input.\r\nIt contains a load of style reset and some state logic.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DefaultValue</span> | <span class="prop-type">obj</span> |   | The default input value, useful when not controlling the component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the input will indicate an error. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the input will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.RowsMax</span> | <span class="prop-type">int</span> |   | Maximum number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value, required for a controlled component. |\r\n| <span class="prop-name">HTMLAttr.AutoComplete</span> | <span class="prop-type">string</span> |   | This property helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\'s more like an autofill. You can learn more about it here: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill |\r\n| <span class="prop-name">HTMLAttr.AutoFocus</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be focused during the first mount. |\r\n| <span class="prop-name">HTMLAttr.ClassName</span> | <span class="prop-type">string</span> |   | The CSS class name of the wrapper element. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Multiline</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, a textarea element will be rendered. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | Name attribute of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Placeholder</span> | <span class="prop-type">string</span> |   | The short hint displayed in the input before the user enters a value. |\r\n| <span class="prop-name">HTMLAttr.ReadOnly</span> | <span class="prop-type">bool</span> |   | It prevents the user from changing the value of the field (not from interacting with the field). |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be required. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> |   | Number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> | <span class="prop-default">"text"</span> | Type of the input element. It should be a valid HTML5 input type. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback fired when the value is changed.<br><br>**Signature:**<br>`(event : FormEvent) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">InputBaseProp.StartAdornment</span> | <span class="prop-type">ReactNode</span> |   | Start `InputAdornment` for this component. |\r\n| <span class="prop-name">InputBaseProp.EndAdornment</span> | <span class="prop-type">ReactNode</span> |   | End `InputAdornment` for this component. |\r\n| <span class="prop-name">InputBaseProp.InputComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"input"</span> | The component used for the native input. Either a string to use a DOM element or a component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.FormControl</span> | Styles applied to the root element if the component is a descendant of `FormControl`.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if the component is focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.AdornedStart</span> | Styles applied to the root element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.AdornedEnd</span> | Styles applied to the root element if `endAdornment` is provided.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.MarginDense</span> | Styles applied to the `input` element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.Multiline</span> | Styles applied to the root element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.FullWidth</span> | Styles applied to the root element if `fullWidth={true}`.\r\n| <span class="prop-name">ClassNames.Input</span> | Styles applied to the `input` element.\r\n| <span class="prop-name">ClassNames.InputMarginDense</span> | Styles applied to the `input` element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.InputMultiline</span> | Styles applied to the `input` element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.InputType</span> | Styles applied to the `input` element if `type` is not "text"`.\r\n| <span class="prop-name">ClassNames.InputTypeSearch</span> | Styles applied to the `input` element if `type="search"`.\r\n| <span class="prop-name">ClassNames.InputAdornedStart</span> | Styles applied to the `input` element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.InputAdornedEnd</span> | Styles applied to the `input` element if `endAdornment` is provided.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/InputBase/InputBase.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiInputBase`.\r\n\r\n## Demos\r\n\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# InputLabel\r\n\r\n<p class="description">The API documentation of the InputLabel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.inputLabel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the label will be displayed in an error state. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, apply disabled class. |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | if `true`, the label will indicate that the input is required. |\r\n| <span class="prop-name">InputLabelProp.Focused</span> | <span class="prop-type">bool</span> |   | If `true`, the input of this label is focused. |\r\n| <span class="prop-name">InputLabelProp.DisableAnimation</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the transition animation is disabled. |\r\n| <span class="prop-name">InputLabelProp.Margin</span> | <span class="prop-type">type&nbsp;InputLabelMargin&nbsp;=&nbsp;Dense<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">InputLabelProp.Shrink</span> | <span class="prop-type">bool</span> |   | If `true`, the label is shrunk. |\r\n| <span class="prop-name">InputLabelProp.Variant</span> | <span class="prop-type">type&nbsp;InputLabelVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> |   | The variant to use. |\r\n| <span class="prop-name">ChildrenProp.FormLabelClasses</span> | <span class="prop-type">ClassNames list</span> |   | `classes` property applied to the [`FormLabel`](#/api/form-label) element. |\r\n\r\nAny other properties supplied will be spread to the root element ([FormLabel](#/api/form-label)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.FormControl</span> | Styles applied to the root element if the component is a descendant of `FormControl`.\r\n| <span class="prop-name">ClassNames.MarginDense</span> | Styles applied to the root element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.Shrink</span> | Styles applied to the `input` element if `shrink={true}`.\r\n| <span class="prop-name">ClassNames.Animated</span> | Styles applied to the `input` element if `disableAnimation={false}`.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the root element if `variant="filled"`.\r\n| <span class="prop-name">ClassNames.Outlined</span> | Styles applied to the root element if `variant="outlined"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/InputLabel/InputLabel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiInputLabel`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [FormLabel](#/api/form-label) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# Input\r\n\r\n<p class="description">The API documentation of the Input React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.input (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DefaultValue</span> | <span class="prop-type">obj</span> |   | The default input value, useful when not controlling the component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the input will indicate an error. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> |   | If `true`, the input will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.RowsMax</span> | <span class="prop-type">int</span> |   | Maximum number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value, required for a controlled component. |\r\n| <span class="prop-name">HTMLAttr.AutoComplete</span> | <span class="prop-type">string</span> |   | This property helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\'s more like an autofill. You can learn more about it here: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill |\r\n| <span class="prop-name">HTMLAttr.AutoFocus</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be focused during the first mount. |\r\n| <span class="prop-name">HTMLAttr.ClassName</span> | <span class="prop-type">string</span> |   | The CSS class name of the wrapper element. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Multiline</span> | <span class="prop-type">bool</span> |   | If `true`, a textarea element will be rendered. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | Name attribute of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Placeholder</span> | <span class="prop-type">string</span> |   | The short hint displayed in the input before the user enters a value. |\r\n| <span class="prop-name">HTMLAttr.ReadOnly</span> | <span class="prop-type">bool</span> |   | It prevents the user from changing the value of the field (not from interacting with the field). |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be required. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> |   | Number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | Type of the input element. It should be a valid HTML5 input type. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback fired when the value is changed.<br><br>**Signature:**<br>`(event : FormEvent) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">InputProp.DisableUnderline</span> | <span class="prop-type">bool</span> |   | If `true`, the input will not have an underline. |\r\n| <span class="prop-name">InputProp.EndAdornment</span> | <span class="prop-type">ReactNode</span> |   | End `InputAdornment` for this component. |\r\n| <span class="prop-name">InputProp.InputComponent</span> | <span class="prop-type">ReactType</span> |   | The component used for the native input. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">InputProp.StartAdornment</span> | <span class="prop-type">ReactNode</span> |   | Start `InputAdornment` for this component. |\r\n\r\nAny other properties supplied will be spread to the root element ([InputBase](#/api/input-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.FormControl</span> | Styles applied to the root element if the component is a descendant of `FormControl`.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if the component is focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Underline</span> | Styles applied to the root element if `disableUnderline={false}`.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.Multiline</span> | Styles applied to the root element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.FullWidth</span> | Styles applied to the root element if `fullWidth={true}`.\r\n| <span class="prop-name">ClassNames.Input</span> | Styles applied to the `input` element.\r\n| <span class="prop-name">ClassNames.InputMarginDense</span> | Styles applied to the `input` element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.InputMultiline</span> | Styles applied to the `input` element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.InputType</span> | Styles applied to the `input` element if `type` is not "text"`.\r\n| <span class="prop-name">ClassNames.InputTypeSearch</span> | Styles applied to the `input` element if `type="search"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Input/Input.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiInput`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [InputBase](#/api/input-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# LinearProgress\r\n\r\n<p class="description">The API documentation of the LinearProgress React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.linearProgress (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n## ARIA\r\n\r\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">LinearProgressProp.Color</span> | <span class="prop-type">type&nbsp;LinearProgressColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">LinearProgressColor.Primary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">LinearProgressProp.Value</span> | <span class="prop-type">int</span> |   | The value of the progress indicator for the determinate and buffer variants. Value between 0 and 100. |\r\n| <span class="prop-name">LinearProgressProp.ValueBuffer</span> | <span class="prop-type">int</span> |   | The value for the buffer variant. Value between 0 and 100. |\r\n| <span class="prop-name">LinearProgressProp.Variant</span> | <span class="prop-type">type&nbsp;LinearProgressVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Determinate<br>&nbsp;&nbsp;&#124;&nbsp;Indeterminate<br>&nbsp;&nbsp;&#124;&nbsp;Buffer<br>&nbsp;&nbsp;&#124;&nbsp;Query<br></span> | <span class="prop-default">LinearProgressVariant.Indeterminate</span> | The variant to use. Use indeterminate or query when there is no progress value. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root & bar2 element if `color="primary"`; bar2 if `variant-"buffer"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root & bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`.\r\n| <span class="prop-name">ClassNames.Determinate</span> | Styles applied to the root elements if `variant="determinate"`.\r\n| <span class="prop-name">ClassNames.Indeterminate</span> | Styles applied to the root elements if `variant="determinate"`.\r\n| <span class="prop-name">ClassNames.Buffer</span> | Styles applied to the root element if `variant="buffer"`.\r\n| <span class="prop-name">ClassNames.Query</span> | Styles applied to the root element if `variant="query"`.\r\n| <span class="prop-name">ClassNames.Dashed</span> | Styles applied to the additional bar element if `variant="buffer"`.\r\n| <span class="prop-name">ClassNames.DashedColorPrimary</span> | Styles applied to the additional bar element if `variant="buffer"` & `color="primary"`.\r\n| <span class="prop-name">ClassNames.DashedColorSecondary</span> | Styles applied to the additional bar element if `variant="buffer"` & `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Bar</span> | Styles applied to the layered bar1 & bar2 elements.\r\n| <span class="prop-name">ClassNames.BarColorPrimary</span> | Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer".\r\n| <span class="prop-name">ClassNames.BarColorSecondary</span> | Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer".\r\n| <span class="prop-name">ClassNames.Bar1Indeterminate</span> | Styles applied to the bar1 element if `variant="indeterminate or query"`.\r\n| <span class="prop-name">ClassNames.Bar1Determinate</span> | Styles applied to the bar1 element if `variant="determinate"`.\r\n| <span class="prop-name">ClassNames.Bar1Buffer</span> | Styles applied to the bar1 element if `variant="buffer"`.\r\n| <span class="prop-name">ClassNames.Bar2Indeterminate</span> | Styles applied to the bar2 element if `variant="indeterminate or query"`.\r\n| <span class="prop-name">ClassNames.Bar2Determinate</span> | Styles applied to the bar2 element if `variant="determinate"`.\r\n| <span class="prop-name">ClassNames.Bar2Buffer</span> | Styles applied to the bar2 element if `variant="buffer"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/LinearProgress/LinearProgress.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiLinearProgress`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Progress](/demos/progress/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListItemAvatar\r\n\r\n<p class="description">The API documentation of the ListItemAvatar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listItemAvatar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThis is a simple wrapper to apply the `dense` mode styles to `Avatar`.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles applied to the children – typically the `Avatar` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListItemAvatar/ListItemAvatar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListItemAvatar`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListItemIcon\r\n\r\n<p class="description">The API documentation of the ListItemIcon React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listItemIcon (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nA simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListItemIcon/ListItemIcon.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListItemIcon`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListItemSecondaryAction\r\n\r\n<p class="description">The API documentation of the ListItemSecondaryAction React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listItemSecondaryAction (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListItemSecondaryAction/ListItemSecondaryAction.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListItemSecondaryAction`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListItemText\r\n\r\n<p class="description">The API documentation of the ListItemText React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listItemText (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DisableTypography</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the children won\'t be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the `children` (or `primary`) text, and optional `secondary` text with the Typography component. |\r\n| <span class="prop-name">MaterialProp.Inset</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the children will be indented. This should be used if there is no left avatar or left icon. |\r\n| <span class="prop-name">ListItemTextProp.Primary</span> | <span class="prop-type">ReactNode</span> |   | The main content element. |\r\n| <span class="prop-name">ListItemTextProp.Secondary</span> | <span class="prop-type">ReactNode</span> |   | The secondary content element. |\r\n| <span class="prop-name">ListItemTextProp.PrimaryTypographyProps</span> | <span class="prop-type">IHTMLProp list</span> |   | These props will be forwarded to the primary typography component (as long as disableTypography is not `true`). |\r\n| <span class="prop-name">ListItemTextProp.SecondaryTypographyProps</span> | <span class="prop-type">IHTMLProp list</span> |   | These props will be forwarded to the secondary typography component (as long as disableTypography is not `true`). |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Inset</span> | Styles applied to the root element if `inset={true}`.\r\n| <span class="prop-name">ClassNames.Dense</span> | Styles applied to the root element if `context.dense` is `true`.\r\n| <span class="prop-name">ClassNames.Primary</span> | Styles applied to the primary `Typography` component.\r\n| <span class="prop-name">ClassNames.Secondary</span> | Styles applied to the secondary `Typography` component.\r\n| <span class="prop-name">ClassNames.TextDense</span> | Styles applied to the `Typography` components if `context.dense` is `true`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListItemText/ListItemText.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListItemText`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListItem\r\n\r\n<p class="description">The API documentation of the ListItem React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listItem (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> |   | The component used for the root node. Either a string to use a DOM element or a component. By default, it\'s a `li` when `Button` is `false` and a `div` when `Button` is `true`. |\r\n| <span class="prop-name">MaterialProp.Dense</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, compact vertical padding designed for keyboard and mouse input will be used. |\r\n| <span class="prop-name">MaterialProp.DisableGutters</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the left and right padding is removed. |\r\n| <span class="prop-name">HTMLAttr.Selected</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Use to apply selected styling. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the list item will be disabled. |\r\n| <span class="prop-name">ListItemProp.Button</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the list item will be a button (using `ButtonBase`). |\r\n| <span class="prop-name">ListItemProp.Divider</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, a 1px light border is added to the bottom of the list item. |\r\n| <span class="prop-name">ChildrenProp.ContainerComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"li"</span> | The container component used when a `ListItemSecondaryAction` is rendered. |\r\n| <span class="prop-name">ChildrenProp.ContainerProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the container element when the component is used to display a `ListItemSecondaryAction`. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the (normally root) `component` element. May be wrapped by a `container`.\r\n| <span class="prop-name">ClassNames.Container</span> | Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.\r\n| <span class="prop-name">ClassNames.FocusVisible</span> | Styles applied to the `component`\'s `focusVisibleClassName` property if `button={true}`.\r\n| <span class="prop-name">ClassNames.Default</span> | Legacy styles applied to the root element. Use `root` instead.\r\n| <span class="prop-name">ClassNames.Dense</span> | Styles applied to the `component` element if `dense={true}` or `children` includes `Avatar`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the inner `component` element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Divider</span> | Styles applied to the inner `component` element if `divider={true}`.\r\n| <span class="prop-name">ClassNames.Gutters</span> | Styles applied to the inner `component` element if `disableGutters={false}`.\r\n| <span class="prop-name">ClassNames.Button</span> | Styles applied to the inner `component` element if `button={true}`.\r\n| <span class="prop-name">ClassNames.SecondaryAction</span> | Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.\r\n| <span class="prop-name">ClassNames.Selected</span> | Styles applied to the root element if `selected={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListItem/ListItem.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListItem`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# ListSubheader\r\n\r\n<p class="description">The API documentation of the ListSubheader React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.listSubheader (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"li"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableGutters</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the List Subheader will not have gutters. |\r\n| <span class="prop-name">MaterialProp.Inset</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the List Subheader will be indented. |\r\n| <span class="prop-name">ListSubheaderProp.Color</span> | <span class="prop-type">type&nbsp;ListSubheaderColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br></span> | <span class="prop-default">ListSubheaderColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">ListSubheaderProp.DisableSticky</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the List Subheader will not stick to the top during scroll. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorInherit</span> | Styles applied to the root element if `color="inherit"`.\r\n| <span class="prop-name">ClassNames.Gutters</span> | Styles applied to the inner `component` element if `disableGutters={false}`.\r\n| <span class="prop-name">ClassNames.Inset</span> | Styles applied to the root element if `inset={true}`.\r\n| <span class="prop-name">ClassNames.Sticky</span> | Styles applied to the root element if `disableSticky={false}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ListSubheader/ListSubheader.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiListSubheader`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Grid List](/demos/grid-list/)--\x3e\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# List\r\n\r\n<p class="description">The API documentation of the List React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.list (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"ul"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Dense</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The property is available to descendant components as the `dense` context. |\r\n| <span class="prop-name">ListProp.DisablePadding</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, vertical padding will be removed from the list. |\r\n| <span class="prop-name">ListProp.Subheader</span> | <span class="prop-type">ReactElement</span> |   | The content of the subheader, normally `ListSubheader`. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Padding</span> | Styles applied to the root element if `disablePadding={false}`.\r\n| <span class="prop-name">ClassNames.Dense</span> | Styles applied to the root element if `dense={true}` & `disablePadding={false}`.\r\n| <span class="prop-name">ClassNames.Subheader</span> | Styles applied to the root element if a `subheader` is provided.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/List/List.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiList`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Lists](/demos/lists/)--\x3e\r\n\r\n'},function(e,n){e.exports='# MenuItem\r\n\r\n<p class="description">The API documentation of the MenuItem React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.menuItem (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"li"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.DisableGutters</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the left and right padding is removed. |\r\n\r\nAny other properties supplied will be spread to the root element ([ListItem](#/api/list-item)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Gutters</span> | Styles applied to the root element if `disableGutters={false}`.\r\n| <span class="prop-name">ClassNames.Selected</span> | Styles applied to the root element if `selected={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/MenuItem/MenuItem.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiMenuItem`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ListItem](#/api/list-item) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Autocomplete](/demos/autocomplete/)--\x3e\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\r\n'},function(e,n){e.exports='# MenuList\r\n\r\n<p class="description">The API documentation of the MenuList React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.menuList (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n\r\nAny other properties supplied will be spread to the root element ([List](#/api/list)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [List](#/api/list) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Menu\r\n\r\n<p class="description">The API documentation of the Menu React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.menu (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.AnchorEl</span> | <span class="prop-type">ReactInstance</span> |   | The DOM element used to set the position of the menu. |\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.OnEnter</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the Menu enters. |\r\n| <span class="prop-name">MaterialProp.OnEntered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the Menu has entered. |\r\n| <span class="prop-name">MaterialProp.OnEntering</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the Menu is entering. |\r\n| <span class="prop-name">MaterialProp.OnExit</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the Menu exits. |\r\n| <span class="prop-name">MaterialProp.OnExited</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the Menu has exited. |\r\n| <span class="prop-name">MaterialProp.OnExiting</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the Menu is exiting. |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the menu is visible. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U3&lt;float,&nbsp;TransitionDuration&nbsp;list,&nbsp;AutoEnum&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br><br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">AutoEnum.Auto</span> | The length of the transition in `ms`, or `Auto` |\r\n| <span class="prop-name">MenuProp.DisableAutoFocusItem</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the selected / first menu item will not be auto focused. |\r\n| <span class="prop-name">ChildrenProp.MenuListProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`MenuList`](#/api/menu-list) element. |\r\n| <span class="prop-name">ChildrenProp.PopoverClasses</span> | <span class="prop-type">ClassNames list</span> |   | `classes` property applied to the [`Popover`](#/api/popover) element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Popover](#/api/popover)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Paper</span> | Styles applied to the `Paper` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Menu/Menu.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiMenu`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Popover](#/api/popover) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [App Bar](/demos/app-bar/)--\x3e\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\r\n'},function(e,n){e.exports='# MobileStepper\r\n\r\n<p class="description">The API documentation of the MobileStepper React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.mobileStepper (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MobileStepperProp.BackButton</span> | <span class="prop-type">ReactElement</span> |   | A back button element. For instance, it can be be a `Button` or a `IconButton`. |\r\n| <span class="prop-name">MobileStepperProp.ActiveStep</span> | <span class="prop-type">int</span> | <span class="prop-default">0</span> | Set the active step (zero based index). Defines which dot is highlighted when the variant is `Dots`. |\r\n| <span class="prop-name">MobileStepperProp.NextButton</span> | <span class="prop-type">ReactElement</span> |   | A next button element. For instance, it can be be a `Button` or a `IconButton`. |\r\n| <span class="prop-name">MobileStepperProp.Position</span> | <span class="prop-type">type&nbsp;MobileStepperPosition&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br>&nbsp;&nbsp;&#124;&nbsp;Top<br>&nbsp;&nbsp;&#124;&nbsp;Static<br></span> | <span class="prop-default">MobileStepperPosition.Bottom</span> | Set the positioning type. |\r\n| <span class="prop-name required">MobileStepperProp.Steps *</span> | <span class="prop-type">int</span> |   | The total steps. |\r\n| <span class="prop-name">MobileStepperProp.Variant</span> | <span class="prop-type">type&nbsp;MobileStepperVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Text<br>&nbsp;&nbsp;&#124;&nbsp;Dots<br>&nbsp;&nbsp;&#124;&nbsp;Progress<br></span> | <span class="prop-default">MobileStepperVariant.Dots</span> | The variant to use. |\r\n| <span class="prop-name">ChildrenProp.LinearProgressProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `LinearProgress` element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.PositionBottom</span> | Styles applied to the root element if `position="bottom"`.\r\n| <span class="prop-name">ClassNames.PositionTop</span> | Styles applied to the root element if `position="top"`.\r\n| <span class="prop-name">ClassNames.PositionStatic</span> | Styles applied to the root element if `position="static"`.\r\n| <span class="prop-name">ClassNames.Dots</span> | Styles applied to the dots container if `variant="dots"`.\r\n| <span class="prop-name">ClassNames.Dot</span> | Styles applied to each dot if `variant="dots"`.\r\n| <span class="prop-name">ClassNames.DotActive</span> | Styles applied to a dot if `variant="dots"` and this is the active step.\r\n| <span class="prop-name">ClassNames.Progress</span> | Styles applied to the Linear Progress component if `variant="progress"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/MobileStepper/MobileStepper.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiMobileStepper`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Modal\r\n\r\n<p class="description">The API documentation of the Modal React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.modal (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Container</span> | <span class="prop-type">ReactInstance</span> |   | A node, component instance, or function that returns either. The `container` will have the portal children appended to it. |\r\n| <span class="prop-name">MaterialProp.KeepMounted</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Always keep the children in the DOM. This property can be useful in SEO situation or when you want to maximize the responsiveness of the Modal. |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed. The `reason` parameter can optionally be used to control the response to `onClose`.<br><br>**Signature:**<br>`(event: obj) -> (reason: ModalCloseReason) -> unit`<br>*event:* The event source of the callback<br>*reason:* `type ModalCloseReason = EscapeKeyDown \\| BackdropClick` |\r\n| <span class="prop-name">MaterialProp.OnRendered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired once the children has been mounted into the `container`. It signals that the `open={true}` property took effect. |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the modal is open. |\r\n| <span class="prop-name">MaterialProp.DisablePortal</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Disable the portal behavior. The children stay within it\'s parent DOM hierarchy. |\r\n| <span class="prop-name">ModalProp.DisableAutoFocus</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the `disableAutoFocus` prop.<br>Generally this should never be set to `true` as it makes the modal less accessible to assistive technologies, like screen readers. |\r\n| <span class="prop-name">ModalProp.DisableBackdropClick</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, clicking the backdrop will not fire any callback. |\r\n| <span class="prop-name">ModalProp.DisableEnforceFocus</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to `true` as it makes the modal less accessible to assistive technologies, like screen readers. |\r\n| <span class="prop-name">ModalProp.DisableEscapeKeyDown</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, hitting escape will not fire any callback. |\r\n| <span class="prop-name">ModalProp.DisableRestoreFocus</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the modal will not restore focus to previously focused element once modal is hidden. |\r\n| <span class="prop-name">ModalProp.HideBackdrop</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the backdrop is not rendered. |\r\n| <span class="prop-name">ModalProp.Manager</span> | <span class="prop-type">obj</span> | <span class="prop-default">new ModalManager()</span> | A modal manager used to track and manage the state of open Modals. This enables customizing how modals interact within a container. |\r\n| <span class="prop-name">ModalProp.OnBackdropClick</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the backdrop is clicked. |\r\n| <span class="prop-name">ModalProp.OnEscapeKeyDown</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the escape key is pressed, `disableEscapeKeyDown` is false and the modal is in focus. |\r\n| <span class="prop-name">ChildrenProp.BackdropComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Backdrop</span> | A backdrop component. This property enables custom backdrop rendering. |\r\n| <span class="prop-name">ChildrenProp.BackdropProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Backdrop`](#/api/backdrop) element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Hidden</span> | Styles applied to the root element if the `Modal` has exited.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Modal/Modal.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiModal`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Modal](/utils/modal/)--\x3e\r\n\r\n'},function(e,n){e.exports='# MuiThemeProvider\r\n\r\n<p class="description">The API documentation of the MuiThemeProvider React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.muiThemeProvider (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThis component takes a `MuiThemeProviderProp.Theme` property.\r\nIt makes the `theme` available down the React tree thanks to React context.\r\nThis component should preferably be used at **the root of your component tree**.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name required">MuiThemeProviderProp.Theme *</span> | <span class="prop-type">type&nbsp;[&lt;Erase&gt;]&nbsp;ProviderTheme&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Theme&nbsp;of&nbsp;Themes.ITheme<br>&nbsp;&nbsp;&#124;&nbsp;Func&nbsp;of&nbsp;(Themes.ITheme-&gt;Themes.ITheme)<br></span> |   | A theme object. |\r\n| <span class="prop-name">MuiThemeProviderProp.DisableStylesGeneration</span> | <span class="prop-type">bool</span> |   | You can disable the generation of the styles with this option. It can be useful when traversing the React tree outside of the HTML rendering step on the server. Let\'s say you are using react-apollo to extract all the queries made by the interface server side. You can significantly speed up the traversal with this property. |\r\n| <span class="prop-name">MuiThemeProviderProp.SheetsManager</span> | <span class="prop-type">obj</span> |   | The sheetsManager is used to deduplicate style sheet injection in the page. It\'s deduplicating using the (theme, styles) couple. On the server, you should provide a new instance for each request. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n'},function(e,n){e.exports='# NativeSelect\r\n\r\n<p class="description">The API documentation of the NativeSelect React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.nativeSelect (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nAn alternative to `<Select native />` with a much smaller bundle size footprint.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `select` element. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback function fired when a menu item is selected.<br><br>**Signature:**<br>`(event : FormEvent) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">NativeSelectProp.Input</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">&lt;Input /></span> | An `Input` element; does not have to be a material-ui specific `Input`. |\r\n| <span class="prop-name">NativeSelectProp.Variant</span> | <span class="prop-type">type&nbsp;NativeSelectVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> |   | The variant to use. |\r\n| <span class="prop-name">ChildrenProp.IconComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">ArrowDropDownIcon</span> | The icon that displays the arrow. |\r\n\r\nAny other properties supplied will be spread to the root element ([Input](#/api/input)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the `Input` component `root` class.\r\n| <span class="prop-name">ClassNames.Select</span> | Styles applied to the `Input` component `select` class.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the `Input` component if `variant="filled"`.\r\n| <span class="prop-name">ClassNames.Outlined</span> | Styles applied to the `Input` component if `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.SelectMenu</span> | Styles applied to the `Input` component `selectMenu` class.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the `Input` component `disabled` class.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles applied to the `Input` component `icon` class.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/NativeSelect/NativeSelect.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiNativeSelect`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Input](#/api/input) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selects](/demos/selects/)--\x3e\r\n\r\n'},function(e,n){e.exports='# OutlinedInput\r\n\r\n<p class="description">The API documentation of the OutlinedInput React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.outlinedInput (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DefaultValue</span> | <span class="prop-type">obj</span> |   | The default input value, useful when not controlling the component. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the input will indicate an error. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> |   | If `true`, the input will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> |   | If `Dense`, will adjust vertical spacing. This is normally obtained via context from FormControl. |\r\n| <span class="prop-name">MaterialProp.RowsMax</span> | <span class="prop-type">int</span> |   | Maximum number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value, required for a controlled component. |\r\n| <span class="prop-name">HTMLAttr.AutoComplete</span> | <span class="prop-type">string</span> |   | This property helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\'s more like an autofill. You can learn more about it here: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill |\r\n| <span class="prop-name">HTMLAttr.AutoFocus</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be focused during the first mount. |\r\n| <span class="prop-name">HTMLAttr.ClassName</span> | <span class="prop-type">string</span> |   | The CSS class name of the wrapper element. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Multiline</span> | <span class="prop-type">bool</span> |   | If `true`, a textarea element will be rendered. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | Name attribute of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Placeholder</span> | <span class="prop-type">string</span> |   | The short hint displayed in the input before the user enters a value. |\r\n| <span class="prop-name">HTMLAttr.ReadOnly</span> | <span class="prop-type">bool</span> |   | It prevents the user from changing the value of the field (not from interacting with the field). |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be required. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> |   | Number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | Type of the input element. It should be a valid HTML5 input type. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">FormEvent->unit</span> |   | Callback fired when the value is changed.<br><br>**Signature:**<br>`(event : FormEvent) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">OutlinedInputProp.StartAdornment</span> | <span class="prop-type">ReactNode</span> |   | Start `InputAdornment` for this component. |\r\n| <span class="prop-name">OutlinedInputProp.EndAdornment</span> | <span class="prop-type">ReactNode</span> |   | End `InputAdornment` for this component. |\r\n| <span class="prop-name">OutlinedInputProp.InputComponent</span> | <span class="prop-type">ReactType</span> |   | The component used for the native input. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name required">OutlinedInputProp.LabelWidth *</span> | <span class="prop-type">int</span> |   | The width of the legend. |\r\n| <span class="prop-name">OutlinedInputProp.Notched</span> | <span class="prop-type">bool</span> |   | If `true`, the outline is notched to accommodate the label. |\r\n\r\nAny other properties supplied will be spread to the root element ([InputBase](#/api/input-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Focused</span> | Styles applied to the root element if the component is focused.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.AdornedStart</span> | Styles applied to the root element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.AdornedEnd</span> | Styles applied to the root element if `endAdornment` is provided.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n| <span class="prop-name">ClassNames.Multiline</span> | Styles applied to the root element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.NotchedOutline</span> | Styles applied to the `NotchedOutline` element.\r\n| <span class="prop-name">ClassNames.Input</span> | Styles applied to the `input` element.\r\n| <span class="prop-name">ClassNames.InputMarginDense</span> | Styles applied to the `input` element if `margin="dense"`.\r\n| <span class="prop-name">ClassNames.InputMultiline</span> | Styles applied to the `input` element if `multiline={true}`.\r\n| <span class="prop-name">ClassNames.InputAdornedStart</span> | Styles applied to the `input` element if `startAdornment` is provided.\r\n| <span class="prop-name">ClassNames.InputAdornedEnd</span> | Styles applied to the `input` element if `endAdornment` is provided.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/OutlinedInput/OutlinedInput.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiOutlinedInput`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [InputBase](#/api/input-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# Paper\r\n\r\n<p class="description">The API documentation of the Paper React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.Paper (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.Elevation</span> | <span class="prop-type">int</span> | <span class="prop-default">2</span> | Shadow depth, corresponds to `dp` in the spec. It\'s accepting values between 0 and 24 inclusive. |\r\n| <span class="prop-name">PaperProp.Square</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, rounded corners are disabled. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Rounded</span> | Styles applied to the root element if `square={false}`.\r\n| <span class="prop-name">ClassNames.Elevation0</span> | \r\n| <span class="prop-name">ClassNames.Elevation1</span> | \r\n| <span class="prop-name">ClassNames.Elevation2</span> | \r\n| <span class="prop-name">ClassNames.Elevation3</span> | \r\n| <span class="prop-name">ClassNames.Elevation4</span> | \r\n| <span class="prop-name">ClassNames.Elevation5</span> | \r\n| <span class="prop-name">ClassNames.Elevation6</span> | \r\n| <span class="prop-name">ClassNames.Elevation7</span> | \r\n| <span class="prop-name">ClassNames.Elevation8</span> | \r\n| <span class="prop-name">ClassNames.Elevation9</span> | \r\n| <span class="prop-name">ClassNames.Elevation10</span> | \r\n| <span class="prop-name">ClassNames.Elevation11</span> | \r\n| <span class="prop-name">ClassNames.Elevation12</span> | \r\n| <span class="prop-name">ClassNames.Elevation13</span> | \r\n| <span class="prop-name">ClassNames.Elevation14</span> | \r\n| <span class="prop-name">ClassNames.Elevation15</span> | \r\n| <span class="prop-name">ClassNames.Elevation16</span> | \r\n| <span class="prop-name">ClassNames.Elevation17</span> | \r\n| <span class="prop-name">ClassNames.Elevation18</span> | \r\n| <span class="prop-name">ClassNames.Elevation19</span> | \r\n| <span class="prop-name">ClassNames.Elevation20</span> | \r\n| <span class="prop-name">ClassNames.Elevation21</span> | \r\n| <span class="prop-name">ClassNames.Elevation22</span> | \r\n| <span class="prop-name">ClassNames.Elevation23</span> | \r\n| <span class="prop-name">ClassNames.Elevation24</span> | \r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Paper/Paper.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiPaper`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Autocomplete](/demos/autocomplete/)--\x3e\r\n\x3c!--- [Cards](/demos/cards/)--\x3e\r\n\x3c!--- [Paper](/demos/paper/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Popover\r\n\r\n<p class="description">The API documentation of the Popover React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.Popover (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.AnchorEl</span> | <span class="prop-type">ReactInstance</span> |   | This is the DOM element, or a function that returns the DOM element, that may be used to set the position of the popover. |\r\n| <span class="prop-name">MaterialProp.Container</span> | <span class="prop-type">ReactType</span> |   | A node, component instance, or function that returns either. The `container` will passed to the Modal component. By default, it uses the body of the anchorEl\'s top-level document object, so it\'s simply `document.body` most of the time. |\r\n| <span class="prop-name">MaterialProp.Elevation</span> | <span class="prop-type">int</span> | <span class="prop-default">8</span> | The elevation of the popover. |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback. |\r\n| <span class="prop-name">MaterialProp.OnEnter</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the component is entering. |\r\n| <span class="prop-name">MaterialProp.OnEntered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component has entered. |\r\n| <span class="prop-name">MaterialProp.OnEntering</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component is entering. |\r\n| <span class="prop-name">MaterialProp.OnExit</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the component is exiting. |\r\n| <span class="prop-name">MaterialProp.OnExited</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component has exited. |\r\n| <span class="prop-name">MaterialProp.OnExiting</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component is exiting. |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the popover is visible. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U3&lt;float,&nbsp;TransitionDuration&nbsp;list,&nbsp;AutoEnum&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br><br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">AutoEnum.Auto</span> | Set to "auto" to automatically calculate transition time based on height. |\r\n| <span class="prop-name">PopoverProp.Action</span> | <span class="prop-type">(IPopoverActions->unit)<br><br>type&nbsp;IPopoverActions&nbsp;=<br>&nbsp;&nbsp;abstract&nbsp;updatePosition:&nbsp;unit&nbsp;-&gt;&nbsp;unit<br></span> |   | This is callback property. It\'s called by the component on mount. This is useful when you want to trigger an action programmatically. It currently only supports updatePosition() action.<br><br>**Signature:**<br>`(actions: IPopoverActions) -> unit`<br>*actions:* This object contains all posible actions that can be triggered programmatically. |\r\n| <span class="prop-name">PopoverProp.AnchorOrigin</span> | <span class="prop-type">type&nbsp;PopoverOrigin&nbsp;=<br>&nbsp;&nbsp;{&nbsp;horizontal:&nbsp;PopoverHorizontalOrigin<br>&nbsp;&nbsp;&nbsp;&nbsp;vertical:&nbsp;PopoverVerticalOrigin&nbsp;}<br><br>type&nbsp;PopoverHorizontalOrigin&nbsp;=&nbsp;U2&lt;int,PopoverHorizontalPosition&gt;<br>type&nbsp;PopoverVerticalOrigin&nbsp;=&nbsp;U2&lt;int,PopoverVerticalPosition&gt;<br><br>type&nbsp;PopoverHorizontalPosition&nbsp;=&nbsp;Left&nbsp;&#124;&nbsp;Center&nbsp;&#124;&nbsp;Right<br>type&nbsp;PopoverVerticalPosition&nbsp;=&nbsp;Top&nbsp;&#124;&nbsp;Center&nbsp;&#124;&nbsp;Bottom<br></span> | <span class="prop-default">{  vertical: "top",  horizontal: "left",}</span> | This is the point on the anchor where the popover\'s `anchorEl` will attach to. This is not used when the anchorReference is "anchorPosition".<br>Options: vertical: [top, center, bottom]; horizontal: [left, center, right]. |\r\n| <span class="prop-name">PopoverProp.AnchorPosition</span> | <span class="prop-type">type&nbsp;AnchorPosition&nbsp;=<br>&nbsp;&nbsp;{&nbsp;left:&nbsp;int<br>&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;int&nbsp;}<br></span> |   | This is the position that may be used to set the position of the popover. The coordinates are relative to the application\'s client area. |\r\n| <span class="prop-name">PopoverProp.AnchorReference</span> | <span class="prop-type">type&nbsp;AnchorReference&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;AnchorEl<br>&nbsp;&nbsp;&#124;&nbsp;AnchorPosition<br>&nbsp;&nbsp;&#124;&nbsp;None<br></span> | <span class="prop-default">AnchorReference.AnchorEl</span> |  |\r\n| <span class="prop-name">PopoverProp.GetContentAnchorEl</span> | <span class="prop-type">obj->obj</span> |   | This function is called in order to retrieve the content anchor element. It\'s the opposite of the `anchorEl` property. The content anchor element should be an element inside the popover. It\'s used to correctly scroll and set the position of the popover. The positioning strategy tries to make the content anchor element just above the anchor element. |\r\n| <span class="prop-name">PopoverProp.MarginThreshold</span> | <span class="prop-type">int</span> | <span class="prop-default">16</span> | Specifies how close to the edge of the window the popover can appear. |\r\n| <span class="prop-name">PopoverProp.TransformOrigin</span> | <span class="prop-type">type&nbsp;PopoverOrigin&nbsp;=<br>&nbsp;&nbsp;{&nbsp;horizontal:&nbsp;PopoverHorizontalOrigin<br>&nbsp;&nbsp;&nbsp;&nbsp;vertical:&nbsp;PopoverVerticalOrigin&nbsp;}<br><br>type&nbsp;PopoverHorizontalOrigin&nbsp;=&nbsp;U2&lt;int,PopoverHorizontalPosition&gt;<br>type&nbsp;PopoverVerticalOrigin&nbsp;=&nbsp;U2&lt;int,PopoverVerticalPosition&gt;<br><br>type&nbsp;PopoverHorizontalPosition&nbsp;=&nbsp;Left&nbsp;&#124;&nbsp;Center&nbsp;&#124;&nbsp;Right<br>type&nbsp;PopoverVerticalPosition&nbsp;=&nbsp;Top&nbsp;&#124;&nbsp;Center&nbsp;&#124;&nbsp;Bottom<br></span> | <span class="prop-default">{  vertical: "top",  horizontal: "left",}</span> | This is the point on the popover which will attach to the anchor\'s origin.<br>Options: vertical: [top, center, bottom, x(px)]; horizontal: [left, center, right, x(px)]. |\r\n| <span class="prop-name">ChildrenProp.ModalClasses</span> | <span class="prop-type">ClassNames list</span> |   | `classes` property applied to the [`Modal`](#/api/modal) element. |\r\n| <span class="prop-name">ChildrenProp.PaperProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Paper`](#/api/paper) element. |\r\n| <span class="prop-name">ChildrenProp.TransitionComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Grow</span> | Transition component. |\r\n| <span class="prop-name">ChildrenProp.TransitionProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Transition` element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Modal](#/api/modal)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Paper</span> | Styles applied to the `Paper` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Popover/Popover.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiPopover`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Modal](#/api/modal) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\x3c!--- [Popover](/utils/popover/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Popper\r\n\r\n<p class="description">The API documentation of the Popper React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.Popper (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nPoppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.AnchorEl</span> | <span class="prop-type">ReactInstance</span> |   | This is the DOM element, or a function that returns the DOM element, that may be used to set the position of the popover. The return value will passed as the reference object of the Popper instance. |\r\n| <span class="prop-name">MaterialProp.Container</span> | <span class="prop-type">ReactType</span> |   | A node, component instance, or function that returns either. The `container` will passed to the Modal component. By default, it uses the body of the anchorEl\'s top-level document object, so it\'s simply `document.body` most of the time. |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the popper is visible. |\r\n| <span class="prop-name">MaterialProp.DisablePortal</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Disable the portal behavior. The children stay within it\'s parent DOM hierarchy. |\r\n| <span class="prop-name">MaterialProp.KeepMounted</span> | <span class="prop-type">bool</span> |   | Always keep the children in the DOM. This property can be useful in SEO situation or when you want to maximize the responsiveness of the Popper. |\r\n| <span class="prop-name">MaterialProp.Placement</span> | <span class="prop-type">type&nbsp;PlacementType&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;BottomEnd<br>&nbsp;&nbsp;&#124;&nbsp;BottomStart<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br>&nbsp;&nbsp;&#124;&nbsp;LeftEnd<br>&nbsp;&nbsp;&#124;&nbsp;LeftStart<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;RightEnd<br>&nbsp;&nbsp;&#124;&nbsp;RightStart<br>&nbsp;&nbsp;&#124;&nbsp;Right<br>&nbsp;&nbsp;&#124;&nbsp;TopEnd<br>&nbsp;&nbsp;&#124;&nbsp;TopStart<br>&nbsp;&nbsp;&#124;&nbsp;Top<br></span> | <span class="prop-default">PlacementType.Bottom</span> | Popper placement. |\r\n| <span class="prop-name">PopperProp.Modifiers</span> | <span class="prop-type">obj</span> |   | Popper.js is based on a "plugin-like" architecture, most of its features are fully encapsulated "modifiers".<br>A modifier is a function that is called each time Popper.js needs to compute the position of the popper. For this reason, modifiers should be very performant to avoid bottlenecks. To learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object). |\r\n| <span class="prop-name">PopperProp.PopperOptions</span> | <span class="prop-type">obj</span> |   | Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance. |\r\n| <span class="prop-name">PopperProp.Transition</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Help supporting a react-transition-group/Transition component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Autocomplete](/demos/autocomplete/)--\x3e\r\n\x3c!--- [Menus](/demos/menus/)--\x3e\r\n\x3c!--- [Popper](/utils/popper/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Portal\r\n\r\n<p class="description">The API documentation of the Portal React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.Portal (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nPortals provide a first-class way to render children into a DOM node\r\nthat exists outside the DOM hierarchy of the parent component.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Container</span> | <span class="prop-type">ReactInstance</span> |   | A node, component instance, or function that returns either. The `container` will have the portal children appended to it. By default, it uses the body of the top-level document object, so it\'s simply `document.body` most of the time. |\r\n| <span class="prop-name">MaterialProp.DisablePortal</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Disable the portal behavior. The children stay within it\'s parent DOM hierarchy. |\r\n| <span class="prop-name">MaterialProp.OnRendered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired once the children has been mounted into the `container`. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Portal](/utils/portal/)--\x3e\r\n\r\n'},function(e,n){e.exports='# RadioGroup\r\n\r\n<p class="description">The API documentation of the RadioGroup React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.radioGroup (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | The name used to reference the value of the control. |\r\n| <span class="prop-name">RadioGroupProp.OnChange</span> | <span class="prop-type">obj->string->unit</span> |   | Callback fired when a radio button is selected.<br><br>**Signature:**<br>`(event: obj) -> (value: string) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`.<br>*value:* The `value` of the selected radio button |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | Value of the selected radio button. |\r\n\r\nAny other properties supplied will be spread to the root element ([FormGroup](#/api/form-group)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [FormGroup](#/api/form-group) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Radio\r\n\r\n<p class="description">The API documentation of the Radio React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.radio (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Secondary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.CheckedIcon</span> | <span class="prop-type">ReactNode</span> |   | The icon to display when the component is checked. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | The icon to display when the component is unchecked. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The value of the component. |\r\n| <span class="prop-name">HTMLAttr.Checked</span> | <span class="prop-type">bool</span> |   | If `true`, the component is checked. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the switch will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | The input component property `type`. |\r\n| <span class="prop-name">SelectionControlProp.OnChange</span> | <span class="prop-type">FormEvent->bool->unit</span> |   | Callback fired when the state is changed.<br><br>**Signature:**<br>`(event: obj) -> (checked: bool) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`.<br>*checked:* The `checked` value of the switch |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Checked</span> | Styles applied to the root element if `checked={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Radio/Radio.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiRadio`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# RootRef\r\n\r\n<p class="description">The API documentation of the RootRef React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.rootRef (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nHelper component to allow attaching a ref to a\r\nwrapped element to access the underlying DOM element.\r\n\r\nIt\'s highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\r\nFor example:\r\n```fsharp\r\nopen Fable.Core\r\nopen Fable.Import.React\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\ntype MyComponent() =\r\n    inherit Component<unit,unit>()\r\n    let domRef = createRef()\r\n\r\n    override __.componentDidMount() =\r\n        Fable.Import.Browser.console.log(domRef?current)\r\n    \r\n    override __.render() =\r\n        rootRef [ RootRefProp.RootRef (domRef |> U2.Case1) ] [\r\n            someChildComponent\r\n        ]\r\n```\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name required">RootRefProp.RootRef *</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Provide a way to access the DOM node of the wrapped element. You can provide a callback ref or a `React.createRef()` ref. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n'},function(e,n){e.exports='# Select\r\n\r\n<p class="description">The API documentation of the Select React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.select (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. When `native` is `true`, the attributes are applied on the `select` element. |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed. Use in controlled mode (see open).<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.OnOpen</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be opened. Use in controlled mode (see open).<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.Open</span> | <span class="prop-type">bool</span> |   | Control `select` open state. You can only use it when the `native` property is `false` (default). |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The input value. This property is required when the `native` property is `false` (default). |\r\n| <span class="prop-name">HTMLAttr.Multiple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, `value` must be an array and the menu will support multiple selections. You can only use it when the `native` property is `false` (default). |\r\n| <span class="prop-name">SelectProp.AutoWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If true, the width of the popover will automatically be set according to the items inside the menu, otherwise it will be at least the width of the select input. |\r\n| <span class="prop-name">SelectProp.DisplayEmpty</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the selected item is displayed even if its value is empty. You can only use it when the `native` property is `false` (default). |\r\n| <span class="prop-name">SelectProp.Input</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">&lt;Input /></span> | An `Input` element; does not have to be a material-ui specific `Input`. |\r\n| <span class="prop-name">SelectProp.Native</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the component will be using a native `select` element. |\r\n| <span class="prop-name">SelectProp.OnChange</span> | <span class="prop-type">obj->obj->unit</span> |   | Callback function fired when a menu item is selected.<br><br>**Signature:**<br>`(event: obj) -> (child: obj) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`.<br>*child:* The react element that was selected when `native` is `false` (default). |\r\n| <span class="prop-name">SelectProp.RenderValue</span> | <span class="prop-type">func</span> |   | Render the selected value. You can only use it when the `native` property is `false` (default).<br><br>**Signature:**<br>`function(value: any) => ReactElement`<br>*value:* The `value` provided to the component. |\r\n| <span class="prop-name">SelectProp.Variant</span> | <span class="prop-type">type&nbsp;SelectVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> |   | The variant to use. |\r\n| <span class="prop-name">ChildrenProp.MenuProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Menu`](#/api/menu) element. |\r\n| <span class="prop-name">ChildrenProp.IconComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">ArrowDropDownIcon</span> | The icon that displays the arrow. |\r\n| <span class="prop-name">ChildrenProp.SelectDisplayProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the clickable div element. |\r\n\r\nAny other properties supplied will be spread to the root element ([Input](#/api/input)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the `Input` component `root` class.\r\n| <span class="prop-name">ClassNames.Select</span> | Styles applied to the `Input` component `select` class.\r\n| <span class="prop-name">ClassNames.Filled</span> | Styles applied to the `Input` component if `variant="filled"`.\r\n| <span class="prop-name">ClassNames.Outlined</span> | Styles applied to the `Input` component if `variant="outlined"`.\r\n| <span class="prop-name">ClassNames.SelectMenu</span> | Styles applied to the `Input` component `selectMenu` class.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the `Input` component `disabled` class.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles applied to the `Input` component `icon` class.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Select/Select.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiSelect`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Input](#/api/input) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selects](/demos/selects/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Slide\r\n\r\n<p class="description">The API documentation of the Slide React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.slide (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe Slide transition is used by the [Snackbar](#/api/snackbars/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">SlideProp.Direction</span> | <span class="prop-type">type&nbsp;SlideDirection&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br>&nbsp;&nbsp;&#124;&nbsp;Up<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;Right<br></span> | <span class="prop-default">SlideDirection.Down</span> | Direction the child node will enter from. |\r\n| <span class="prop-name">MaterialProp.In</span> | <span class="prop-type">bool</span> |   | If `true`, show the component; triggers the enter or exit animation. |\r\n| <span class="prop-name">MaterialProp.Timeout</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{  enter: duration.enteringScreen,  exit: duration.leavingScreen,}</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n\r\nAny other properties supplied will be spread to the root element ([Transition](https://reactcommunity.org/react-transition-group/#Transition)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Transition](https://reactcommunity.org/react-transition-group/#Transition) component, from react-transition-group, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Dialogs](/demos/dialogs/)--\x3e\r\n\x3c!--- [Transitions](/utils/transitions/)--\x3e\r\n\r\n'},function(e,n){e.exports='# SnackbarContent\r\n\r\n<p class="description">The API documentation of the SnackbarContent React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.snackbarContent (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">SnackbarProp.Action</span> | <span class="prop-type">ReactElement</span> |   | The action to display. |\r\n| <span class="prop-name">SnackbarProp.Message</span> | <span class="prop-type">ReactElement</span> |   | The message to display. |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Message</span> | Styles applied to the message wrapper element.\r\n| <span class="prop-name">ClassNames.Action</span> | Styles applied to the action wrapper element if `action` is provided.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/SnackbarContent/SnackbarContent.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiSnackbarContent`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Snackbars](/demos/snackbars/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Snackbar\r\n\r\n<p class="description">The API documentation of the Snackbar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.snackbar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed. Typically `onClose` is used to set state in the parent component, which is used to control the `Snackbar` `open` prop. The `reason` parameter can optionally be used to control the response to `onClose`, for example ignoring `clickaway`.<br><br>**Signature:**<br>`function(event: object, reason: string) => void`<br>*event:* The event source of the callback<br>*reason:* Can be:`"timeout"` (`autoHideDuration` expired) or: `"clickaway"` |\r\n| <span class="prop-name">MaterialProp.OnEnter</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the transition is entering. |\r\n| <span class="prop-name">MaterialProp.OnEntered</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the transition has entered. |\r\n| <span class="prop-name">MaterialProp.OnEntering</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the transition is entering. |\r\n| <span class="prop-name">MaterialProp.OnExit</span> | <span class="prop-type">obj->unit</span> |   | Callback fired before the transition is exiting. |\r\n| <span class="prop-name">MaterialProp.OnExited</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the transition has exited. |\r\n| <span class="prop-name">MaterialProp.OnExiting</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the transition is exiting. |\r\n| <span class="prop-name">MaterialProp.Open</span> | <span class="prop-type">bool</span> |   | If true, `Snackbar` is open. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{  enter: duration.enteringScreen,  exit: duration.leavingScreen,}</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n| <span class="prop-name">Prop.Key</span> | <span class="prop-type">string</span> |   | When displaying multiple consecutive Snackbars from a parent rendering a single &lt;Snackbar/>, add the key property to ensure independent treatment of each message. e.g. &lt;Snackbar key={message} />, otherwise, the message may update-in-place and features such as autoHideDuration may be canceled. |\r\n| <span class="prop-name">SnackbarProp.Action</span> | <span class="prop-type">ReactElement</span> |   | The action to display. |\r\n| <span class="prop-name">SnackbarProp.AnchorOrigin</span> | <span class="prop-type">type&nbsp;SnackbarOrigin&nbsp;=<br>&nbsp;&nbsp;{&nbsp;vertical:&nbsp;SnackbarVerticalOrigin<br>&nbsp;&nbsp;&nbsp;&nbsp;horizontal:&nbsp;SnackbarHorizontalOrigin&nbsp;}<br><br>type&nbsp;SnackbarHorizontalOrigin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;Right<br><br>type&nbsp;SnackbarVerticalOrigin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Top<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br></span> | <span class="prop-default">{ vertical&nbsp;=&nbsp;SnackbarVerticalOrigin.Bottom<br>&nbsp;&nbsp;horizontal&nbsp;=&nbsp;SnackbarHorizontalOrigin.Center&nbsp;}</span> | The anchor of the `Snackbar`. |\r\n| <span class="prop-name">SnackbarProp.AutoHideDuration</span> | <span class="prop-type">int</span> |   | The number of milliseconds to wait before automatically calling the `onClose` function. `onClose` should then set the state of the `open` prop to hide the Snackbar. This behavior is disabled by default with the `null` value. |\r\n| <span class="prop-name">SnackbarProp.DisableWindowBlurListener</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the `autoHideDuration` timer will expire even if the window is not focused. |\r\n| <span class="prop-name">SnackbarProp.Message</span> | <span class="prop-type">ReactElement</span> |   | The message to display. |\r\n| <span class="prop-name">SnackbarProp.ResumeHideDuration</span> | <span class="prop-type">int</span> |   | The number of milliseconds to wait before dismissing after user interaction. If `autoHideDuration` property isn\'t specified, it does nothing. If `autoHideDuration` property is specified but `resumeHideDuration` isn\'t, we default to `autoHideDuration / 2` ms. |\r\n| <span class="prop-name">ChildrenProp.ClickAwayListenerProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `ClickAwayListener` element. |\r\n| <span class="prop-name">ChildrenProp.ContentProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`SnackbarContent`](#/api/snackbar-content) element. |\r\n| <span class="prop-name">ChildrenProp.TransitionComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Slide</span> | Transition component. |\r\n| <span class="prop-name">ChildrenProp.TransitionProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Transition` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.AnchorOriginTopCenter</span> | Styles applied to the root element if `anchorOrigin={{ "top", "center" }}`.\r\n| <span class="prop-name">ClassNames.AnchorOriginBottomCenter</span> | Styles applied to the root element if `anchorOrigin={{ "bottom", "center" }}`.\r\n| <span class="prop-name">ClassNames.AnchorOriginTopRight</span> | Styles applied to the root element if `anchorOrigin={{ "top", "right" }}`.\r\n| <span class="prop-name">ClassNames.AnchorOriginBottomRight</span> | Styles applied to the root element if `anchorOrigin={{ "bottom", "right" }}`.\r\n| <span class="prop-name">ClassNames.AnchorOriginTopLeft</span> | Styles applied to the root element if `anchorOrigin={{ "top", "left" }}`.\r\n| <span class="prop-name">ClassNames.AnchorOriginBottomLeft</span> | Styles applied to the root element if `anchorOrigin={{ "bottom", "left" }}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Snackbar/Snackbar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiSnackbar`.\r\n\r\n## Demos\r\n\r\n- [Snackbars](/demos/snackbars/)\r\n\r\n'},function(e,n){e.exports='# StepButton\r\n\r\n<p class="description">The API documentation of the StepButton React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepButton (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | The icon displayed by the step label. |\r\n| <span class="prop-name">MaterialProp.Optional</span> | <span class="prop-type">ReactNode</span> |   | The optional node to display. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Horizontal</span> | Styles applied to the root element if `orientation="horizontal"`.\r\n| <span class="prop-name">ClassNames.Vertical</span> | Styles applied to the root element if `orientation="vertical"`.\r\n| <span class="prop-name">ClassNames.TouchRipple</span> | Styles applied to the `ButtonBase` touch-ripple.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/StepButton/StepButton.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepButton`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# StepConnector\r\n\r\n<p class="description">The API documentation of the StepConnector React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepConnector (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Horizontal</span> | Styles applied to the root element if `orientation="horizontal"`.\r\n| <span class="prop-name">ClassNames.Vertical</span> | Styles applied to the root element if `orientation="vertical"`.\r\n| <span class="prop-name">ClassNames.AlternativeLabel</span> | Styles applied to the root element if `alternativeLabel={true}`.\r\n| <span class="prop-name">ClassNames.Active</span> | Styles applied to the root element if `active={true}`.\r\n| <span class="prop-name">ClassNames.Completed</span> | Styles applied to the root element if `completed={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.Line</span> | Styles applied to the line element.\r\n| <span class="prop-name">ClassNames.LineHorizontal</span> | Styles applied to the root element if `orientation="horizontal"`.\r\n| <span class="prop-name">ClassNames.LineVertical</span> | Styles applied to the root element if `orientation="vertical"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/StepConnector/StepConnector.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepConnector`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# StepContent\r\n\r\n<p class="description">The API documentation of the StepContent React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepContent (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">ChildrenProp.TransitionComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Collapse</span> | Collapse component. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U3&lt;float,&nbsp;TransitionDuration&nbsp;list,&nbsp;AutoEnum&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br><br>type&nbsp;AutoEnum&nbsp;=&nbsp;Auto<br></span> | <span class="prop-default">Auto</span> | Adjust the duration of the content expand transition. Passed as a property to the transition component.<br>Set to `Auto` to automatically calculate transition time based on height. |\r\n| <span class="prop-name">ChildrenProp.TransitionProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Transition` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Last</span> | Styles applied to the root element if `last={true}` (controlled by `Step`).\r\n| <span class="prop-name">ClassNames.Transition</span> | Styles applied to the Transition component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/StepContent/StepContent.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepContent`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# StepIcon\r\n\r\n<p class="description">The API documentation of the StepIcon React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepIcon (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Active</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Whether this step is active. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as failed. |\r\n| <span class="prop-name required">MaterialProp.Icon *</span> | <span class="prop-type">ReactNode</span> |   | The icon displayed by the step label. |\r\n| <span class="prop-name">StepProp.Completed</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as completed. Is passed to child components. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Text</span> | Styles applied to the SVG text element.\r\n| <span class="prop-name">ClassNames.Active</span> | Styles applied to the root element if `active={true}`.\r\n| <span class="prop-name">ClassNames.Completed</span> | Styles applied to the root element if `completed={true}`.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element if `error={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/StepIcon/StepIcon.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepIcon`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# StepLabel\r\n\r\n<p class="description">The API documentation of the StepLabel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepLabel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as failed. |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | Override the default icon. |\r\n| <span class="prop-name">MaterialProp.Optional</span> | <span class="prop-type">ReactNode</span> |   | The optional node to display. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as disabled, will also disable the button if `StepLabelButton` is a child of `StepLabel`. Is passed to child components. |\r\n| <span class="prop-name">ChildrenProp.StepIconComponent</span> | <span class="prop-type">ReactType</span> |   | The component to render in place of the [`StepIcon`](#/api/step-icon). |\r\n| <span class="prop-name">ChildrenProp.StepIconProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`StepIcon`](#/api/step-icon) element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Horizontal</span> | Styles applied to the root element if `orientation="horiizontal".\r\n| <span class="prop-name">ClassNames.Vertical</span> | Styles applied to the root element if `orientation="vertical".\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the `Typography` component which wraps `children`.\r\n| <span class="prop-name">ClassNames.Active</span> | Styles applied to the `Typography` component if `active={true}`.\r\n| <span class="prop-name">ClassNames.Completed</span> | Styles applied to the `Typography` component if `completed={true}`.\r\n| <span class="prop-name">ClassNames.Error</span> | Styles applied to the root element and `Typography` component if `error={true}`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element and `Typography` component if `disabled={true}`.\r\n| <span class="prop-name">ClassNames.IconContainer</span> | Styles applied to the `icon` container element.\r\n| <span class="prop-name">ClassNames.AlternativeLabel</span> | Styles applied to the root & icon container and `Typography` if `alternativeLabel={true}`.\r\n| <span class="prop-name">ClassNames.LabelContainer</span> | Styles applied to the container element which wraps `Typography` and `optional`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/StepLabel/StepLabel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepLabel`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Step\r\n\r\n<p class="description">The API documentation of the Step React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.step (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Active</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Sets the step as active. Is passed to child components. |\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as disabled, will also disable the button if `StepButton` is a child of `Step`. Is passed to child components. |\r\n| <span class="prop-name">StepProp.Completed</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Mark the step as completed. Is passed to child components. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Horizontal</span> | Styles applied to the root element if `orientation="horizontal"`.\r\n| <span class="prop-name">ClassNames.Vertical</span> | Styles applied to the root element if `orientation="vertical"`.\r\n| <span class="prop-name">ClassNames.AlternativeLabel</span> | Styles applied to the root element if `alternativeLabel={true}`.\r\n| <span class="prop-name">ClassNames.Completed</span> | Styles applied to the root element if `completed={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Step/Step.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStep`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Stepper\r\n\r\n<p class="description">The API documentation of the Stepper React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.stepper (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">StepperProp.ActiveStep</span> | <span class="prop-type">int</span> | <span class="prop-default">0</span> | Set the active step (zero based index). |\r\n| <span class="prop-name">StepperProp.AlternativeLabel</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If set to "true" and orientation is horizontal, then the step label will be positioned under the icon. |\r\n| <span class="prop-name">StepperProp.Connector</span> | <span class="prop-type">ReactElement</span> | <span class="prop-default">&lt;StepConnector /></span> | A component to be placed between each step. |\r\n| <span class="prop-name">StepperProp.NonLinear</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If set the `Stepper` will not assist in controlling steps for linear flow. |\r\n| <span class="prop-name">StepperProp.Orientation</span> | <span class="prop-type">type&nbsp;StepperOrientation&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Vertical<br>&nbsp;&nbsp;&#124;&nbsp;Horizontal<br></span> | <span class="prop-default">Horizontal</span> | The stepper orientation (layout flow direction). |\r\n\r\nAny other properties supplied will be spread to the root element ([Paper](#/api/paper)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Horizontal</span> | Styles applied to the root element if `orientation="horizontal"`.\r\n| <span class="prop-name">ClassNames.Vertical</span> | Styles applied to the root element if `orientation="vertical"`.\r\n| <span class="prop-name">ClassNames.AlternativeLabel</span> | Styles applied to the root element if `alternativeLabel={true}`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Stepper/Stepper.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiStepper`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Paper](#/api/paper) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Steppers](/demos/steppers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# SvgIcon\r\n\r\n<p class="description">The API documentation of the SvgIcon React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.svgIcon (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"svg"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">IconProp.Color</span> | <span class="prop-type">type&nbsp;IconColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br>&nbsp;&nbsp;&#124;&nbsp;Action<br>&nbsp;&nbsp;&#124;&nbsp;Error<br>&nbsp;&nbsp;&#124;&nbsp;Disabled<br></span> | <span class="prop-default">IconColor.Inherit</span> | The color of the component. It supports those theme colors that make sense for this component. You can use the `nativeColor` property to apply a color attribute to the SVG element. |\r\n| <span class="prop-name">IconProp.FontSize</span> | <span class="prop-type">type&nbsp;IconFontSize&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Small<br>&nbsp;&nbsp;&#124;&nbsp;Large<br></span> | <span class="prop-default">IconProp.Default</span> | The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size. |\r\n| <span class="prop-name">SvgIconProp.NativeColor</span> | <span class="prop-type">string</span> |   | Applies a color attribute to the SVG element. |\r\n| <span class="prop-name">SvgIconProp.ShapeRendering</span> | <span class="prop-type">string</span> |   | The shape-rendering attribute. The behavior of the different options is described [here](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering). If you are having issues with blurry icons you should investigate this property. |\r\n| <span class="prop-name">SvgIconProp.TitleAccess</span> | <span class="prop-type">string</span> |   | Provides a human-readable title for the element that contains it. https://www.w3.org/TR/SVG-access/#Equivalent |\r\n| <span class="prop-name">SvgIconProp.ViewBox</span> | <span class="prop-type">string</span> | <span class="prop-default">"0 0 24 24"</span> | Allows you to redefine what the coordinates without units mean inside an SVG element. For example, if the SVG element is 500 (width) by 200 (height), and you pass viewBox="0 0 50 20", this means that the coordinates inside the SVG will go from the top left corner (0,0) to bottom right (50,20) and each unit will be worth 10px. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.ColorAction</span> | Styles applied to the root element if `color="action"`.\r\n| <span class="prop-name">ClassNames.ColorError</span> | Styles applied to the root element if `color="error"`.\r\n| <span class="prop-name">ClassNames.ColorDisabled</span> | Styles applied to the root element if `color="disabled"`.\r\n| <span class="prop-name">ClassNames.FontSizeInherit</span> | Styles applied to the root element if `fontSize="inherit"`.\r\n| <span class="prop-name">ClassNames.FontSizeSmall</span> | Styles applied to the root element if `fontSize="small"`.\r\n| <span class="prop-name">ClassNames.FontSizeLarge</span> | Styles applied to the root element if `fontSize="large"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/SvgIcon/SvgIcon.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiSvgIcon`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Icons](/style/icons/)--\x3e\r\n\r\n'},function(e,n){e.exports='# SwipeableDrawer\r\n\r\n<p class="description">The API documentation of the SwipeableDrawer React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.swipeableDrawer (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name required">MaterialProp.OnClose * </span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name required">MaterialProp.OnOpen * </span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the component requests to be opened.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name required">MaterialProp.Open *</span> | <span class="prop-type">bool</span> |   | If `true`, the drawer is open. |\r\n| <span class="prop-name">MaterialProp.TransitionDuration</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{ enter: duration.enteringScreen, exit: duration.leavingScreen }</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n| <span class="prop-name">SwipeableDrawerProp.DisableBackdropTransition</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Disable the backdrop transition. This can improve the FPS on low-end devices. |\r\n| <span class="prop-name">SwipeableDrawerProp.DisableDiscovery</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit to promote accidental discovery of the swipe gesture. |\r\n| <span class="prop-name">SwipeableDrawerProp.DisableSwipeToOpen</span> | <span class="prop-type">bool</span> | <span class="prop-default">typeof navigator !== "undefined" && /iPad\\|iPhone\\|iPod/.test(navigator.userAgent)</span> | If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers navigation actions. Swipe to open is disabled on iOS browsers by default. |\r\n| <span class="prop-name">SwipeableDrawerProp.Hysteresis</span> | <span class="prop-type">float</span> | <span class="prop-default">0.55</span> | Affects how far the drawer must be opened/closed to change his state. Specified as percent (0-1) of the width of the drawer |\r\n| <span class="prop-name">SwipeableDrawerProp.MinFlingVelocity</span> | <span class="prop-type">int</span> | <span class="prop-default">400</span> | Defines, from which (average) velocity on, the swipe is defined as complete although hysteresis isn\'t reached. Good threshold is between 250 - 1000 px/s |\r\n| <span class="prop-name">SwipeableDrawerProp.SwipeAreaWidth</span> | <span class="prop-type">int</span> | <span class="prop-default">20</span> | The width of the left most (or right most) area in pixels where the drawer can be swiped open from. |\r\n| <span class="prop-name">ChildrenProp.SwipeAreaProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the swipe area element.\r\n\r\nAny other properties supplied will be spread to the root element ([Drawer](#/api/drawer)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Drawer](#/api/drawer) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Drawers](/demos/drawers/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Switch\r\n\r\n<p class="description">The API documentation of the Switch React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.switch (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.CheckedIcon</span> | <span class="prop-type">ReactNode</span> |   | The icon to display when the component is checked. |\r\n| <span class="prop-name">MaterialProp.Color</span> | <span class="prop-type">type&nbsp;ComponentColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">ComponentColor.Secondary</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">MaterialProp.DisableRipple</span> | <span class="prop-type">bool</span> |   | If `true`, the ripple effect will be disabled. |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | The icon to display when the component is unchecked. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The value of the component. |\r\n| <span class="prop-name">HTMLAttr.Checked</span> | <span class="prop-type">bool</span> |   | If `true`, the component is checked. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the switch will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | The input component property `type`. |\r\n| <span class="prop-name">SelectionControlProp.OnChange</span> | <span class="prop-type">obj->bool->unit</span> |   | Callback fired when the state is changed.<br><br>**Signature:**<br>`(event: obj) -> (checked: bool) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.checked`.<br>*checked:* The `checked` value of the switch |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles used to create the `icon` passed to the internal `SwitchBase` component `icon` prop.\r\n| <span class="prop-name">ClassNames.IconChecked</span> | Styles applied the icon element component if `checked={true}`.\r\n| <span class="prop-name">ClassNames.SwitchBase</span> | Styles applied to the internal `SwitchBase` component\'s `root` class.\r\n| <span class="prop-name">ClassNames.Checked</span> | Styles applied to the internal `SwitchBase` component\'s `checked` class.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the internal SwitchBase component\'s root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the internal SwitchBase component\'s root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the internal SwitchBase component\'s disabled class.\r\n| <span class="prop-name">ClassNames.Bar</span> | Styles applied to the bar element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Switch/Switch.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiSwitch`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Selection Controls](/demos/selection-controls/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Tab\r\n\r\n<p class="description">The API documentation of the Tab React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tab (props : IHTMLProp list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Icon</span> | <span class="prop-type">ReactNode</span> |   | The icon element. |\r\n| <span class="prop-name">MaterialProp.Label</span> | <span class="prop-type">ReactNode</span> |   | The label element. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the tab will be disabled. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | You can provide your own value. Otherwise, we fallback to the child position index. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.LabelIcon</span> | Styles applied to the root element if both `icon` and `label` are provided.\r\n| <span class="prop-name">ClassNames.TextColorInherit</span> | Styles applied to the root element if `textColor="inherit"`.\r\n| <span class="prop-name">ClassNames.TextColorPrimary</span> | Styles applied to the root element if `textColor="primary"`.\r\n| <span class="prop-name">ClassNames.TextColorSecondary</span> | Styles applied to the root element if `textColor="secondary"`.\r\n| <span class="prop-name">ClassNames.Selected</span> | Styles applied to the root element if `selected={true}` (controlled by the Tabs component).\r\n| <span class="prop-name">ClassNames.Disabled</span> | Styles applied to the root element if `disabled={true}` (controlled by the Tabs component).\r\n| <span class="prop-name">ClassNames.FullWidth</span> | Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).\r\n| <span class="prop-name">ClassNames.Wrapper</span> | Styles applied to the `icon` and `label`\'s wrapper element.\r\n| <span class="prop-name">ClassNames.LabelContainer</span> | Styles applied to the label container element if `label` is provided.\r\n| <span class="prop-name">ClassNames.Label</span> | Styles applied to the label wrapper element if `label` is provided.\r\n| <span class="prop-name">ClassNames.LabelWrapped</span> | Styles applied to the label wrapper element if `label` is provided and the text is wrapped.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Tab/Tab.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTab`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tabs](/demos/tabs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableBody\r\n\r\n<p class="description">The API documentation of the TableBody React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableBody (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"tbody"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableBody/TableBody.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableBody`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableCell\r\n\r\n<p class="description">The API documentation of the TableCell React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableCell (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> |   | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">TableCellProp.Numeric</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, content will align to the right. |\r\n| <span class="prop-name">TableCellProp.Padding</span> | <span class="prop-type">type&nbsp;TableCellPadding&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Checkbox<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;None<br></span> |   | Sets the padding applied to the cell. By default, the Table parent component set the value. |\r\n| <span class="prop-name">TableCellProp.Scope</span> | <span class="prop-type">string</span> |   | Set scope attribute. |\r\n| <span class="prop-name">TableCellProp.SortDirection</span> | <span class="prop-type">type&nbsp;TableCellSortDirection&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Asc<br>&nbsp;&nbsp;&#124;&nbsp;Desc<br>&nbsp;&nbsp;&#124;&nbsp;False<br></span> |   | Set aria-sort direction. |\r\n| <span class="prop-name">TableCellProp.Variant</span> | <span class="prop-type">type&nbsp;TableCellVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Head<br>&nbsp;&nbsp;&#124;&nbsp;Body<br>&nbsp;&nbsp;&#124;&nbsp;Footer<br></span> |   | Specify the cell type. By default, the TableHead, TableBody or TableFooter parent component set the value. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Head</span> | Styles applied to the root element if `variant="head"` or `context.table.head`.\r\n| <span class="prop-name">ClassNames.Body</span> | Styles applied to the root element if `variant="body"` or `context.table.body`.\r\n| <span class="prop-name">ClassNames.Footer</span> | Styles applied to the root element if `variant="footer"` or `context.table.footer`.\r\n| <span class="prop-name">ClassNames.Numeric</span> | Styles applied to the root element if `numeric={true}`.\r\n| <span class="prop-name">ClassNames.PaddingDense</span> | Styles applied to the root element if `padding="dense"`.\r\n| <span class="prop-name">ClassNames.PaddingCheckbox</span> | Styles applied to the root element if `padding="checkbox"`.\r\n| <span class="prop-name">ClassNames.PaddingNone</span> | Styles applied to the root element if `padding="none"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableCell/TableCell.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableCell`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableFooter\r\n\r\n<p class="description">The API documentation of the TableFooter React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableFooter (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"tfoot"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableFooter/TableFooter.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableFooter`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableHead\r\n\r\n<p class="description">The API documentation of the TableHead React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableHead (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"thead"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableHead/TableHead.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableHead`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TablePagination\r\n\r\n<p class="description">The API documentation of the TablePagination React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tablePagination (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nA `TableCell` based component for placing inside `TableFooter` for pagination.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</spa | <span class="prop-type">ReactType</span> | <span class="prop-default">TableCell</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">TablePaginationProp.BackIconButtonProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the back arrow [`IconButton`](#/api/icon-button) component. |\r\n| <span class="prop-name required">TablePaginationProp.Count *</span> | <span class="prop-type">int</span> |   | The total number of rows. |\r\n| <span class="prop-name">TablePaginationProp.LabelDisplayedRows</span> | <span class="prop-type">ILabelDisplayedRowsArgs->ReactNode<br><br>type&nbsp;ILabelDisplayedRowsArgs&nbsp;=<br>&nbsp;&nbsp;abstract&nbsp;from:&nbsp;int<br>&nbsp;&nbsp;abstract&nbsp;&#96;&#96;to&#96;&#96;:&nbsp;int<br>&nbsp;&nbsp;abstract&nbsp;count:&nbsp;int<br>&nbsp;&nbsp;abstract&nbsp;page:&nbsp;int<br></span> | <span class="prop-default">({ from, to, count }) => `${from}-${to} of ${count}`</span> | Customize the displayed rows label. |\r\n| <span class="prop-name">TablePaginationProp.LabelRowsPerPage</span> | <span class="prop-type">ReactNode</span> | <span class="prop-default">str "Rows per page:"</span> | Customize the rows per page label. Invoked with a `{ from, to, count, page }` object. |\r\n| <span class="prop-name">TablePaginationProp.NextIconButtonProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the next arrow [`IconButton`](#/api/icon-button) element. |\r\n| <span class="prop-name required">TablePaginationProp.OnChangePage * </span> | <span class="prop-type">obj->int->unit</span> |   | Callback fired when the page is changed.<br><br>**Signature:**<br>`(event: obj) -> (page: int) -> unit`<br>*event:* The event source of the callback<br>*page:* The page selected |\r\n| <span class="prop-name">TablePaginationProp.OnChangeRowsPerPage</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the number of rows per page is changed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name required">TablePaginationProp.Page *</span> | <span class="prop-type">int</span> |   | The zero-based index of the current page. |\r\n| <span class="prop-name required">TablePaginationProp.RowsPerPage *</span> | <span class="prop-type">int</span> |   | The number of rows per page. |\r\n| <span class="prop-name">TablePaginationProp.RowsPerPageOptions</span> | <span class="prop-type">int list</span> | <span class="prop-default">[5; 10; 25]</span> | Customizes the options of the rows per page select field. If less than two options are available, no select field will be displayed. |\r\n| <span class="prop-name">ChildrenProp.ActionsComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">TablePaginationActions</span> | The component used for displaying the actions. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">ChildrenProp.SelectProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the rows per page [`Select`](#/api/select) element. |\r\n\r\nAny other properties supplied will be spread to the root element ([TableCell](#/api/table-cell)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Toolbar</span> | Styles applied to the Toolbar component.\r\n| <span class="prop-name">ClassNames.Spacer</span> | Styles applied to the spacer element.\r\n| <span class="prop-name">ClassNames.Caption</span> | Styles applied to the caption Typography components if `variant="caption"`.\r\n| <span class="prop-name">ClassNames.SelectRoot</span> | Styles applied to the Select component `root` class.\r\n| <span class="prop-name">ClassNames.Select</span> | Styles applied to the Select component `select` class.\r\n| <span class="prop-name">ClassNames.SelectIcon</span> | Styles applied to the Select component `icon` class.\r\n| <span class="prop-name">ClassNames.Input</span> | Styles applied to the `InputBase` component.\r\n| <span class="prop-name">ClassNames.MenuItem</span> | Styles applied to the MenuItem component.\r\n| <span class="prop-name">ClassNames.Actions</span> | Styles applied to the internal `TablePaginationActions` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TablePagination/TablePagination.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTablePagination`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [TableCell](#/api/table-cell) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableRow\r\n\r\n<p class="description">The API documentation of the TableRow React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableRow (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nWill automatically set dynamic row height\r\nbased on the material table element parent (head, body, etc).\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"tr"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">HTMLAttr.Selected</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the table row will have the selected shading. |\r\n| <span class="prop-name">TableRowProp.Hover</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the table row will shade on hover. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Selected</span> | Styles applied to the root element if `selected={true}`.\r\n| <span class="prop-name">ClassNames.Hover</span> | Styles applied to the root element if `hover={true}`.\r\n| <span class="prop-name">ClassNames.Head</span> | Styles applied to the root element if table variant = "head".\r\n| <span class="prop-name">ClassNames.Footer</span> | Styles applied to the root element if table variant = "footer".\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableRow/TableRow.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableRow`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TableSortLabel\r\n\r\n<p class="description">The API documentation of the TableSortLabel React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tableSortLabel (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nA button based label for placing inside `TableCell` for column sorting.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Active</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the label will have the active styling (should be true for the sorted column). |\r\n| <span class="prop-name">TableSortLabelProp.Direction</span> | <span class="prop-type">type&nbsp;TableSortDirection&nbsp;=&nbsp;Asc&nbsp;&#124;&nbsp;Desc<br></span> | <span class="prop-default">TableSortDirection.Desc</span> | The current sort direction. |\r\n| <span class="prop-name">TableSortLabelProp.HideSortIcon</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Hide sort icon when active is false. |\r\n| <span class="prop-name">ChildrenProp.IconComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">ArrowDownwardIcon</span> | Sort icon to use. |\r\n\r\nAny other properties supplied will be spread to the root element ([ButtonBase](#/api/button-base)).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Active</span> | Styles applied to the root element if `active={true}`.\r\n| <span class="prop-name">ClassNames.Icon</span> | Styles applied to the icon component.\r\n| <span class="prop-name">ClassNames.IconDirectionDesc</span> | Styles applied to the icon component if `direction="desc"`.\r\n| <span class="prop-name">ClassNames.IconDirectionAsc</span> | Styles applied to the icon component if `direction="asc"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/TableSortLabel/TableSortLabel.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTableSortLabel`.\r\n\r\n## Inheritance\r\n\r\nThe properties of the [ButtonBase](#/api/button-base) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Table\r\n\r\n<p class="description">The API documentation of the Table React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.table (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"table"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">TableCellProp.Padding</span> | <span class="prop-type">type&nbsp;TableCellPadding&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Checkbox<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;None<br></span> | <span class="prop-default">TableCellPadding.Default</span> | Allows TableCells to inherit padding of the Table. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Table/Table.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTable`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tables](/demos/tables/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Tabs\r\n\r\n<p class="description">The API documentation of the Tabs React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tabs (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">"div"</span> | The component used for the root node. Either a string to use a DOM element or a component. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the tabs will grow to use all the available space. This property is intended for small views, like on mobile. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The value of the currently selected `Tab`. If you don\'t want any selected `Tab`, you can set this property to `false`. |\r\n| <span class="prop-name">TabsProp.Action</span> | <span class="prop-type">ITabsActions->unit<br><br>type&nbsp;ITabsActions&nbsp;=<br>&nbsp;&nbsp;abstract&nbsp;updateIndicator:&nbsp;unit&nbsp;-&gt;&nbsp;unit<br></span> |   | Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It currently only supports `updateIndicator()` action.<br><br>**Signature:**<br>`(actions: ITabsActions) -> unit`<br>*actions:* This object contains all possible actions that can be triggered programmatically. |\r\n| <span class="prop-name">TabsProp.Centered</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the tabs will be centered. This property is intended for large views. |\r\n| <span class="prop-name">TabsProp.IndicatorColor</span> | <span class="prop-type">type&nbsp;TabsIndicatorColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br></span> | <span class="prop-default">IndicatorColor.Secondary</span> | Determines the color of the indicator. |\r\n| <span class="prop-name">TabsProp.OnChange</span> | <span class="prop-type">obj->int->unit</span> |   | Callback fired when the value changes.<br><br>**Signature:**<br>`(event: obj) -> (value: int) -> unit`<br>*event:* The event source of the callback<br>*value:* We default to the index of the child |\r\n| <span class="prop-name">TabsProp.Scrollable</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | True invokes scrolling properties and allow for horizontally scrolling (or swiping) the tab bar. |\r\n| <span class="prop-name">TabsProp.ScrollButtons</span> | <span class="prop-type">type&nbsp;ScrollButtonsType&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Auto<br>&nbsp;&nbsp;&#124;&nbsp;On<br>&nbsp;&nbsp;&#124;&nbsp;Off<br></span> | <span class="prop-default">ScrollButtonsThype.Auto</span> | Determine behavior of scroll buttons when tabs are set to scroll `auto` will only present them on medium and larger viewports `on` will always present them `off` will never present them |\r\n| <span class="prop-name">TabsProp.TextColor</span> | <span class="prop-type">type&nbsp;TabsTextColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br></span> | <span class="prop-default">TabsTextColor.Inherit</span> | Determines the color of the `Tab`. |\r\n| <span class="prop-name">ChildrenProp.ScrollButtonComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">TabScrollButton</span> | The component used to render the scroll buttons. |\r\n| <span class="prop-name">ChildrenProp.TabIndicatorProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `TabIndicator` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.FlexContainer</span> | Styles applied to the flex container element.\r\n| <span class="prop-name">ClassNames.Centered</span> | Styles applied to the flex container element if `centered={true}` & `scrollable={false}`.\r\n| <span class="prop-name">ClassNames.Scroller</span> | Styles applied to the tablist element.\r\n| <span class="prop-name">ClassNames.Fixed</span> | Styles applied to the tablist element if `scrollable={false}`.\r\n| <span class="prop-name">ClassNames.Scrollable</span> | Styles applied to the tablist element if `scrollable={true}`.\r\n| <span class="prop-name">ClassNames.ScrollButtons</span> | Styles applied to the `ScrollButtonComponent` component.\r\n| <span class="prop-name">ClassNames.ScrollButtonsAuto</span> | Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"`.\r\n| <span class="prop-name">ClassNames.Indicator</span> | Styles applied to the `TabIndicator` component.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Tabs/Tabs.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTabs`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tabs](/demos/tabs/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TextField\r\n\r\n<p class="description">The API documentation of the TextField React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.textField (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe `TextField` is a convenience wrapper for the most common cases (80%).\r\nIt cannot be all things to all people, otherwise the API would grow out of control.\r\n\r\n## Advanced Configuration\r\n\r\nIt\'s important to understand that the text field is a simple abstraction\r\non top of the following components:\r\n- [FormControl](#/api/form-control)\r\n- [InputLabel](#/api/input-label)\r\n- [Input](#/api/input)\r\n- [FormHelperText](#/api/form-helper-text)\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.DefaultValue</span> | <span class="prop-type">obj</span> |   | The default value of the `Input` element. |\r\n| <span class="prop-name">MaterialProp.Error</span> | <span class="prop-type">bool</span> |   | If `true`, the label will be displayed in an error state. |\r\n| <span class="prop-name">MaterialProp.FullWidth</span> | <span class="prop-type">bool</span> |   | If `true`, the input will take up the full width of its container. |\r\n| <span class="prop-name">MaterialProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Attributes applied to the native `input` element. |\r\n| <span class="prop-name">MaterialProp.InputRef</span> | <span class="prop-type">type&nbsp;RefProp&nbsp;=&nbsp;U2&lt;obj,(ReactInstance&#8209;>unit)></span> |   | Use that property to pass a ref callback to the native input component. |\r\n| <span class="prop-name">MaterialProp.Label</span> | <span class="prop-type">ReactNode</span> |   | The label content. |\r\n| <span class="prop-name">MaterialProp.Margin</span> | <span class="prop-type">type&nbsp;FormControlMargin&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;None<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br>&nbsp;&nbsp;&#124;&nbsp;Normal<br></span> |   | If `dense` or `normal`, will adjust vertical spacing of this and contained components. |\r\n| <span class="prop-name">MaterialProp.RowsMax</span> | <span class="prop-type">int</span> |   | Maximum number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">MaterialProp.Value</span> | <span class="prop-type">obj</span> |   | The value of the `Input` element, required for a controlled component. |\r\n| <span class="prop-name">HTMLAttr.AutoComplete</span> | <span class="prop-type">string</span> |   | This property helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it\'s more like an autofill. You can learn more about it here: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill |\r\n| <span class="prop-name">HTMLAttr.AutoFocus</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be focused during the first mount. |\r\n| <span class="prop-name">HTMLAttr.Disabled</span> | <span class="prop-type">bool</span> |   | If `true`, the input will be disabled. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The id of the `input` element. Use that property to make `label` and `helperText` accessible for screen readers. |\r\n| <span class="prop-name">HTMLAttr.Multiline</span> | <span class="prop-type">bool</span> |   | If `true`, a textarea element will be rendered instead of an input. |\r\n| <span class="prop-name">HTMLAttr.Name</span> | <span class="prop-type">string</span> |   | Name attribute of the `input` element. |\r\n| <span class="prop-name">HTMLAttr.Placeholder</span> | <span class="prop-type">string</span> |   | The short hint displayed in the input before the user enters a value. |\r\n| <span class="prop-name">HTMLAttr.Required</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the label is displayed as required and the input will be required. |\r\n| <span class="prop-name">HTMLAttr.Rows</span> | <span class="prop-type">float</span> |   | Number of rows to display when multiline option is set to true. |\r\n| <span class="prop-name">HTMLAttr.Type</span> | <span class="prop-type">string</span> |   | Type attribute of the `Input` element. It should be a valid HTML5 input type. |\r\n| <span class="prop-name">DOMAttr.OnChange</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the value is changed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value`. |\r\n| <span class="prop-name">TextFieldProp.HelperText</span> | <span class="prop-type">ReactNode</span> |   | The helper text content. |\r\n| <span class="prop-name">TextFieldProp.Select</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Render a `Select` element while passing the `Input` element to `Select` as `input` parameter. If this option is set you must pass the options of the select as children. |\r\n| <span class="prop-name">TextFieldProp.Variant</span> | <span class="prop-type">type&nbsp;TextFieldVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Standard<br>&nbsp;&nbsp;&#124;&nbsp;Outlined<br>&nbsp;&nbsp;&#124;&nbsp;Filled<br></span> | <span class="prop-default">TextFieldVariant.Standard</span> | The variant to use. |\r\n| <span class="prop-name">ChildrenProp.FormHelperTextProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`FormHelperText`](#/api/form-helper-text) element. |\r\n| <span class="prop-name">ChildrenProp.InputLabelProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`InputLabel`](#/api/input-label) element. |\r\n| <span class="prop-name">ChildrenProp.InputProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Input` element. |\r\n| <span class="prop-name">ChildrenProp.SelectProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Select`](#/api/select) element. |\r\n\r\nAny other properties supplied will be spread to the root element ([FormControl](#/api/form-control)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [FormControl](#/api/form-control) component are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n\x3c!--- [Autocomplete](/demos/autocomplete/)--\x3e\r\n\x3c!--- [Pickers](/demos/pickers/)--\x3e\r\n- [Text Fields](/demos/text-fields/)\r\n\r\n'},function(e,n){e.exports='# Toolbar\r\n\r\n<p class="description">The API documentation of the Toolbar React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.toolbar (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.DisableGutters</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, disables gutter padding. |\r\n| <span class="prop-name">ToolbarProp.Variant</span> | <span class="prop-type">type&nbsp;ToolbarVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Regular<br>&nbsp;&nbsp;&#124;&nbsp;Dense<br></span> | <span class="prop-default">ToolbarVariant.Regular</span> | The variant to use. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Gutters</span> | Styles applied to the root element if `disableGutters={false}`.\r\n| <span class="prop-name">ClassNames.Regular</span> | Styles applied to the root element if `variant="regular"`.\r\n| <span class="prop-name">ClassNames.Dense</span> | Styles applied to the root element if `variant="dense"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Toolbar/Toolbar.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiToolbar`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [App Bar](/demos/app-bar/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Tooltip\r\n\r\n<p class="description">The API documentation of the Tooltip React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.tooltip (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.OnClose</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the tooltip requests to be closed.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.OnOpen</span> | <span class="prop-type">obj->unit</span> |   | Callback fired when the tooltip requests to be open.<br><br>**Signature:**<br>`(event : obj) -> unit`<br>*event:* The event source of the callback |\r\n| <span class="prop-name">MaterialProp.Open</span> | <span class="prop-type">bool</span> |   | If `true`, the tooltip is shown. |\r\n| <span class="prop-name">MaterialProp.Placement</span> | <span class="prop-type">type&nbsp;PlacementType&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;BottomEnd<br>&nbsp;&nbsp;&#124;&nbsp;BottomStart<br>&nbsp;&nbsp;&#124;&nbsp;Bottom<br>&nbsp;&nbsp;&#124;&nbsp;LeftEnd<br>&nbsp;&nbsp;&#124;&nbsp;LeftStart<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;RightEnd<br>&nbsp;&nbsp;&#124;&nbsp;RightStart<br>&nbsp;&nbsp;&#124;&nbsp;Right<br>&nbsp;&nbsp;&#124;&nbsp;TopEnd<br>&nbsp;&nbsp;&#124;&nbsp;TopStart<br>&nbsp;&nbsp;&#124;&nbsp;Top<br></span> | <span class="prop-default">PlacementType.Bottom</span> | Tooltip placement. |\r\n| <span class="prop-name">HTMLAttr.Id</span> | <span class="prop-type">string</span> |   | The relationship between the tooltip and the wrapper component is not clear from the DOM. This property is used with aria-describedby to solve the accessibility issue. If you don\'t provide this property. It fallback to a random generated id. |\r\n| <span class="prop-name">TooltipProp.DisableFocusListener</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Do not respond to focus events. |\r\n| <span class="prop-name">TooltipProp.DisableHoverListener</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Do not respond to hover events. |\r\n| <span class="prop-name">TooltipProp.DisableTouchListener</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | Do not respond to long press touch events. |\r\n| <span class="prop-name">TooltipProp.EnterDelay</span> | <span class="prop-type">int</span> | <span class="prop-default">0</span> | The number of milliseconds to wait before showing the tooltip. This property won\'t impact the enter touch delay (`enterTouchDelay`). |\r\n| <span class="prop-name">TooltipProp.EnterTouchDelay</span> | <span class="prop-type">int</span> | <span class="prop-default">1000</span> | The number of milliseconds a user must touch the element before showing the tooltip. |\r\n| <span class="prop-name">TooltipProp.LeaveDelay</span> | <span class="prop-type">int</span> | <span class="prop-default">0</span> | The number of milliseconds to wait before hiding the tooltip. This property won\'t impact the leave touch delay (`leaveTouchDelay`). |\r\n| <span class="prop-name">TooltipProp.LeaveTouchDelay</span> | <span class="prop-type">int</span> | <span class="prop-default">1500</span> | The number of milliseconds after the user stops touching an element before hiding the tooltip. |\r\n| <span class="prop-name required">TooltipProp.Title *</span> | <span class="prop-type">ReactNode</span> |   | Tooltip title. Zero-length titles string are never displayed. |\r\n| <span class="prop-name">ChildrenProp.PopperProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the [`Popper`](#/api/popper) element. |\r\n| <span class="prop-name">ChildrenProp.TransitionComponent</span> | <span class="prop-type">ReactType</span> | <span class="prop-default">Grow</span> | Transition component. |\r\n| <span class="prop-name">ChildrenProp.TransitionProps</span> | <span class="prop-type">IHTMLProp list</span> |   | Properties applied to the `Transition` element. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Popper</span> | Styles applied to the Popper component.\r\n| <span class="prop-name">ClassNames.Tooltip</span> | Styles applied to the tooltip (label wrapper) element.\r\n| <span class="prop-name">ClassNames.Touch</span> | Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.\r\n| <span class="prop-name">ClassNames.TooltipPlacementLeft</span> | Styles applied to the tooltip (label wrapper) element if `placement` contains "left".\r\n| <span class="prop-name">ClassNames.TooltipPlacementRight</span> | Styles applied to the tooltip (label wrapper) element if `placement` contains "right".\r\n| <span class="prop-name">ClassNames.TooltipPlacementTop</span> | Styles applied to the tooltip (label wrapper) element if `placement` contains "top".\r\n| <span class="prop-name">ClassNames.TooltipPlacementBottom</span> | Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom".\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Tooltip/Tooltip.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTooltip`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Tooltips](/demos/tooltips/)--\x3e\r\n\r\n'},function(e,n){e.exports='# TouchRipple\r\n\r\n<p class="description">The API documentation of the TouchRipple React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.touchRipple (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">TouchRippleProp.Center</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the ripple starts at the center of the component rather than at the point of interaction. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Ripple</span> | Styles applied to the internal `Ripple` components `ripple` class.\r\n| <span class="prop-name">ClassNames.RippleVisible</span> | Styles applied to the internal `Ripple` components `rippleVisible` class.\r\n| <span class="prop-name">ClassNames.RipplePulsate</span> | Styles applied to the internal `Ripple` components `ripplePulsate` class.\r\n| <span class="prop-name">ClassNames.Child</span> | Styles applied to the internal `Ripple` components `child` class.\r\n| <span class="prop-name">ClassNames.ChildLeaving</span> | Styles applied to the internal `Ripple` components `childLeaving` class.\r\n| <span class="prop-name">ClassNames.ChildPulsate</span> | Styles applied to the internal `Ripple` components `childPulsate` class.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/ButtonBase/TouchRipple.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTouchRipple`.\r\n\r\n'},function(e,n){e.exports='# Typography\r\n\r\n<p class="description">The API documentation of the Typography React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.typography (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\n\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.Classes</span> | <span class="prop-type">ClassNames list</span> |   | Override or extend the styles applied to the component.  See CSS API below for more details.  |\r\n| <span class="prop-name">MaterialProp.Component</span> | <span class="prop-type">ReactType</span> |   | The component used for the root node. Either a string to use a DOM element or a component. By default, it maps the variant to a good default headline component. |\r\n| <span class="prop-name">TypographyProp.Align</span> | <span class="prop-type">type&nbsp;TypographyAlign&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Left<br>&nbsp;&nbsp;&#124;&nbsp;Center<br>&nbsp;&nbsp;&#124;&nbsp;Right<br>&nbsp;&nbsp;&#124;&nbsp;Justify<br></span> | <span class="prop-default">TypographyAlign.Inherit</span> | Set the text-align on the component. |\r\n| <span class="prop-name">TypographyProp.Color</span> | <span class="prop-type">type&nbsp;TypographyColor&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Default<br>&nbsp;&nbsp;&#124;&nbsp;Error<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;&#124;&nbsp;Primary<br>&nbsp;&nbsp;&#124;&nbsp;Secondary<br>&nbsp;&nbsp;&#124;&nbsp;TextPrimary<br>&nbsp;&nbsp;&#124;&nbsp;TextSecondary<br></span> | <span class="prop-default">TypographyColor.Default</span> | The color of the component. It supports those theme colors that make sense for this component. |\r\n| <span class="prop-name">TypographyProp.GutterBottom</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the text will have a bottom margin. |\r\n| <span class="prop-name">TypographyProp.HeadlineMapping</span> | <span class="prop-type">type TypographyHeadlineMapping =<br>&nbsp;&nbsp;{ h1 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;h2 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;h3 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;h4 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;h5 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;h6 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;subtitle1 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;subtitle2 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;body1 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;body2 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;dispalay4 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;display3 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;display2 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;display1 : string<br>&nbsp;&nbsp;&nbsp;&nbsp;headline : string<br>&nbsp;&nbsp;&nbsp;&nbsp;title : string<br>&nbsp;&nbsp;&nbsp;&nbsp;subheading : string }</span> | <span class="prop-default">{ h1 = "h1"<br>&nbsp;&nbsp;h2 = "h2"<br>&nbsp;&nbsp;h3 = "h3"<br>&nbsp;&nbsp;h4 = "h4"<br>&nbsp;&nbsp;h5 = "h5"<br>&nbsp;&nbsp;h6 = "h6"<br>&nbsp;&nbsp;subtitle1 = "h6"<br>&nbsp;&nbsp;subtitle2 = "h6"<br>&nbsp;&nbsp;body1 = "p"<br>&nbsp;&nbsp;body2 = "p"<br>&nbsp;&nbsp;display4 = "h1"<br>&nbsp;&nbsp;display3 = "h1"<br>&nbsp;&nbsp;display2 = "h1"<br>&nbsp;&nbsp;display1 = "h1"<br>&nbsp;&nbsp;headline = "h1"<br>&nbsp;&nbsp;title = "h2"<br>&nbsp;&nbsp;subheading = "h3" }</span> | We are empirically mapping the variant property to a range of different DOM element types. For instance, subtitle1 to `<h6>`. If you wish to change that mapping, you can provide your own. Alternatively, you can use the `component` property. The default mapping is the following: |\r\n| <span class="prop-name">TypographyProp.InternalDeprecatedVariant</span> | <span class="prop-type">bool</span> |   | A deprecated variant is used from an internal component. Users don\'t need a deprecation warning here if they switched to the v2 theme. They already get the mapping that will be applied in the next major release. |\r\n| <span class="prop-name">TypographyProp.NoWrap</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the text will not wrap, but instead will truncate with an ellipsis. |\r\n| <span class="prop-name">TypographyProp.Paragraph</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the text will have a bottom margin. |\r\n| <span class="prop-name">TypographyProp.Variant</span> | <span class="prop-type">type&nbsp;TypographyVariant&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;H1<br>&nbsp;&nbsp;&#124;&nbsp;H2<br>&nbsp;&nbsp;&#124;&nbsp;H3<br>&nbsp;&nbsp;&#124;&nbsp;H4<br>&nbsp;&nbsp;&#124;&nbsp;H5<br>&nbsp;&nbsp;&#124;&nbsp;H6<br>&nbsp;&nbsp;&#124;&nbsp;Subtitle1<br>&nbsp;&nbsp;&#124;&nbsp;Subtitle2<br>&nbsp;&nbsp;&#124;&nbsp;Overline<br>&nbsp;&nbsp;&#124;&nbsp;SrOnly<br>&nbsp;&nbsp;&#124;&nbsp;Body1<br>&nbsp;&nbsp;&#124;&nbsp;Body2<br>&nbsp;&nbsp;&#124;&nbsp;Caption<br>&nbsp;&nbsp;&#124;&nbsp;Button<br>&nbsp;&nbsp;&#124;&nbsp;Inherit<br>&nbsp;&nbsp;//&nbsp;Deprecated<br>&nbsp;&nbsp;&#124;&nbsp;Display1<br>&nbsp;&nbsp;&#124;&nbsp;Display2<br>&nbsp;&nbsp;&#124;&nbsp;Display3<br>&nbsp;&nbsp;&#124;&nbsp;Display4<br>&nbsp;&nbsp;&#124;&nbsp;Headline<br>&nbsp;&nbsp;&#124;&nbsp;Title<br>&nbsp;&nbsp;&#124;&nbsp;Subheading<br><br></span> |   | Applies the theme typography styles. Use `body1` as the default value with the legacy implementation and `body2` with the new one. |\r\n\r\nAny other properties supplied will be spread to the root element (native element).\r\n\r\n## CSS API\r\n\r\nYou can override all the class names injected by Material-UI thanks to the `MaterialProp.Classes` property.\r\nThis property accepts the following keys:\r\n\r\n\r\n| Name | Description |\r\n|:-----|:------------|\r\n| <span class="prop-name">ClassNames.Root</span> | Styles applied to the root element.\r\n| <span class="prop-name">ClassNames.Display4</span> | Styles applied to the root element if `variant="display4"`.\r\n| <span class="prop-name">ClassNames.Display3</span> | Styles applied to the root element if `variant="display3"`.\r\n| <span class="prop-name">ClassNames.Display2</span> | Styles applied to the root element if `variant="display2"`.\r\n| <span class="prop-name">ClassNames.Display1</span> | Styles applied to the root element if `variant="display1"`.\r\n| <span class="prop-name">ClassNames.Headline</span> | Styles applied to the root element if `variant="headline"`.\r\n| <span class="prop-name">ClassNames.Title</span> | Styles applied to the root element if `variant="title"`.\r\n| <span class="prop-name">ClassNames.Subheading</span> | Styles applied to the root element if `variant="subheading"`.\r\n| <span class="prop-name">ClassNames.Body2</span> | Styles applied to the root element if `variant="body2"`.\r\n| <span class="prop-name">ClassNames.Body1</span> | Styles applied to the root element if `variant="body1"`.\r\n| <span class="prop-name">ClassNames.Caption</span> | Styles applied to the root element if `variant="caption"`.\r\n| <span class="prop-name">ClassNames.Button</span> | Styles applied to the root element if `variant="button"`.\r\n| <span class="prop-name">ClassNames.H1</span> | Styles applied to the root element if `variant="h1"`.\r\n| <span class="prop-name">ClassNames.H2</span> | Styles applied to the root element if `variant="h2"`.\r\n| <span class="prop-name">ClassNames.H3</span> | Styles applied to the root element if `variant="h3"`.\r\n| <span class="prop-name">ClassNames.H4</span> | Styles applied to the root element if `variant="h4"`.\r\n| <span class="prop-name">ClassNames.H5</span> | Styles applied to the root element if `variant="h5"`.\r\n| <span class="prop-name">ClassNames.H6</span> | Styles applied to the root element if `variant="h6"`.\r\n| <span class="prop-name">ClassNames.Subtitle1</span> | Styles applied to the root element if `variant="subtitle1"`.\r\n| <span class="prop-name">ClassNames.Subtitle2</span> | Styles applied to the root element if `variant="subtitle2"`.\r\n| <span class="prop-name">ClassNames.Overline</span> | Styles applied to the root element if `variant="overline"`.\r\n| <span class="prop-name">ClassNames.SrOnly</span> | Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers.\r\n| <span class="prop-name">ClassNames.AlignLeft</span> | Styles applied to the root element if `align="left"`.\r\n| <span class="prop-name">ClassNames.AlignCenter</span> | Styles applied to the root element if `align="center"`.\r\n| <span class="prop-name">ClassNames.AlignRight</span> | Styles applied to the root element if `align="right"`.\r\n| <span class="prop-name">ClassNames.AlignJustify</span> | Styles applied to the root element if `align="justify"`.\r\n| <span class="prop-name">ClassNames.NoWrap</span> | Styles applied to the root element if `align="nowrap"`.\r\n| <span class="prop-name">ClassNames.GutterBottom</span> | Styles applied to the root element if `gutterBottom={true}`.\r\n| <span class="prop-name">ClassNames.Paragraph</span> | Styles applied to the root element if `paragraph={true}`.\r\n| <span class="prop-name">ClassNames.ColorInherit</span> | Styles applied to the root element if `color="inherit"`.\r\n| <span class="prop-name">ClassNames.ColorPrimary</span> | Styles applied to the root element if `color="primary"`.\r\n| <span class="prop-name">ClassNames.ColorSecondary</span> | Styles applied to the root element if `color="secondary"`.\r\n| <span class="prop-name">ClassNames.ColorTextPrimary</span> | Styles applied to the root element if `color="textPrimary"`.\r\n| <span class="prop-name">ClassNames.ColorTextSecondary</span> | Styles applied to the root element if `color="textSecondary"`.\r\n| <span class="prop-name">ClassNames.ColorError</span> | Styles applied to the root element if `color="error"`.\r\n\r\nHave a look at [overriding with classes](#/customization/overrides) section\r\nand the [implementation of the component](https://github.com/mui-org/material-ui/tree/master/packages/material-ui/src/Typography/Typography.js)\r\nfor more detail.\r\n\r\nIf using the `overrides` key of the theme as documented\r\n[here](#/customization/themes),\r\nyou need to use the following style sheet name: `OverridesProp.MuiTypography`.\r\n\r\n\x3c!--## Demos--\x3e\r\n\r\n\x3c!--- [Typography](/style/typography/)--\x3e\r\n\r\n'},function(e,n){e.exports='# Zoom\r\n\r\n<p class="description">The API documentation of the Zoom React component. Learn more about the properties and the CSS customization points.</p>\r\n\r\n```fsharp\r\nFable.Helpers.MaterialUI.zoom (props : IHTMLProp list) (children : ReactElement list) : ReactElement\r\n```\r\n\r\nThe Zoom transition can be used for the floating variant of the\r\n[Button](https://material-ui.com/demos/buttons/#floating-action-buttons) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\r\n\r\n## Props\r\n\r\n| Name | Type | Default | Description |\r\n|:-----|:-----|:--------|:------------|\r\n| <span class="prop-name">MaterialProp.In</span> | <span class="prop-type">bool</span> |   | If `true`, the component will transition in. |\r\n| <span class="prop-name">MaterialProp.Timeout</span> | <span class="prop-type">U2&lt;float,&nbsp;TransitionDurationProp&nbsp;list&gt;<br><br>type&nbsp;TransitionDurationProp&nbsp;=<br>&nbsp;&nbsp;&#124;&nbsp;Enter&nbsp;of&nbsp;float<br>&nbsp;&nbsp;&#124;&nbsp;Exit&nbsp;of&nbsp;float<br></span> | <span class="prop-default">{  enter: duration.enteringScreen,  exit: duration.leavingScreen,}</span> | The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object. |\r\n\r\nAny other properties supplied will be spread to the root element ([Transition](https://reactcommunity.org/react-transition-group/#Transition)).\r\n\r\n## Inheritance\r\n\r\nThe properties of the [Transition](https://reactcommunity.org/react-transition-group/#Transition) component, from react-transition-group, are also available.\r\n\x3c!-- You can take advantage of this behavior to [target nested components](/guides/api/#spread). --\x3e\r\n\r\n## Demos\r\n\r\n- [Buttons](/demos/buttons/)\r\n\x3c!--- [Transitions](/utils/transitions/)--\x3e\r\n\r\n'},function(e,n,t){"use strict";t.r(n);t(645);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,n,t){return n&&r(e.prototype,n),t&&r(e,t),e}function o(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function c(e){return null!=e&&"function"==typeof e.Dispose}function p(e){var n=e;return"number"==typeof n.offset?n.offset:1===e.kind?0:-6e4*e.getTimezoneOffset()}var i=function(){function n(){o(this,n)}return a(n,null,[{key:"id",value:function(e){return n.idMap.has(e)||n.idMap.set(e,++n.count),n.idMap.get(e)}}]),n}();function l(e){for(var n=0,t=5381,r=e.length;n<r;)t=33*t^e.charCodeAt(n++);return t}function m(e){return 2654435761*e|0}function d(e){return 0===e.length?0:e.reduce(function(e,n){return(e<<5)+e^n})}function u(e){if(null==e)return 0;switch(s(e)){case"boolean":return e?1:0;case"number":return m(e);case"string":return l(e);default:if("function"==typeof e.GetHashCode)return e.GetHashCode();if(h(e)){for(var n=e,t=n.length,r=new Array(t),a=0;a<t;a++)r[a]=u(n[a]);return d(r)}return l(String(e))}}function h(e){return Array.isArray(e)||ArrayBuffer.isView(e)}function b(e,n,t){if(null==e)return null==n;if(null==n)return!1;if(e.length!==n.length)return!1;for(var r=0;r<e.length;r++)if(!t(e[r],n[r]))return!1;return!0}function y(e,n){return b(e,n,f)}function f(e,n){return e===n||(null==e?null==n:null!=n&&("object"===s(e)&&("function"==typeof e.Equals?e.Equals(n):h(e)?h(n)&&y(e,n):e instanceof Date&&(n instanceof Date&&0===g(e,n)))))}function g(e,n){var t,r;return r="offset"in e&&"offset"in n?(t=e.getTime(),n.getTime()):(t=e.getTime()+p(e),n.getTime()+p(n)),t===r?0:t<r?-1:1}function C(e,n){return e===n?0:e<n?-1:1}function S(e,n,t){if(null==e)return null==n?0:1;if(null==n)return-1;if(e.length!==n.length)return e.length<n.length?-1:1;for(var r=0,a=0;r<e.length;r++)if(0!==(a=t(e[r],n[r])))return a;return 0}function P(e,n){return S(e,n,w)}function w(e,n){return e===n?0:null==e?null==n?0:-1:null==n?1:"object"!==s(e)?e<n?-1:1:"function"==typeof e.CompareTo?e.CompareTo(n):h(e)?h(n)&&P(e,n):e instanceof Date?n instanceof Date&&g(e,n):1}i.idMap=new WeakMap;var T={None:i.count=0,LowerFirst:1};function v(e,n){switch(n){case T.LowerFirst:return e.charAt(0).toLowerCase()+e.slice(1);case T.None:default:return e}}function M(e){function n(e){throw new Error("Cannot infer key and value of "+String(e))}var t={},r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:T.None,a=!0,s=!1,o=void 0;try{for(var p,i=e[Symbol.iterator]();!(a=(p=i.next()).done);a=!0){var l=p.value,c=T.None;if(null==l&&n(l),"function"==typeof l.toJSON&&(l=l.toJSON(),c=r),Array.isArray(l))switch(l.length){case 0:n(l);break;case 1:t[v(l[0],c)]=!0;break;case 2:var m=l[1];t[v(l[0],c)]=m;break;default:t[v(l[0],c)]=l.slice(1)}else"string"==typeof l?t[v(l,c)]=!0:n(l)}}catch(e){s=!0,o=e}finally{try{a||null==i.return||i.return()}finally{if(s)throw o}}return t}function I(e,n){return null!=n&&Object.getPrototypeOf(e).constructor===Object.getPrototypeOf(n).constructor}function x(e,n){var t,r;return r=n||A,(t=e).prototype=Object.create(r&&r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e}function A(){}function F(e,n){if(e===n)return 0;if(null==n)return-1;for(;null!=e.tail;){if(null==n.tail)return 1;var t=w(e.head,n.head);if(0!==t)return t;e=e.tail,n=n.tail}return null==n.tail?0:-1}function Y(e,n){this.head=e,this.tail=n}function L(e,n){this.tag=0|e,this.name=n;for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];this.fields=r}function H(e,n){for(var t={},r=null==n?Object.keys(e):n(e),a=0;a<r.length;a++)t[r[a]]=e[r[a]];return t}function D(e,n,t){if(e===n)return!0;if(I(e,n)){for(var r=null==t?Object.keys(e):t(e),a=0;a<r.length;a++)if(!f(e[r[a]],n[r[a]]))return!1;return!0}return!1}function N(e,n,t){if(e===n)return 0;if(I(e,n)){for(var r=null==t?Object.keys(e):t(e),a=0;a<r.length;a++){var s=w(e[r[a]],n[r[a]]);if(0!==s)return s}return 0}return-1}function k(){}A.prototype.toString=function(){var n=this;return"{"+Object.keys(this).map(function(e){return e+" = "+String(n[e])}).join(";\n ")+"}"},A.prototype.GetHashCode=function(){return function(e){if(null==e)return 0;switch(s(e)){case"boolean":return e?1:0;case"number":return m(e);case"string":return l(e);default:return m(i.id(e))}}(this)},A.prototype.Equals=function(e){return this===e},Y.prototype.toString=function(){return"["+Array.from(this).map(function(e){return String(e)}).join("; ")+"]"},Y.prototype.toJSON=function(){return Array.from(this)},Y.prototype[Symbol.iterator]=function(){var n=this;return{next:function(){var e=n;return n=n.tail,{done:null==e.tail,value:e.head}}}},Y.prototype.GetHashCode=function(){return d(Array.from(this).map(u))},Y.prototype.Equals=function(e){return 0===F(this,e)},Y.prototype.CompareTo=function(e){return F(this,e)},L.prototype.toString=function(){var e=this.fields.length;return 0===e?this.name:1===e?this.name+" "+String(this.fields[0]):this.name+" ("+this.fields.map(function(e){return String(e)}).join(",")+")"},L.prototype.toJSON=function(){return 0===this.fields.length?this.name:[this.name].concat(this.fields)},L.prototype.GetHashCode=function(){var e=this.fields.map(function(e){return u(e)});return e.splice(0,0,m(this.tag)),d(e)},L.prototype.Equals=function(e){return this===e||I(this,e)&&this.tag===e.tag&&y(this.fields,e.fields)},L.prototype.CompareTo=function(e){return this===e?0:I(this,e)?this.tag===e.tag?P(this.fields,e.fields):this.tag<e.tag?-1:1:-1},k.prototype.toString=function(){var n=this;return"{"+Object.keys(this).map(function(e){return e+" = "+String(n[e])}).join(";\n ")+"}"},k.prototype.toJSON=function(){return H(this)},k.prototype.GetHashCode=function(){var n=this;return d(Object.keys(this).map(function(e){return u(n[e])}))},k.prototype.Equals=function(e){return D(this,e)},k.prototype.CompareTo=function(e){return N(this,e)};x(function(e){this.contents=e},k);var R=x(function(e){this.stack=Error().stack,this.message=e});function E(e){return Object.keys(e).filter(function(e){return"message"!==e&&"stack"!==e})}var B=x(function(){R.call(this)},R);B.prototype.toString=function(){var n=this,e=E(this),t=e.length;return 0===t?this.message:1===t?this.message+" "+String(this[e[0]]):this.message+" ("+e.map(function(e){return String(n[e])}).join(",")+")"},B.prototype.toJSON=function(){return H(this,E)},B.prototype.GetHashCode=function(){var n=this;return d(E(this).map(function(e){return u(n[e])}))},B.prototype.Equals=function(e){return D(this,e,E)},B.prototype.CompareTo=function(e){return N(this,e,E)};x(function(e,n,t){this.arg1=e,this.arg2=0|n,this.arg3=0|t},B),x(function(){});function O(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var V=function(){function s(e,n,t,r,a){U(this,s),this.fullname=e,this.generics=n,this.constructor=t,this.fields=r,this.cases=a}var e,n,t;return e=s,(n=[{key:"toString",value:function(){return function n(e){var t=null==e.generics||_(e)?[]:e.generics;return 0<t.length?e.fullname+"["+t.map(function(e){return n(e)}).join(",")+"]":e.fullname}(this)}},{key:"Equals",value:function(e){return j(this,e)}},{key:"CompareTo",value:function(e){return W(this,e)}}])&&O(e.prototype,n),t&&O(e,t),s}();function z(e){return null!=e.generics?e.generics:[]}function j(e,n){return e.fullname===n.fullname&&b(z(e),z(n),j)}function W(e,n){return e.fullname!==n.fullname?e.fullname<n.fullname?-1:1:S(z(e),z(n),W)}new V("System.Object"),new V("Microsoft.FSharp.Core.Unit"),new V("System.Char"),new V("System.String"),new V("System.Boolean"),new V("System.SByte"),new V("System.Byte"),new V("System.Int16"),new V("System.UInt16"),new V("System.Int32"),new V("System.UInt32"),new V("System.Single"),new V("System.Double"),new V("System.Decimal");function _(e){return e.fullname.endsWith("[]")}var G=t(75),J=t.n(G),q=t(76),K=t.n(q),$=t(134),Z=t.n($),X=t(135),Q=t.n(X),ee=t(77),ne=t.n(ee),te=t(136),re=t.n(te),ae=t(137),se=t.n(ae),oe=t(138),pe=t.n(oe),ie=t(139),le=t.n(ie),ce=t(140),me=t.n(ce),de=t(141),ue=t.n(de),he=t(142),be=t.n(he),ye=t(143),fe=t.n(ye),ge=t(144),Ce=t.n(ge),Se=t(145),Pe=t.n(Se),we=t(146),Te=t.n(we),ve=t(147),Me=t.n(ve),Ie=t(78),xe=t.n(Ie),Ae=t(148),Fe=t.n(Ae);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);function Le(e,n){return[e,M(n,1)]}J.a;var He=K.a,De=Z.a,Ne=(Q.a,ne.a,re.a),ke=(se.a,pe.a,le.a,me.a),Re=(ue.a,be.a,fe.a,Ce.a,Pe.a),Ee=(Te.a,Me.a,xe.a,Fe.a,x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L));var Be=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Oe=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Ue=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Ve=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n,t,r,a,s,o){this.value__=0|e,this[0]=n,this[8]=t,this[16]=r,this[24]=a,this[32]=s,this[40]=o},k);x(function(e,n,t,r,a,s,o,p,i,l,c,m,d){this.value__=0|e,this[1]=n,this[2]=t,this[3]=r,this[4]=a,this[5]=s,this[6]=o,this[7]=p,this[8]=i,this[9]=l,this[10]=c,this[11]=m,this[12]=d},k);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){this.left=0|e,this.top=0|n},k);x(function(e,n){this.horizontal=e,this.vertical=n},k);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){this.vertical=e,this.horizontal=n},k);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var ze=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n,t,r,a,s,o,p,i,l,c,m,d,u,h,b,y){this.h1=e,this.h2=n,this.h3=t,this.h4=r,this.h5=a,this.h6=s,this.subtitle1=o,this.subtitle2=p,this.body1=i,this.body2=l,this.display4=c,this.display3=m,this.display2=d,this.display1=u,this.headline=h,this.title=b,this.subheading=y},k);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var je=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var We=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(){});var _e=t(149),Ge=t.n(_e),Ye=t(151),Je=t.n(Ye),qe=t(79),Ke=t.n(qe),$e=t(152),Ze=t.n($e),Xe=t(153),Qe=t.n(Xe),en=t(154),nn=t.n(en),tn=t(45),rn=t.n(tn),an=t(18),sn=t.n(an),on=t(155),pn=t.n(on),ln=t(156),cn=t.n(ln),mn=t(157),dn=t.n(mn),un=t(158),hn=t.n(un),bn=t(159),yn=t.n(bn),fn=t(160),gn=t.n(fn),Cn=t(161),Sn=t.n(Cn),Pn=t(162),wn=t.n(Pn),Tn=t(163),vn=t.n(Tn),Mn=t(81),In=t.n(Mn),xn=t(59),An=t.n(xn),Fn=t(164),Ln=t.n(Fn),Hn=t(165),Dn=t.n(Hn),Nn=t(166),kn=t.n(Nn),Rn=t(167),En=t.n(Rn),Bn=t(168),On=t.n(Bn),Un=t(169),Vn=t.n(Un),zn=t(170),jn=t.n(zn),Wn=t(171),_n=t.n(Wn),Gn=t(172),Yn=t.n(Gn),Jn=t(173),qn=t.n(Jn),Kn=t(174),$n=t.n(Kn),Zn=t(175),Xn=t.n(Zn),Qn=t(176),et=t.n(Qn),nt=t(58),tt=t.n(nt),rt=t(82),at=t.n(rt),st=t(83),ot=t.n(st),pt=t(177),it=t.n(pt),lt=t(84),ct=t.n(lt),mt=t(85),dt=t.n(mt),ut=t(86),ht=t.n(ut),bt=t(178),yt=t.n(bt),ft=t(179),gt=t.n(ft),Ct=t(180),St=t.n(Ct),Pt=t(181),wt=t.n(Pt),Tt=t(63),vt=t.n(Tt),Mt=t(182),It=t.n(Mt),xt=t(183),At=t.n(xt),Ft=t(46),Lt=t.n(Ft),Ht=t(48),Dt=t.n(Ht),Nt=t(184),kt=t.n(Nt),Rt=t(38),Et=t.n(Rt),Bt=t(87),Ot=t.n(Bt),Ut=t(88),Vt=t.n(Ut),zt=t(89),jt=t.n(zt),Wt=t(90),_t=t.n(Wt),Gt=t(185),Yt=t.n(Gt),Jt=t(186),qt=t.n(Jt),Kt=t(187),$t=t.n(Kt),Zt=t(188),Xt=t.n(Zt),Qt=t(189),er=t.n(Qt),nr=t(190),tr=t.n(nr),rr=t(93),ar=t.n(rr),sr=t(92),or=t.n(sr),pr=t(191),ir=t.n(pr),lr=t(47),cr=t.n(lr),mr=t(192),dr=t.n(mr),ur=t(94),hr=t.n(ur),br=t(22),yr=t.n(br),fr=t(91),gr=t.n(fr),Cr=t(95),Sr=t.n(Cr),Pr=t(61),wr=t.n(Pr),Tr=t(193),vr=t.n(Tr),Mr=t(194),Ir=t.n(Mr),xr=t(60),Ar=t.n(xr),Fr=t(64),Lr=t.n(Fr),Hr=t(62),Dr=t.n(Hr),Nr=t(195),kr=t.n(Nr),Rr=t(96),Er=t.n(Rr),Br=t(196),Or=t.n(Br),Ur=t(197),Vr=t.n(Ur),zr=t(99),jr=t.n(zr),Wr=t(198),_r=t.n(Wr),Gr=t(98),Yr=t.n(Gr),Jr=t(97),qr=t.n(Jr),Kr=t(199),$r=t.n(Kr),Zr=t(17),Xr=t.n(Zr),Qr=t(200),ea=t.n(Qr),na=t(201),ta=t.n(na),ra=t(202),aa=t.n(ra),sa=t(203),oa=t.n(sa),pa=t(204),ia=t.n(pa),la=t(205),ca=t.n(la),ma=t(100),da=t.n(ma),ua=t(206),ha=t.n(ua),ba=t(207),ya=t.n(ba),fa=t(208),ga=t.n(fa),Ca=t(209),Sa=t.n(Ca),Pa=t(210),wa=t.n(Pa),Ta=t(211),va=t.n(Ta),Ma=t(101),Ia=t.n(Ma),xa=t(212),Aa=t.n(xa),Fa=t(80),La=t.n(Fa),Ha=t(23),Da=t.n(Ha),Na=t(213),ka=t.n(Na),Ra=t(27),Ea=t(39),Ba=t(15),Oa=Ge.a,Ua=Je.a,Va=(Ke.a,Ze.a,Qe.a,nn.a,rn.a),za=(sn.a,pn.a,cn.a,dn.a,hn.a,yn.a,gn.a,Sn.a),ja=(wn.a,vn.a,In.a,An.a),Wa=(Ln.a,Dn.a,kn.a,En.a,On.a,Vn.a,jn.a),_a=_n.a,Ga=(Yn.a,qn.a,$n.a,Xn.a,et.a),Ya=(tt.a,at.a),Ja=ot.a,qa=(it.a,ct.a,dt.a),Ka=(ht.a,yt.a),$a=(gt.a,St.a,wt.a,vt.a,It.a),Za=At.a,Xa=Lt.a,Qa=Dt.a,es=kt.a,ns=Et.a,ts=Ot.a,rs=(Vt.a,jt.a),as=_t.a,ss=(Yt.a,qt.a,$t.a,Xt.a,er.a,tr.a,ar.a),os=(or.a,ir.a,cr.a,dr.a,hr.a,yr.a),ps=(gr.a,Sr.a,wr.a,vr.a,Ir.a,Ar.a,Lr.a,Dr.a,kr.a,Er.a,Or.a,Vr.a,jr.a,_r.a,Yr.a,qr.a,$r.a,Xr.a),is=ea.a,ls=(ta.a,aa.a),cs=oa.a,ms=(ia.a,ca.a,da.a,ha.a,ya.a,ga.a,Sa.a,wa.a,va.a),ds=Ia.a,us=Aa.a,hs=(La.a,Da.a),bs=ka.a;function ys(e,n,t){var r,a,s,o;if("function"==typeof e){var p=e;r=function(e){return M(p(e),1)}}else{r=M(e,1)}return a=r,s=M(n,1),o=t,Object(Ra.withStyles)(a,s)(o)}var fs=Ra.MuiThemeProvider;Ra.createMuiTheme;function gs(e){return Object(Ra.createMuiTheme)(M(e,1))}Ra.withTheme;function Cs(e){return Object(Ra.withTheme)()(e)}Ea.isWidthUp,Ea.isWidthDown,Ba.recomposeColor,Ba.convertHexToRGB,Ba.rbgToHex,Ba.decomposeColor,Ba.getContrastRatio,Ba.getLuminance,Ba.emphasize,Ba.fade;var Ss=Ba.darken;Ba.lighten;function Ps(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ws=function(){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),this.value=e}var e,t,r;return e=n,(t=[{key:"toString",value:function(){return String(this.value)}},{key:"toJSON",value:function(){return this.value}},{key:"GetHashCode",value:function(){return u(this.value)}},{key:"Equals",value:function(e){return null!=e&&f(this.value,e instanceof n?e.value:e)}},{key:"CompareTo",value:function(e){return null==e?1:w(this.value,e instanceof n?e.value:e)}}])&&Ps(e.prototype,t),r&&Ps(e,r),n}();function Ts(e){return null==e||e instanceof ws?new ws(e):e}function vs(e,n){if(null!=e)return e instanceof ws?e.value:e;if(!n)throw new Error("Option has no value");return null}x(function(e,n,t){L.call(this,e,n,t)},L);var Ms,Is,xs=x(function(e,n,t){L.call(this,e,n,t)},L);(Is=Ms||(Ms={}))[Is.AllowHexSpecifier=512]="AllowHexSpecifier";var As=null;try{As=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Fs(e,n,t){this.low=0|e,this.high=0|n,this.unsigned=!!t}Fs.prototype.GetHashCode=function(){return d([this.unsigned?1:0,this.high,this.low])},Fs.prototype.Equals=function(e){return ro(this,e)},Fs.prototype.CompareTo=function(e){return po(this,e)},Fs.prototype.toString=function(e){return Qs(this,e)},Fs.prototype.toJSON=function(){return Qs(this)};function Ls(e){return!0===(e&&e.__isLong__)}Object.defineProperty(Fs.prototype,"__isLong__",{value:!0});var Hs={},Ds={};function Ns(e,n){var t,r,a;return n?(a=0<=(e>>>=0)&&e<256)&&(r=Ds[e])?r:(t=Rs(e,(0|e)<0?-1:0,!0),a&&(Ds[e]=t),t):(a=-128<=(e|=0)&&e<128)&&(r=Hs[e])?r:(t=Rs(e,e<0?-1:0,!1),a&&(Hs[e]=t),t)}function ks(e,n){if(isNaN(e))return n?_s:Ws;if(n){if(e<0)return _s;if(Vs<=e)return Ks}else{if(e<=-zs)return $s;if(zs<=e+1)return qs}return e<0?io(ks(-e,n)):Rs(e%Us|0,e/Us|0,n)}function Rs(e,n,t){return new Fs(e,n,t)}var Es=Math.pow;function Bs(e,n,t){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Ws;if(n="number"==typeof n?(t=n,!1):!!n,(t=t||10)<2||36<t)throw RangeError("radix");var r=e.indexOf("-");if(0<r)throw Error("interior hyphen");if(0===r)return io(Bs(e.substring(1),n,t));for(var a=ks(Es(t,8)),s=Ws,o=0;o<e.length;o+=8){var p=Math.min(8,e.length-o),i=parseInt(e.substring(o,o+p),t);if(p<8)s=lo(mo(s,ks(Es(t,p))),ks(i));else s=lo(s=mo(s,a),ks(i))}return s.unsigned=n,s}function Os(e,n){return"number"==typeof e?ks(e,n):"string"==typeof e?Bs(e,n):Rs(e.low,e.high,"boolean"==typeof n?n:e.unsigned)}var Us=4294967296,Vs=Us*Us,zs=Vs/2,js=Ns(1<<24),Ws=Ns(0),_s=Ns(0,!0),Gs=Ns(1),Ys=Ns(1,!0),Js=Ns(-1),qs=Rs(-1,2147483647,!1),Ks=Rs(-1,-1,!0),$s=Rs(0,-2147483648,!1);function Zs(e){return e.unsigned?e.low>>>0:e.low}function Xs(e){return e.unsigned?(e.high>>>0)*Us+(e.low>>>0):e.high*Us+(e.low>>>0)}function Qs(e,n){if((n=n||10)<2||36<n)throw RangeError("radix");if(eo(e))return"0";if(no(e)){if(ro(e,$s)){var t=ks(n),r=uo(e,t),a=co(mo(r,t),e);return Qs(r,n)+Zs(a).toString(n)}return"-"+Qs(io(e),n)}for(var s=ks(Es(n,6),e.unsigned),o=e,p="";;){var i=uo(o,s),l=(Zs(co(o,mo(i,s)))>>>0).toString(n);if(eo(o=i))return l+p;for(;l.length<6;)l="0"+l;p=""+l+p}}function eo(e){return 0===e.high&&0===e.low}function no(e){return!e.unsigned&&e.high<0}function to(e){return 1==(1&e.low)}function ro(e,n){return Ls(n)||(n=Os(n)),(e.unsigned===n.unsigned||e.high>>>31!=1||n.high>>>31!=1)&&(e.high===n.high&&e.low===n.low)}function ao(e,n){return po(e,n)<0}function so(e,n){return 0<po(e,n)}function oo(e,n){return 0<=po(e,n)}function po(e,n){if(Ls(n)||(n=Os(n)),ro(e,n))return 0;var t=no(e),r=no(n);return t&&!r?-1:!t&&r?1:e.unsigned?n.high>>>0>e.high>>>0||n.high===e.high&&n.low>>>0>e.low>>>0?-1:1:no(co(e,n))?-1:1}function io(e){return!e.unsigned&&ro(e,$s)?$s:lo(ho(e),Gs)}function lo(e,n){Ls(n)||(n=Os(n));var t=e.high>>>16,r=65535&e.high,a=e.low>>>16,s=65535&e.low,o=n.high>>>16,p=65535&n.high,i=n.low>>>16,l=0,c=0,m=0,d=0;return m+=(d+=s+(65535&n.low))>>>16,c+=(m+=a+i)>>>16,l+=(c+=r+p)>>>16,l+=t+o,Rs((m&=65535)<<16|(d&=65535),(l&=65535)<<16|(c&=65535),e.unsigned)}function co(e,n){return Ls(n)||(n=Os(n)),lo(e,io(n))}function mo(e,n){if(eo(e))return e.unsigned?_s:Ws;if(Ls(n)||(n=Os(n)),As)return Rs(As.mul(e.low,e.high,n.low,n.high),As.get_high(),e.unsigned);if(eo(n))return e.unsigned?_s:Ws;if(ro(e,$s))return to(n)?$s:Ws;if(ro(n,$s))return to(e)?$s:Ws;if(no(e))return no(n)?mo(io(e),io(n)):io(mo(io(e),n));if(no(n))return io(mo(e,io(n)));if(ao(e,js)&&ao(n,js))return ks(Xs(e)*Xs(n),e.unsigned);var t=e.high>>>16,r=65535&e.high,a=e.low>>>16,s=65535&e.low,o=n.high>>>16,p=65535&n.high,i=n.low>>>16,l=65535&n.low,c=0,m=0,d=0,u=0;return d+=(u+=s*l)>>>16,m+=(d+=a*l)>>>16,d&=65535,m+=(d+=s*i)>>>16,c+=(m+=r*l)>>>16,m&=65535,c+=(m+=a*i)>>>16,m&=65535,c+=(m+=s*p)>>>16,c+=t*l+r*i+a*p+s*o,Rs((d&=65535)<<16|(u&=65535),(c&=65535)<<16|(m&=65535),e.unsigned)}function uo(e,n){if(Ls(n)||(n=Os(n)),eo(n))throw Error("division by zero");var t,r,a,s;if(As)return e.unsigned||-2147483648!==e.high||-1!==n.low||-1!==n.high?Rs((e.unsigned?As.div_u:As.div_s)(e.low,e.high,n.low,n.high),As.get_high(),e.unsigned):e;if(eo(e))return e.unsigned?_s:Ws;if(e.unsigned){if(n.unsigned||(n=(s=n).unsigned?s:Rs(s.low,s.high,!0)),so(n,e))return _s;if(so(n,function(e,n){Ls(n)&&(n=Zs(n));{if(0==(n&=63))return e;var t=e.high;if(n<32){var r=e.low;return Rs(r>>>n|t<<32-n,t>>>n,e.unsigned)}return Rs(32===n?t:t>>>n-32,0,e.unsigned)}}(e,1)))return Ys;a=_s}else{if(ro(e,$s))return ro(n,Gs)||ro(n,Js)?$s:ro(n,$s)?Gs:ro(t=bo(uo(yo(e,1),n),1),Ws)?no(n)?Gs:Js:a=lo(t,uo(r=co(e,mo(n,t)),n));else if(ro(n,$s))return e.unsigned?_s:Ws;if(no(e))return no(n)?uo(io(e),io(n)):io(uo(io(e),n));if(no(n))return io(uo(e,io(n)));a=Ws}for(r=e;oo(r,n);){t=Math.max(1,Math.floor(Xs(r)/Xs(n)));for(var o=Math.ceil(Math.log(t)/Math.LN2),p=o<=48?1:Es(2,o-48),i=ks(t),l=mo(i,n);no(l)||so(l,r);)l=mo(i=ks(t-=p,e.unsigned),n);eo(i)&&(i=Gs),a=lo(a,i),r=co(r,l)}return a}function ho(e){return Rs(~e.low,~e.high,e.unsigned)}function bo(e,n){return Ls(n)&&(n=Zs(n)),0==(n&=63)?e:n<32?Rs(e.low<<n,e.high<<n|e.low>>>32-n,e.unsigned):Rs(0,e.low<<n-32,e.unsigned)}function yo(e,n){return Ls(n)&&(n=Zs(n)),0==(n&=63)?e:n<32?Rs(e.low>>>n|e.high<<32-n,e.high>>n,e.unsigned):Rs(e.high>>n-32,0<=e.high?0:-1,e.unsigned)}function fo(e,n,t){return t?(o=n,new Fs((s=e)[0]|s[1]<<8|s[2]<<16|s[3]<<24,s[4]|s[5]<<8|s[6]<<16|s[7]<<24,o)):(a=n,new Fs((r=e)[4]<<24|r[5]<<16|r[6]<<8|r[7],r[0]<<24|r[1]<<16|r[2]<<8|r[3],a));var r,a,s,o}function go(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Co(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var So=function(){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),this.iter=e}var e,t,r;return e=n,(t=[{key:"MoveNext",value:function(){var e=this.iter.next();return this.current=e.value,!e.done}},{key:"Reset",value:function(){throw new Error("JS iterators cannot be reset")}},{key:"Dispose",value:function(){}},{key:"Current",get:function(){return this.current}}])&&Co(e.prototype,t),r&&Co(e,r),n}();function Po(e){return new So(e[Symbol.iterator]())}function wo(e){return{next:function(){return e.MoveNext()?{done:!1,value:e.Current}:{done:!0,value:null}}}}function To(e,r){return Mo(function(){var n=!1,t=[e[Symbol.iterator](),null];return Ho(function(){var e;if(!n){if(!(e=t[0].next()).done)return[e.value,t];n=!0,t=[null,r[Symbol.iterator]()]}return(e=t[1].next()).done?null:[e.value,t]},t)})}function vo(e){return Mo(function(){var a=e[Symbol.iterator](),s={value:null};return Ho(function(e){for(var n=!1;!n;)if(null==e){var t=a.next();t.done?n=!0:e=t.value[Symbol.iterator]()}else{var r=e.next();r.done?e=null:(s={value:r.value},n=!0)}return null!=e&&null!=s?[s.value,e]:null},null)})}function Mo(e){return go({},Symbol.iterator,function(){return e()[Symbol.iterator]()})}function Io(){return Ho(function(){})}function xo(e,n,t){if(Array.isArray(t)||ArrayBuffer.isView(t))return t.reduce(e,n);for(var r,a=0,s=t[Symbol.iterator]();!(r=s.next()).done;a++)n=e(n,r.value,a);return n}function Ao(t,e){return Mo(function(){return Ho(function(e){var n=e.next();return n.done?null:[t(n.value),e]},e[Symbol.iterator]())})}function Fo(r,e){return Mo(function(){var t=0;return Ho(function(e){var n=e.next();return n.done?null:[r(t++,n.value),e]},e[Symbol.iterator]())})}function Lo(e){return[e]}function Ho(t,e){return go({},Symbol.iterator,function(){var n=e;return{next:function(){var e=t(n);return null!=e?(n=e[1],{done:!1,value:e[0]}):{done:!0}}}})}var Do={GetHashCode:function(){return d([this.s,this.e].concat(this.c))},Equals:function(e){return!this.cmp(e)},CompareTo:function(e){return this.cmp(e)}},No=20,ko=1,Ro=-7,Eo=21,Bo="[big.js] ",Oo=Bo+"Invalid ",Uo=Oo+"decimal places",Vo=Oo+"rounding mode",zo=Bo+"Division by zero",jo=void 0,Wo=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function _o(e,n,t,r){var a=e.c,s=e.e+n+1;if(s<a.length){if(1===t)r=5<=a[s];else if(2===t)r=5<a[s]||5==a[s]&&(r||s<0||a[s+1]!==jo||1&a[s-1]);else if(3===t)r=r||!!a[0];else if(r=!1,0!==t)throw Error(Vo);if(s<1)a.length=1,a[0]=r?(e.e=-n,1):e.e=0;else{if(a.length=s--,r)for(;9<++a[s];)a[s]=0,s--||(++e.e,a.unshift(1));for(s=a.length;!a[--s];)a.pop()}}else if(t<0||3<t||t!==~~t)throw Error(Vo);return e}function Go(e,n,t,r){var a,s,o=e.constructor,p=!e.c[0];if(t!==jo){if(t!==~~t||t<(3==n)||1e6<t)throw Error(3==n?Oo+"precision":Uo);for(t=r-(e=new o(e)).e,e.c.length>++r&&_o(e,t,o.RM),2==n&&(r=e.e+t+1);e.c.length<r;)e.c.push(0)}if(a=e.e,t=(s=e.c.join("")).length,2!=n&&(1==n||3==n&&r<=a||a<=o.NE||a>=o.PE))s=s.charAt(0)+(1<t?"."+s.slice(1):"")+(a<0?"e":"e+")+a;else if(a<0){for(;++a;)s="0"+s;s="0."+s}else if(0<a)if(++a>t)for(a-=t;a--;)s+="0";else a<t&&(s=s.slice(0,a)+"."+s.slice(a));else 1<t&&(s=s.charAt(0)+"."+s.slice(1));return e.s<0&&(!p||4==n)?"-"+s:s}Do.abs=function(){var e=new this.constructor(this);return e.s=1,e},Do.cmp=function(e){var n,t=this.c,r=(e=new this.constructor(e)).c,a=this.s,s=e.s,o=this.e,p=e.e;if(!t[0]||!r[0])return t[0]?a:r[0]?-s:0;if(a!=s)return a;if(n=a<0,o!=p)return p<o^n?1:-1;for(s=(o=t.length)<(p=r.length)?o:p,a=-1;++a<s;)if(t[a]!=r[a])return t[a]>r[a]^n?1:-1;return o==p?0:p<o^n?1:-1},Do.div=function(e){var n=this.constructor,t=this.c,r=(e=new n(e)).c,a=this.s==e.s?1:-1,s=n.DP;if(s!==~~s||s<0||1e6<s)throw Error(Uo);if(!r[0])throw Error(zo);if(!t[0])return new n(0*a);var o,p,i,l,c,m=r.slice(),d=o=r.length,u=t.length,h=t.slice(0,o),b=h.length,y=e,f=y.c=[],g=0,C=s+(y.e=this.e-e.e)+1;for(y.s=a,a=C<0?0:C,m.unshift(0);b++<o;)h.push(0);do{for(i=0;i<10;i++){if(o!=(b=h.length))l=b<o?1:-1;else for(c=-1,l=0;++c<o;)if(r[c]!=h[c]){l=r[c]>h[c]?1:-1;break}if(!(l<0))break;for(p=b==o?r:m;b;){if(h[--b]<p[b]){for(c=b;c&&!h[--c];)h[c]=9;--h[c],h[b]+=10}h[b]-=p[b]}for(;!h[0];)h.shift()}f[g++]=l?i:++i,h[0]&&l?h[b]=t[d]||0:h=[t[d]]}while((d++<u||h[0]!==jo)&&a--);return f[0]||1==g||(f.shift(),y.e--),C<g&&_o(y,s,n.RM,h[0]!==jo),y},Do.eq=function(e){return!this.cmp(e)},Do.gt=function(e){return 0<this.cmp(e)},Do.gte=function(e){return-1<this.cmp(e)},Do.lt=function(e){return this.cmp(e)<0},Do.lte=function(e){return this.cmp(e)<1},Do.minus=Do.sub=function(e){var n,t,r,a,s=this.constructor,o=this.s,p=(e=new s(e)).s;if(o!=p)return e.s=-p,this.plus(e);var i=this.c.slice(),l=this.e,c=e.c,m=e.e;if(!i[0]||!c[0])return c[0]?(e.s=-p,e):new s(i[0]?this:0);if(o=l-m){for((r=(a=o<0)?(o=-o,i):(m=l,c)).reverse(),p=o;p--;)r.push(0);r.reverse()}else for(t=((a=i.length<c.length)?i:c).length,o=p=0;p<t;p++)if(i[p]!=c[p]){a=i[p]<c[p];break}if(a&&(r=i,i=c,c=r,e.s=-e.s),0<(p=(t=c.length)-(n=i.length)))for(;p--;)i[n++]=0;for(p=n;o<t;){if(i[--t]<c[t]){for(n=t;n&&!i[--n];)i[n]=9;--i[n],i[t]+=10}i[t]-=c[t]}for(;0===i[--p];)i.pop();for(;0===i[0];)i.shift(),--m;return i[0]||(e.s=1,i=[m=0]),e.c=i,e.e=m,e},Do.mod=function(e){var n,t=this,r=t.constructor,a=t.s,s=(e=new r(e)).s;if(!e.c[0])throw Error(zo);return t.s=e.s=1,n=1==e.cmp(t),t.s=a,e.s=s,n?new r(t):(a=r.DP,s=r.RM,r.DP=r.RM=0,t=t.div(e),r.DP=a,r.RM=s,this.minus(t.times(e)))},Do.plus=Do.add=function(e){var n,t=this.constructor,r=this.s,a=(e=new t(e)).s;if(r!=a)return e.s=-a,this.minus(e);var s=this.e,o=this.c,p=e.e,i=e.c;if(!o[0]||!i[0])return i[0]?e:new t(o[0]?this:0*r);if(o=o.slice(),r=s-p){for((n=0<r?(p=s,i):(r=-r,o)).reverse();r--;)n.push(0);n.reverse()}for(o.length-i.length<0&&(n=i,i=o,o=n),r=i.length,a=0;r;o[r]%=10)a=(o[--r]=o[r]+i[r]+a)/10|0;for(a&&(o.unshift(a),++p),r=o.length;0===o[--r];)o.pop();return e.c=o,e.e=p,e},Do.pow=function(e){var n=this,t=new n.constructor(1),r=t,a=e<0;if(e!==~~e||e<-1e6||1e6<e)throw Error(Oo+"exponent");for(a&&(e=-e);1&e&&(r=r.times(n)),e>>=1;)n=n.times(n);return a?t.div(r):r},Do.round=function(e,n){var t=this.constructor;if(e===jo)e=0;else if(e!==~~e||e<-1e6||1e6<e)throw Error(Uo);return _o(new t(this),e,n===jo?t.RM:n)},Do.sqrt=function(){var e,n,t,r=this.constructor,a=this.s,s=this.e,o=new r(.5);if(!this.c[0])return new r(this);if(a<0)throw Error(Bo+"No square root");for(s=(e=0===(a=Math.sqrt(this+""))||a===1/0?((n=this.c.join("")).length+s&1||(n+="0"),s=((s+1)/2|0)-(s<0||1&s),new r(((a=Math.sqrt(n))==1/0?"1e":(a=a.toExponential()).slice(0,a.indexOf("e")+1))+s)):new r(a)).e+(r.DP+=4);t=e,e=o.times(t.plus(this.div(t))),t.c.slice(0,s).join("")!==e.c.slice(0,s).join(""););return _o(e,r.DP-=4,r.RM)},Do.times=Do.mul=function(e){var n,t=this.constructor,r=this.c,a=(e=new t(e)).c,s=r.length,o=a.length,p=this.e,i=e.e;if(e.s=this.s==e.s?1:-1,!r[0]||!a[0])return new t(0*e.s);for(e.e=p+i,s<o&&(n=r,r=a,a=n,i=s,s=o,o=i),n=new Array(i=s+o);i--;)n[i]=0;for(p=o;p--;){for(o=0,i=s+p;p<i;)o=n[i]+a[p]*r[i-p-1]+o,n[i--]=o%10,o=o/10|0;n[i]=(n[i]+o)%10}for(o?++e.e:n.shift(),p=n.length;!n[--p];)n.pop();return e.c=n,e},Do.toExponential=function(e){return Go(this,1,e,e)},Do.toFixed=function(e){return Go(this,2,e,this.e+e)},Do.toPrecision=function(e){return Go(this,3,e,e-1)},Do.toString=function(){return Go(this)},Do.valueOf=Do.toJSON=function(){return Go(this,4)};var Yo=function n(){function t(e){if(!(this instanceof t))return e===jo?n():new t(e);e instanceof t?(this.s=e.s,this.e=e.e,this.c=e.c.slice()):function(e,n){var t,r,a;if(0===n&&1/n<0)n="-0";else if(!Wo.test(n+=""))throw Error(Oo+"number");for(e.s="-"==n.charAt(0)?(n=n.slice(1),-1):1,-1<(t=n.indexOf("."))&&(n=n.replace(".","")),0<(r=n.search(/e/i))?(t<0&&(t=r),t+=+n.slice(r+1),n=n.substring(0,r)):t<0&&(t=n.length),a=n.length,r=0;r<a&&"0"==n.charAt(r);)++r;if(r==a)e.c=[e.e=0];else{for(;0<a&&"0"==n.charAt(--a););for(e.e=t-r-1,e.c=[],t=0;r<=a;)e.c[t++]=+n.charAt(r++)}}(this,e),this.constructor=t}return t.prototype=Do,t.DP=No,t.RM=ko,t.NE=Ro,t.PE=Eo,t.version="5.2.2",t}();new Yo(0),new Yo(1),new Yo(-1),new Yo("79228162514264337593543950335"),new Yo("-79228162514264337593543950335");function Jo(e){return e.replace(/[\-\[\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var qo=/(^|[^%])%([0+ ]*)(-?\d+)?(?:\.(\d+))?(\w)/;function Ko(e){return e instanceof Fs?Qs(e.unsigned?e:fo((n=e,t?(p=(o=n).high,[255&(i=o.low),i>>>8&255,i>>>16&255,i>>>24,255&p,p>>>8&255,p>>>16&255,p>>>24]):(a=(r=n).high,s=r.low,[a>>>24,a>>>16&255,a>>>8&255,255&a,s>>>24,s>>>16&255,s>>>8&255,255&s])),!0),16):(Number(e)>>>0).toString(16);var n,t,r,a,s,o,p,i}function $o(e){return{input:e,cont:(n=e,function(e){return qo.test(n)?function o(p,i){return function(){for(var e=p,n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];for(var a=0;a<t.length;a++){var s=t[a];e=Xo(e,s)}return qo.test(e)?o(e,i):i(e.replace(/%%/g,"%"))}}(n,e):e(n)})};var n}function Zo(e){return e.cont(function(e){return e})}function Xo(e,i){return e.replace(qo,function(e,n,t,r,a,s){switch(s){case"f":case"F":i=Number(i).toFixed(a||6);break;case"g":case"G":i=Number(i).toPrecision(a);break;case"e":case"E":i=Number(i).toExponential(a);break;case"O":case"A":i=String(i);break;case"x":i=Ko(i);break;case"X":i=Ko(i).toUpperCase()}var o=0<=t.indexOf("+")&&0<=parseInt(i,10);if(r=parseInt(r,10),!isNaN(r)){var p=0<=r&&0<=t.indexOf("0")?"0":" ";i=ep(String(i),Math.abs(r)-(o?1:0),p,r<0)}return(n+(o?"+"+i:i)).replace(/%/g,"%%")})}function Qo(e){for(var n=arguments.length,t=new Array(1<n?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];return t.map(function(e){return String(e)}).join(e)}function ep(e,n,t,r){t=t||" ",n-=e.length;for(var a=0;a<n;a++)e=r?e+t:t+e;return e}function np(e,n,t){return e.replace(new RegExp(Jo(n),"g"),t)}function tp(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var rp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);function ap(){return new rp(0,"MapEmpty")}function sp(e){switch(e.tag){case 1:return 1;case 2:return 0|(0|e.fields[4]);default:return 0}}function op(e,n,t,r){var a=[e,r];switch(0===a[0].tag&&0===a[1].tag?0:1){case 0:return new rp(1,"MapOne",n,t);case 1:var s=0|sp(e),o=0|sp(r);return new rp(2,"MapNode",n,t,e,r,(0|(s<o?o:s))+1)}}function pp(e,n,t,r){var a=0|sp(e),s=0|sp(r);if(a+2<s){if(2!==r.tag)throw new Error("rebalance");var o=r.fields[1],p=r.fields[3],i=r.fields[2],l=r.fields[0];if(sp(i)>a+1){if(2!==i.tag)throw new Error("rebalance");var c=i.fields[1],m=i.fields[3],d=i.fields[2],u=i.fields[0];return op(op(e,n,t,d),u,c,op(m,l,o,p))}return op(op(e,n,t,i),l,o,p)}if(s+2<a){if(2!==e.tag)throw new Error("rebalance");var h=e.fields[1],b=e.fields[3],y=e.fields[2],f=e.fields[0];if(sp(b)>s+1){if(2!==b.tag)throw new Error("re  balance");var g=b.fields[1],C=b.fields[3],S=b.fields[2],P=b.fields[0];return op(op(y,f,h,S),P,g,op(C,n,t,r))}return op(y,f,h,op(b,n,t,r))}return op(e,n,t,r)}function ip(e,n,t,r){switch(r.tag){case 1:var a=r.fields[0],s=0|e.Compare(n,a);return s<0?new rp(2,"MapNode",n,t,new rp(0,"MapEmpty"),r,2):0===s?new rp(1,"MapOne",n,t):new rp(2,"MapNode",n,t,r,new rp(0,"MapEmpty"),2);case 2:var o=r.fields[1],p=r.fields[3],i=r.fields[2],l=r.fields[0],c=0|r.fields[4],m=0|e.Compare(n,l);return m<0?pp(ip(e,n,t,i),l,o,p):0===m?new rp(2,"MapNode",n,t,i,p,c):pp(i,l,o,ip(e,n,t,p));default:return new rp(1,"MapOne",n,t)}}function lp(e,n){var t=Po(n);try{return function(e,n,t){for(;;){if(!t.MoveNext())return n;var r=t.Current,a=n,s=e,o=t;n=ip(e=s,r[0],r[1],a),t=o}}(e,ap(),t)}finally{c(t)&&t.Dispose()}}var cp=x(function(e,n){this.stack=e,this.started=n},k);function mp(e){for(;;){if(null==e.tail)return new Y;if(1===e.head.tag)return e;if(2!==e.head.tag){e=e.tail}else{var n=e;e=new Y(n.head.fields[2],new Y(new rp(1,"MapOne",n.head.fields[0],n.head.fields[1]),new Y(n.head.fields[3],n.tail)))}}}function dp(e){return new cp(mp(new Y(e,new Y)),!1)}function up(e){if(e.started){var n=e.stack;if(null==n.tail)return function(){throw new Error("enumeration already finished")}();if(1===n.head.tag)return[n.head.fields[0],n.head.fields[1]];throw new Error("Please report error: Map iterator, unexpected stack for current")}return function(){throw new Error("enumeration not started")}()}var hp=x(function(e){this.s=e,this.i=dp(this.s)});function bp(e){return function(e){return null!=this?hp.call(this,e):new hp(e)}(e)}Object.defineProperty(hp.prototype,"Current",{get:function(){return up(this.i)}}),hp.prototype.MoveNext=function(){return function(e){if(e.started){var n=e.stack;if(null==n.tail)return!1;if(1===n.head.tag)return e.stack=mp(n.tail),!(null==e.stack.tail);throw new Error("Please report error: Map iterator, unexpected stack for moveNext")}return e.started=!0,!(null==e.stack.tail)}(this.i)},hp.prototype.Reset=function(){this.i=dp(this.s)},hp.prototype.Dispose=function(){};var yp=x(function(e,n){this.comparer=e,this.tree=n});function fp(e,n){return null!=this?yp.call(this,e,n):new yp(e,n)}function gp(e){return e.tree}function Cp(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}yp.prototype.toString=function(){return"map ["+Qo.apply(void 0,["; "].concat(tp(Ao(function(e){return Zo($o("(%A, %A)"))(e[0])(e[1])},this))))+"]"},yp.prototype.GetHashCode=function(){for(var e=function(e,n){return(e<<1)+n+631},n=0,t=bp(gp(this));t.MoveNext();){var r=t.Current;n=e(n=e(n,u(r[0])),u(r[1]))}return 0|Math.abs(n)},yp.prototype.Equals=function(e){return 0===this.CompareTo(e)},yp.prototype[Symbol.iterator]=function(){return wo(bp(this.tree))},yp.prototype.CompareTo=function(e){var n=e,t=0,r=!1,a=bp(gp(this));try{var s=bp(gp(n));try{for(;!r&&0===t;){var o=[a.MoveNext(),s.MoveNext()];if(o[0])if(o[1]){var p=a.Current,i=s.Current,l=0|this.comparer.Compare(p[0],i[0]);t=0!==l?l:w(p[1],i[1])}else t=1;else o[1]?t=-1:r=!0}return 0|t}finally{c(s)&&s.Dispose()}}finally{c(a)&&a.Dispose()}};var Sp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);function Pp(e){return new Sp(2,"SetOne",e)}function wp(e,n,t,r){return new Sp(1,"SetNode",e,n,t,r)}var Tp=x(function(e,n){this.stack=e,this.started=n},k);function vp(e){for(;;){if(null==e.tail)return new Y;if(2===e.head.tag)return e;if(1!==e.head.tag){e=e.tail}else{var n=e;e=new Y(n.head.fields[1],new Y(Pp(n.head.fields[0]),new Y(n.head.fields[2],n.tail)))}}}function Mp(e){return new Tp(vp(new Y(e,new Y)),!1)}function Ip(e){if(e.started){var n=e.stack;if(null==n.tail)return function(){throw new Error("Enumeration already started")}();if(2===n.head.tag)return n.head.fields[0];throw new Error("Please report error: Set iterator, unexpected stack for current")}return function(){throw new Error("Enumeration not started")}()}var xp=x(function(e){this.s=e,this.i=Mp(this.s)});function Ap(e){return function(e){return null!=this?xp.call(this,e):new xp(e)}(e)}function Fp(e,n,t){var r=[n,t];return 0===r[0].tag?0===r[1].tag?0:-1:0===r[1].tag?1:0|function(e,n,t){e:for(;;){var r,a,s,o,p,i,l,c,m,d,u,h,b,y,f,g,C,S,P,w,T,v,M,I,x,A,F,L,H,D,N,k,R,E,B,O,U=[n,t];switch(null!=U[0].tail?null!=U[1].tail?2===U[1].head.tag?2===U[0].head.tag?(r=4,o=U[0].head.fields[0],p=U[1].head.fields[0],i=U[0].tail,l=U[1].tail):1===U[0].head.tag?0===U[0].head.fields[1].tag?(r=6,b=U[0].head.fields[1],y=U[0].head.fields[0],f=U[0].head.fields[2],g=U[1].head.fields[0],C=U[0].tail,S=U[1].tail):(r=9,F=U[0].head.fields[0],L=U[0].head.fields[1],H=U[0].head.fields[2],D=U[0].tail):(r=10,N=U[1].head.fields[0],k=U[1].tail):1===U[1].head.tag?0===U[1].head.fields[1].tag?2===U[0].head.tag?(r=5,c=U[0].head.fields[0],m=U[1].head.fields[0],d=U[1].head.fields[2],u=U[0].tail,h=U[1].tail):1===U[0].head.tag?0===U[0].head.fields[1].tag?(r=7,P=U[0].head.fields[0],w=U[0].head.fields[2],T=U[1].head.fields[0],v=U[1].head.fields[2],M=U[0].tail,I=U[1].tail):(r=9,F=U[0].head.fields[0],L=U[0].head.fields[1],H=U[0].head.fields[2],D=U[0].tail):(r=11,R=U[1].head.fields[0],E=U[1].head.fields[1],B=U[1].head.fields[2],O=U[1].tail):2===U[0].head.tag?(r=8,x=U[0].head.fields[0],A=U[0].tail):1===U[0].head.tag?(r=9,F=U[0].head.fields[0],L=U[0].head.fields[1],H=U[0].head.fields[2],D=U[0].tail):(r=11,R=U[1].head.fields[0],E=U[1].head.fields[1],B=U[1].head.fields[2],O=U[1].tail):2===U[0].head.tag?(r=8,x=U[0].head.fields[0],A=U[0].tail):1===U[0].head.tag?(r=9,F=U[0].head.fields[0],L=U[0].head.fields[1],H=U[0].head.fields[2],D=U[0].tail):(r=3,a=U[0].tail,s=U[1].tail):r=2:r=null!=U[1].tail?1:0,r){case 0:return 0;case 1:return-1;case 2:return 1;case 3:e=e,n=a,t=s;continue e;case 4:var V=0|e.Compare(o,p);if(0!==V)return 0|V;e=e,n=i,t=l;continue e;case 5:var z=0|e.Compare(c,m);if(0!==z)return 0|z;e=e,n=new Y(new Sp(0,"SetEmpty"),u),t=new Y(d,h);continue e;case 6:var j=0|e.Compare(y,g);if(0!==j)return 0|j;e=e,n=new Y(f,C),t=new Y(b,S);continue e;case 7:var W=0|e.Compare(P,T);if(0!==W)return 0|W;e=e,n=new Y(w,M),t=new Y(v,I);continue e;case 8:var _=t;e=e,n=new Y(new Sp(0,"SetEmpty"),new Y(Pp(x),A)),t=_;continue e;case 9:var G=t;e=e,n=new Y(L,new Y(wp(F,new Sp(0,"SetEmpty"),H,0),D)),t=G;continue e;case 10:e=e,n=n,t=new Y(new Sp(0,"SetEmpty"),new Y(Pp(N),k));continue e;case 11:e=e,n=n,t=new Y(E,new Y(wp(R,new Sp(0,"SetEmpty"),B,0),O));continue e}break}}(e,new Y(n,new Y),new Y(t,new Y))}Object.defineProperty(xp.prototype,"Current",{get:function(){return Ip(this.i)}}),xp.prototype.MoveNext=function(){return function(e){if(e.started){var n=e.stack;if(null==n.tail)return!1;if(2===n.head.tag)return e.stack=vp(n.tail),!(null==e.stack.tail);throw new Error("Please report error: Set iterator, unexpected stack for moveNext")}return e.started=!0,!(null==e.stack.tail)}(this.i)},xp.prototype.Reset=function(){this.i=Mp(this.s)},xp.prototype.Dispose=function(){};var Lp=x(function(e,n){this.comparer=e,this.tree=n});function Hp(e){return e.comparer}function Dp(e){return e.tree}function Np(e,n,t){return function(e,n,t,r){for(;;){var a=e,s=n,o=t,p=r;if(null==p.tail)return o;var i=p.tail;n=s+1,t=(e=a)(s,o,p.head),r=i}}(e,0,n,t)}function kp(e,n,t){for(;;){var r=e,a=n,s=t;if(null==s.tail)return a;var o=s.tail;n=(e=r)(a,s.head),t=o}}function Rp(e){return kp(function(e,n){return new Y(n,e)},new Y,e)}function Ep(e){return Rp(xo(function(e,n){return new Y(n,e)},new Y,e))}function Bp(e,n){return Ep(vo(Ao(e,n)))}function Op(t,e){return Rp(kp(function(e,n){return new Y(t(n),e)},new Y,e))}function Up(r,e){return Rp(Np(function(e,n,t){return new Y(r(e,t),n)},new Y,e))}function Vp(t,e){kp(function(e,n){t(n)},null,e)}function zp(e){return t=function(e,n){return new Y(e,n)},n=e,r=new Y,n.reduceRight(function(e,n){return t(n,e)},r);var t,n,r}Lp.prototype.toString=function(){return"set ["+Qo.apply(void 0,["; "].concat(Cp(Ao(String,this))))+"]"},Lp.prototype.GetHashCode=function(){for(var e,n,t=0,r=Ap(Dp(this));r.MoveNext();)e=t,n=u(r.Current),t=(e<<1)+n+631;return 0|Math.abs(t)},Lp.prototype.Equals=function(e){return 0===Fp(Hp(this),Dp(this),Dp(e))},Lp.prototype.CompareTo=function(e){return 0|Fp(Hp(this),Dp(this),Dp(e))},Lp.prototype[Symbol.iterator]=function(){return wo(Ap(Dp(this)))};var jp=t(0);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Wp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var _p=x(function(e){this.__html=e},k);var Gp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Yp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var Jp=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);jp.createElement,jp.memo;jp.memo;function qp(e){return new Yp(22,"ClassName",kp(function(e,n){return n[1]?e+" "+n[0]:e},"",e))}function Kp(e){return e.target.value}x(function(e,n,t,r,a){this.key=e,this.props=n,this.update=t,this.view=r,this.init=a},k);var $p=x(function(e){this.value=e},k);var Zp=x(function(e,n,t){this.props=e,this.state=n,this.children=t},k);var Xp=x(function(e){jp.Component.call(this,e),this.state=new $p(e.init(e.props))},jp.Component);function Qp(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ei(e){return M(e,1)}function ni(e){return Qo.apply(void 0,[" "].concat(Qp((r=function(e){return e[1]?e[0]:null},n=e,Rp(kp(function(e,n){var t=r(n);return null==t?e:new Y(vs(t),e)},new Y,n))))));var r,n}function ti(e,n){return[e,ei(n)]}Xp.prototype.render=function(){var n=this,e=new Zp(n.props.props,n.state.value,Array.prototype.concat(n.props.children||[]));return n.props.view(e,function(e){var t=n.props.update(e,n.state.value);n.setState(function(e,n){return new $p(t)})})};var ri=t(214),ai=t.n(ri),si=t(102),oi=t.n(si),pi=t(215),ii=t.n(pi),li=(t(433),t(434),t(435),t(436),t(437),t(438),t(439),t(650),ii.a);var ci=new oi.a.Renderer;ci.link=function(e,n,t){return 0===e.indexOf("http")?Zo($o('<a href="%s" target="_blank" title="%s">%s</a>'))(e)(n)(t):Zo($o('<a href="%s" title="%s">%s</a>'))(e)(n)(t)};var mi={};mi.gfm=!0,mi.tables=!0,mi.breaks=!1,mi.pedantic=!1,mi.sanitize=!1,mi.smartLists=!0,mi.smartypants=!1,mi.highlight=function(e,n){return li.highlight(e,function(e){var n;switch(e){case"fsharp":n=0;break;case"js":case"jsx":n=1;break;case"css":n=2;break;case"shell":case"sh":n=3;break;default:n=4}switch(n){case 0:return li.languages.fsharp;case 1:return li.languages.javascript;case 2:return li.languages.css;case 3:return li.languages.shell;case 4:return li.languages.fsharp}}(n))},mi.renderer=ci;var di=ys(function(e){return new Y(Le("markdown",zp([new Jp(149,"FontFamily",e.typography.fontFamily),new Jp(153,"FontSize",16),new Jp(103,"Color",e.palette.text.primary),ti("& .anchor-link",[new Jp(225,"MarginTop",-96),new Jp(291,"Position","absolute")]),ti('& pre, & pre[class*="language-"]',[new Jp(217,"Margin","24px 0"),new Jp(273,"Padding","12px 18px"),new Jp(21,"BackgroundColor",e.palette.background.paper),new Jp(69,"BorderRadius",e.shape.borderRadius),new Jp(268,"Overflow","auto"),["WebkitOverflowScrolling","touch"]]),ti("& code",[new Jp(125,"Display","inline-block"),new Jp(212,"LineHeight",1.6),new Jp(149,"FontFamily",'Consolas, "Liberation Mono", Menlo, Courier, monospace'),new Jp(273,"Padding","3px 6px"),new Jp(103,"Color",e.palette.text.primary),new Jp(21,"BackgroundColor",e.palette.background.paper),new Jp(153,"FontSize",14)]),ti("& p code, & ul code, & pre code",[new Jp(153,"FontSize",14),new Jp(212,"LineHeight",1.6)]),ti("& h1",[new Jp(149,"FontFamily",e.typography.h2.fontFamily),new Jp(153,"FontSize",e.typography.h2.fontSize),new Jp(165,"FontWeight",e.typography.h2.fontWeight),new Jp(212,"LineHeight",e.typography.h2.lineHeight),new Jp(208,"LetterSpacing",e.typography.h2.letterSpacing),new Jp(362,"TextTransform",e.typography.h2.textTransform),new Jp(217,"Margin","32px 0 16px")]),ti("& .description",[new Jp(149,"FontFamily",e.typography.h5.fontFamily),new Jp(153,"FontSize",e.typography.h5.fontSize),new Jp(165,"FontWeight",e.typography.h5.fontWeight),new Jp(212,"LineHeight",e.typography.h5.lineHeight),new Jp(208,"LetterSpacing",e.typography.h5.letterSpacing),new Jp(362,"TextTransform",e.typography.h5.textTransform),new Jp(217,"Margin","0 0 40px")]),ti("& h2",[new Jp(149,"FontFamily",e.typography.h4.fontFamily),new Jp(153,"FontSize",e.typography.h4.fontSize),new Jp(165,"FontWeight",e.typography.h4.fontWeight),new Jp(212,"LineHeight",e.typography.h4.lineHeight),new Jp(208,"LetterSpacing",e.typography.h4.letterSpacing),new Jp(362,"TextTransform",e.typography.h4.textTransform),new Jp(103,"Color",e.palette.text.secondary),new Jp(217,"Margin","32px 0 24px")]),ti("& h3",[new Jp(149,"FontFamily",e.typography.h5.fontFamily),new Jp(153,"FontSize",e.typography.h5.fontSize),new Jp(165,"FontWeight",e.typography.h5.fontWeight),new Jp(212,"LineHeight",e.typography.h5.lineHeight),new Jp(208,"LetterSpacing",e.typography.h5.letterSpacing),new Jp(362,"TextTransform",e.typography.h5.textTransform),new Jp(103,"Color",e.palette.text.secondary),new Jp(217,"Margin","32px 0 24px")]),ti("& h4",[new Jp(149,"FontFamily",e.typography.h6.fontFamily),new Jp(153,"FontSize",e.typography.h6.fontSize),new Jp(165,"FontWeight",e.typography.h6.fontWeight),new Jp(212,"LineHeight",e.typography.h6.lineHeight),new Jp(208,"LetterSpacing",e.typography.h6.letterSpacing),new Jp(362,"TextTransform",e.typography.h6.textTransform),new Jp(103,"Color",e.palette.text.secondary),new Jp(217,"Margin","24px 0 16px")]),ti("& p, & ul, & ol",[new Jp(212,"LineHeight",1.6)]),ti("& h1, & h2, & h3, & h4",[ti("& code",[new Jp(153,"FontSize","inherit"),new Jp(212,"LineHeight","inherit"),new Jp(396,"WordBreak","break-word")]),ti("& .anchor-link-style",[new Jp(260,"Opacity",0),new Jp(125,"Display","none")]),ti("&:hover .anchor-link-style",[new Jp(125,"Display","inline-block"),new Jp(260,"Opacity",1),new Jp(273,"Padding","0 8px"),new Jp(103,"Color",e.palette.text.hint),ti("&:hover",[new Jp(103,"Color",e.palette.text.secondary)]),ti("& svg",[new Jp(394,"Width","0.55em"),new Jp(189,"Height","0.55em"),new Jp(129,"Fill","currentColor")])])]),ti("& table",[new Jp(394,"Width","100%"),new Jp(125,"Display","block"),new Jp(271,"OverflowX","auto"),["WebkitOverflowScrolling","touch"],new Jp(48,"BorderCollapse","collapse"),new Jp(74,"BorderSpacing",0),new Jp(268,"Overflow","hidden"),ti("& .prop-name",[new Jp(153,"FontSize",13),new Jp(149,"FontFamily",'Conolas, "Liberation Mono", Menlo, monospace')]),ti("& .required",[new Jp(103,"Color","#006500")]),ti("& .prop-type",[new Jp(153,"FontSize",13),new Jp(149,"FontFamily",'Conolas, "Liberation Mono", Menlo, monospace'),new Jp(103,"Color","#932981"),new Jp(391,"WhiteSpace","nowrap")]),ti("& .prop-default",[new Jp(153,"FontSize",13),new Jp(149,"FontFamily",'Conolas, "Liberation Mono", Menlo, monospace'),new Jp(42,"BorderBottom","1px dotted "+e.palette.text.hint)])]),ti("& thead",[new Jp(153,"FontSize",14),new Jp(165,"FontWeight",e.typography.fontWeightMedium),new Jp(103,"Color",e.palette.text.secondary)]),ti("& tbody",[new Jp(153,"FontSize",14),new Jp(212,"LineHeight",1.5),new Jp(103,"Color",e.palette.text.primary)]),ti("& td",[new Jp(42,"BorderBottom","1px solid "+e.palette.divider),new Jp(273,"Padding","8px 16px 8px 8px"),new Jp(325,"TextAlign","left")]),ti("& td:last-child",[new Jp(280,"PaddingRight",24)]),ti("& td compact",[new Jp(280,"PaddingRight",24)]),ti("& td code",[new Jp(153,"FontSize",13),new Jp(212,"LineHeight",1.6)]),ti("& th",[new Jp(391,"WhiteSpace","pre"),new Jp(42,"BorderBottom","1px solid "+e.palette.divider),new Jp(165,"FontWeight",e.typography.fontWeightMedium),new Jp(273,"Padding","0 16px 0 8px"),new Jp(325,"TextAlign","left")]),ti("& th:last-child",[new Jp(280,"PaddingRight",24)]),ti("& tr",[new Jp(189,"Height",48)]),ti("& thead tr",[new Jp(189,"Height",64)]),ti("& strong",[new Jp(165,"FontWeight",e.typography.fontWeightMedium)]),ti("& blockquote",[new Jp(65,"BorderLeft","5px solid "+e.palette.text.hint),new Jp(21,"BackgroundColor",e.palette.background.paper),new Jp(273,"Padding","4px 24px"),new Jp(217,"Margin","24px 0")]),ti("& a, & a code",[new Jp(103,"Color",e.palette.secondary.main),new Jp(329,"TextDecoration","none"),ti("&:hover",[new Jp(329,"TextDecoration","underline")])]),ti("& img",[new Jp(248,"MaxWidth","100%")])])),new Y)},new Y(new Ee(2,"Flip",!1),new Y),function(e){var n=oi()(e.text,mi);return jp.createElement.apply(void 0,["div",{className:e.classes.markdown,dangerouslySetInnerHTML:new _p(n)}].concat([]))});function ui(e){var n={};return n.text=e,jp.createElement.apply(void 0,[di,n].concat([]))}var hi=ai.a;var bi=t(216),yi=t.n(bi).a;var fi=t(217),gi=t.n(fi).a;var Ci=t(218),Si=t.n(Ci);var Pi=ys(new Y(Le("root",new Y(new Jp(138,"FlexGrow",1),new Y)),new Y),new Y,function(e){return jp.createElement.apply(void 0,["div",{className:e.classes.root}].concat([jp.createElement.apply(void 0,[Oa,{position:"static",color:"default"}].concat([jp.createElement.apply(void 0,[ds,{}].concat([jp.createElement.apply(void 0,[hs,{variant:"h6",color:"inherit"}].concat(["Photos"]))]))]))]))});function wi(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Ti=t(440);var vi=x(function(e){this.expanded=e},k);var Mi=x(function(e){jp.PureComponent.call(this,e),this.state=new vi(!1)},jp.PureComponent);Mi.prototype.render=function(){var e,n,t=this,r=Ti(t.props.demoPath),a=t.props.classes;return jp.createElement.apply(void 0,[jp.Fragment,{}].concat([ui(t.props.title),jp.createElement.apply(void 0,["div",{className:a.root}].concat([jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,["div",{className:a.header}].concat([jp.createElement.apply(void 0,[us,{placement:"top",title:t.state.expanded?"Hide source":"Show source"}].concat([jp.createElement.apply(void 0,[Xa,(e={},wi(e,"aria-label","Source of demo"),wi(e,"onClick",function(e){t.setState(function(e,n){return new vi(!e.expanded)})}),e)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["code"]))]))]))])),jp.createElement.apply(void 0,[ja,{in:t.state.expanded,unmountOnExit:!0}].concat([jp.createElement.apply(void 0,["div",{className:a.code}].concat([ui((n=r,Zo($o("\r\n```fsharp\r\n%s\r\n```\r\n    "))(n)))]))]))])),jp.createElement.apply(void 0,["div",{className:a.demo}].concat([t.props.demoElement()]))]))]))};var Ii=ys(function(e){var n=e.breakpoints.up("sm"),t=e.mixins.gutters(ei([new Jp(69,"BorderRadius",e.shape.borderRadius),new Jp(21,"BackgroundColor",e.palette.grey[200]),new Jp(125,"Display","flex"),new Jp(200,"JustifyContent","center"),new Jp(281,"PaddingTop",2*e.spacing.unit),new Jp(276,"PaddingBottom",2*e.spacing.unit),ti(n,[new Jp(279,"PaddingLeft",3*e.spacing.unit),new Jp(280,"PaddingRight",3*e.spacing.unit),new Jp(281,"PaddingTop",6*e.spacing.unit),new Jp(276,"PaddingBottom",3*e.spacing.unit)])]));return zp([Le("root",zp([new Jp(291,"Position","relative"),new Jp(220,"MarginBottom",40),new Jp(223,"MarginLeft",2*-e.spacing.unit),new Jp(224,"MarginRight",2*-e.spacing.unit),ti(n,[new Jp(273,"Padding",Zo($o("0 %ipx"))(e.spacing.unit)),new Jp(223,"MarginLeft",0),new Jp(224,"MarginRight",0)])])),["demo",t],Le("header",zp([new Jp(125,"Display","none"),ti(n,[new Jp(125,"Display","flex"),["flip",!1],new Jp(291,"Position","absolute"),new Jp(365,"Top",0),new Jp(298,"Right",e.spacing.unit)])])),Le("code",zp([new Jp(125,"Display","none"),new Jp(273,"Padding",0),new Jp(217,"Margin",0),ti(n,[new Jp(125,"Display","block")]),ti("& pre",[new Jp(268,"Overflow","auto"),new Jp(217,"Margin","0px !important"),new Jp(69,"BorderRadius","0px !important")])]))])},new Y,function(e){return jp.createElement.apply(void 0,[Mi,e].concat([]))});function xi(e,n,t){var r={};return r.demoPath=n,r.title=e,r.demoElement=t,jp.createElement.apply(void 0,[Ii,r].concat([]))}var Ai=ys(zp([Le("root",new Y(new Jp(138,"FlexGrow",1),new Y)),Le("flex",new Y(new Jp(138,"FlexGrow",1),new Y)),Le("menuButton",zp([new Jp(223,"MarginLeft",-12),new Jp(224,"MarginRight",20)]))]),new Y,function(e){var n,t,r,a=e.classes;return jp.createElement.apply(void 0,["div",{className:a.root}].concat([jp.createElement.apply(void 0,[Oa,{position:"static"}].concat([jp.createElement.apply(void 0,[ds,{}].concat([jp.createElement.apply(void 0,[Xa,(n={className:a.menuButton,color:"inherit"},t="aria-label",r="Menu",t in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["menu"]))])),jp.createElement.apply(void 0,[hs,{className:a.flex,variant:"h6",color:"inherit"}].concat(["News"])),jp.createElement.apply(void 0,[Va,{color:"inherit"}].concat(["Login"]))]))]))]))});var Fi=Si.a;function Li(){return jp.createElement.apply(void 0,["div",{}].concat([ui(Fi),xi("## Simple App Bar","./Demos/AppBar/SimpleAppBar.fs",function(){return jp.createElement.apply(void 0,[Pi,{}].concat([]))}),xi("## App Bar with buttons","./Demos/AppBar/AppBarWithButtons.fs",function(){return jp.createElement.apply(void 0,[Ai,{}].concat([]))})]))}var Hi=t(219),Di=t.n(Hi);function Ni(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ki(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("input",new Y(new Jp(125,"Display","none"),new Y))])}function Ri(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{className:n.button}].concat(["Default"])),jp.createElement.apply(void 0,[Va,{color:"primary",className:n.button}].concat(["Primary"])),jp.createElement.apply(void 0,[Va,{color:"secondary",className:n.button}].concat(["Secondary"])),jp.createElement.apply(void 0,[Va,{disabled:!0,className:n.button}].concat(["Disabled"])),jp.createElement.apply(void 0,[Va,{href:"#/demos/buttons",className:n.button}].concat(["Link"])),jp.createElement.apply(void 0,["input",{accept:"image/*",className:n.input,id:"flat-button-file",multiple:!0,type:"file"}].concat(Ni(new Y))),jp.createElement.apply(void 0,["label",{htmlFor:"flat-button-file"}].concat([jp.createElement.apply(void 0,[Va,{component:"span",className:n.button}].concat(["Upload"]))]))]))}function Ei(){return jp.createElement.apply(void 0,[ys(ki,new Y,Ri),{}].concat([]))}function Bi(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Oi(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("input",new Y(new Jp(125,"Display","none"),new Y))])}function Ui(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{variant:"outlined",className:n.button}].concat(["Default"])),jp.createElement.apply(void 0,[Va,{variant:"outlined",color:"primary",className:n.button}].concat(["Primary"])),jp.createElement.apply(void 0,[Va,{variant:"outlined",color:"secondary",className:n.button}].concat(["Secondary"])),jp.createElement.apply(void 0,[Va,{variant:"outlined",disabled:!0,className:n.button}].concat(["Disabled"])),jp.createElement.apply(void 0,[Va,{variant:"outlined",href:"#/demos/buttons",className:n.button}].concat(["Link"])),jp.createElement.apply(void 0,["input",{accept:"image/*",className:n.input,id:"outlined-button-file",multiple:!0,type:"file"}].concat(Bi(new Y))),jp.createElement.apply(void 0,["label",{htmlFor:"outlined-button-file"}].concat([jp.createElement.apply(void 0,[Va,{variant:"outlined",component:"span",className:n.button}].concat(["Upload"]))]))]))}function Vi(){return jp.createElement.apply(void 0,[ys(Oi,new Y,Ui),{}].concat([]))}function zi(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ji(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("input",new Y(new Jp(125,"Display","none"),new Y))])}function Wi(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{variant:"contained",className:n.button}].concat(["Default"])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"primary",className:n.button}].concat(["Primary"])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"secondary",className:n.button}].concat(["Secondary"])),jp.createElement.apply(void 0,[Va,{variant:"contained",disabled:!0,className:n.button}].concat(["Disabled"])),jp.createElement.apply(void 0,[Va,{variant:"contained",href:"#/demos/buttons",className:n.button}].concat(["Link"])),jp.createElement.apply(void 0,["input",{accept:"image/*",className:n.input,id:"contained-button-file",multiple:!0,type:"file"}].concat(zi(new Y))),jp.createElement.apply(void 0,["label",{htmlFor:"contained-button-file"}].concat([jp.createElement.apply(void 0,[Va,{variant:"contained",component:"span",className:n.button}].concat(["Upload"]))]))]))}function _i(){return jp.createElement.apply(void 0,[ys(ji,new Y,Wi),{}].concat([]))}var Gi=ys(function(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("extendedIcon",new Y(new Jp(224,"MarginRight",e.spacing.unit),new Y))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Ga,{color:"primary",className:n.button}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["add_icon"]))])),jp.createElement.apply(void 0,[Ga,{color:"secondary",className:n.button}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["edit_icon"]))])),jp.createElement.apply(void 0,[Ga,{variant:"extended",className:n.button}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["navigation_icon"])),"Extended"])),jp.createElement.apply(void 0,[Ga,{disabled:!0,className:n.button}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["delete_icon"]))]))]))});function Yi(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Ji(e){return jp.createElement.apply(void 0,[hs,M([new Oe(4,"Component","div"),["style",{padding:24}]],1)].concat(Yi(e)))}var qi=x(function(e,n,t){this.color=e,this.className=n,this.icon=t},k);var Ki=x(function(e){this.value=0|e},k);var $i=x(function(e){jp.Component.call(this,e),this.state=new Ki(0)},jp.Component);$i.prototype.render=function(){var r=this,e=r.props.classes,n=r.props.theme,a=n.transitions.duration.leavingScreen,s=zp([new Be(0,"Enter",n.transitions.duration.enteringScreen),new Be(1,"Exit",a)]),t=zp([new qi("primary",e.fab,jp.createElement.apply(void 0,[Za,{}].concat(["add_icon"]))),new qi("secondary",e.fab,jp.createElement.apply(void 0,[Za,{}].concat(["edit_icon"]))),new qi("inherit",e.fab+" "+e.fabGreen,jp.createElement.apply(void 0,[Za,{}].concat(["keyboard_arrow_up_icon"])))]);return jp.createElement.apply(void 0,["div",{className:e.root}].concat(Yi(Ep(Mo(function(){return To(Lo(jp.createElement.apply(void 0,[Oa,{position:"static",color:"default"}].concat([jp.createElement.apply(void 0,[cs,{value:r.state.value,onChange:function(e,n){var t;t=n,r.setState(function(e,n){return new Ki(t)})},indicatorColor:"primary",textColor:"primary",fullWidth:!0}].concat([jp.createElement.apply(void 0,[ls,{label:"Item One"}].concat([])),jp.createElement.apply(void 0,[ls,{label:"Item Two"}].concat([])),jp.createElement.apply(void 0,[ls,{label:"Item Three"}].concat([]))]))]))),Mo(function(){return To(Lo(1===r.state.value?Ji(["Item Two"]):2===r.state.value?Ji(["Item Three"]):Ji(["Item One"])),Mo(function(){return Up(function(e,n){return jp.createElement.apply(void 0,[bs,M([new Wp(0,"Key",String(n.color)),new Oe(16,"In",r.state.value===e),(t=s,["timeout",t instanceof Y?M(t,1):t]),["style",{transitionDelay:Zo($o("%.0fms"))(r.state.value===e?a:0)}],new Ue(1,"UnmountOnExit",!0)],1)].concat([jp.createElement.apply(void 0,[Ga,{className:n.className,color:n.color}].concat([n.icon]))]));var t},t)}))}))})))))};var Zi=ys(function(e){return zp([Le("root",zp([new Jp(21,"BackgroundColor",e.palette.background.paper),new Jp(394,"Width",500),new Jp(291,"Position","relative"),new Jp(250,"MinHeight",200)])),Le("fab",zp([new Jp(291,"Position","absolute"),new Jp(83,"Bottom",2*e.spacing.unit),new Jp(298,"Right",2*e.spacing.unit)])),Le("fabGreen",zp([new Jp(103,"Color",e.palette.common.white),new Jp(21,"BackgroundColor",ke[500])]))])},new Y(new Ee(0,"WithTheme",!0),new Y),function(e){return jp.createElement.apply(void 0,[$i,e].concat([]))});function Xi(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Qi(e){return new Y(Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),new Y)}function el(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{size:"small",className:n.button}].concat(["Small"])),jp.createElement.apply(void 0,[Va,{size:"medium",className:n.button}].concat(["Medium"])),jp.createElement.apply(void 0,[Va,{size:"large",className:n.button}].concat(["Large"]))])),jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{size:"small",variant:"outlined",color:"primary",className:n.button}].concat(["Small"])),jp.createElement.apply(void 0,[Va,{size:"medium",variant:"outlined",color:"primary",className:n.button}].concat(["Medium"])),jp.createElement.apply(void 0,[Va,{size:"large",variant:"outlined",color:"primary",className:n.button}].concat(["Large"]))])),jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{size:"small",variant:"contained",color:"primary",className:n.button}].concat(["Small"])),jp.createElement.apply(void 0,[Va,{size:"medium",variant:"contained",color:"primary",className:n.button}].concat(["Medium"])),jp.createElement.apply(void 0,[Va,{size:"large",variant:"contained",color:"primary",className:n.button}].concat(["Large"]))])),jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Ga,Xi({size:"small",color:"secondary",className:n.button},"aria-label","Add")].concat([jp.createElement.apply(void 0,[Za,{}].concat(["add_icon"]))])),jp.createElement.apply(void 0,[Ga,Xi({size:"medium",color:"secondary",className:n.button},"aria-label","Add")].concat([jp.createElement.apply(void 0,[Za,{}].concat(["add_icon"]))])),jp.createElement.apply(void 0,[Ga,Xi({size:"large",color:"secondary",className:n.button},"aria-label","Add")].concat([jp.createElement.apply(void 0,[Za,{}].concat(["add_icon"]))]))]))]))}function nl(){return jp.createElement.apply(void 0,[ys(Qi,new Y,el),{}].concat([]))}function tl(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function rl(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function al(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("input",new Y(new Jp(125,"Display","none"),new Y))])}function sl(e){var n,t,r,a,s=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Xa,(n={},rl(n,"aria-label","Delete"),rl(n,"className",s.button),n)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["delete_icon"]))])),jp.createElement.apply(void 0,[Xa,(t={color:"primary",disabled:!0},rl(t,"aria-label","Delete"),rl(t,"className",s.button),t)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["delete_icon"]))])),jp.createElement.apply(void 0,[Xa,(r={color:"secondary"},rl(r,"aria-label","Add an alarm"),rl(r,"className",s.button),r)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["alarm_icon"]))])),jp.createElement.apply(void 0,[Xa,(a={color:"primary"},rl(a,"aria-label","Add to shopping cart"),rl(a,"className",s.button),a)].concat([jp.createElement.apply(void 0,[Za,{}].concat(["add_shopping_cart_icon"]))])),jp.createElement.apply(void 0,["input",{accept:"image/*",className:s.input,id:"icon-button-file",type:"file"}].concat(tl(new Y))),jp.createElement.apply(void 0,["label",{htmlFor:"icon-button-file"}].concat([jp.createElement.apply(void 0,[Xa,{color:"primary",component:"span",className:s.button}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["photo_camera_icon"]))]))]))]))}function ol(){return jp.createElement.apply(void 0,[ys(al,new Y,sl),{}].concat([]))}var pl=ys(function(e){return zp([Le("button",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("leftIcon",new Y(new Jp(224,"MarginRight",e.spacing.unit),new Y)),Le("rightIcon",new Y(new Jp(223,"MarginLeft",e.spacing.unit),new Y)),Le("iconSmall",new Y(new Jp(153,"FontSize",20),new Y))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Va,{variant:"contained",color:"secondary",className:n.button}].concat(["Delete",jp.createElement.apply(void 0,[Za,{className:n.rightIcon}].concat(["delete_icon"]))])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"primary",className:n.button}].concat(["Send",jp.createElement.apply(void 0,[Za,{className:n.rightIcon}].concat(["send"]))])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"default",className:n.button}].concat(["Upload",jp.createElement.apply(void 0,[Za,{className:n.rightIcon}].concat(["cloud_up"]))])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"secondary",disabled:!0,className:n.button}].concat([jp.createElement.apply(void 0,[Za,{className:n.leftIcon}].concat(["keyboard_voice"])),"Talk"])),jp.createElement.apply(void 0,[Va,{variant:"contained",size:"small",className:n.button}].concat([jp.createElement.apply(void 0,[Za,{className:n.leftIcon+" "+n.iconSmall}].concat(["save"])),"Save"]))]))});function il(e){return M(e,1)}var ll=gs(zp([["typography",{useNextVariants:!0}],["palette",{primary:{main:ke[500]}}]]));var cl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("cssRoot",zp([new Jp(103,"Color",e.palette.getContrastText(De[500])),new Jp(21,"BackgroundColor",De[500]),["&:hover",il(new Y(new Jp(21,"BackgroundColor",De[700]),new Y))]])),Le("boostrapRoot",zp([new Jp(92,"BoxShadow","none"),new Jp(362,"TextTransform","none"),new Jp(153,"FontSize",16),new Jp(273,"Padding","6px 12px"),new Jp(33,"Border","1px solid"),new Jp(21,"BackgroundColor","#007bff"),new Jp(49,"BorderColor","#007bff"),new Jp(149,"FontFamily",Qo.apply(void 0,[","].concat(["-apple-system","BlinkMacSystemFont",'"Segoe UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"']))),["&:hover",il(zp([new Jp(21,"BackgroundColor","#0069d9"),new Jp(49,"BorderColor","#0069d9")]))],["&:active",il(zp([new Jp(92,"BoxShadow","none"),new Jp(21,"BackgroundColor","#0062cc"),new Jp(49,"BorderColor","#0062cc")]))],["&:focus",il(new Y(new Jp(92,"BoxShadow","0 0 0 0.2rem rgba(0,123,255,.5)"),new Y))]]))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{className:n.container}].concat([jp.createElement.apply(void 0,[Va,{variant:"contained",color:"primary",className:Qo.apply(void 0,[" "].concat([n.margin,n.cssRoot]))}].concat(["Custom CSS"])),jp.createElement.apply(void 0,[fs,{theme:ll}].concat([jp.createElement.apply(void 0,[Va,{variant:"contained",color:"primary",className:n.margin}].concat(["MuiThemeProvider"]))])),jp.createElement.apply(void 0,[Va,{variant:"contained",color:"primary",disableRipple:!0,className:Qo.apply(void 0,[" "].concat([n.margin,n.bootstrapRoot]))}].concat(["Bootstrap"]))]))});var ml=Di.a,dl="\r\n## Text Buttons\r\n\r\n[Text buttons](https://material.io/design/components/buttons.html#text-button)\r\nare typically used for less-pronounced actions, including those located:\r\n\r\n- In dialogs\r\n- In cards\r\n\r\nIn cards, text buttons help maintain an emphasis on card content.\r\n",ul="\r\n## Outlined Buttons\r\n\r\n[Outlined buttons](https://material.io/design/components/buttons.html#outlined-button)\r\nare medium-emphasis buttons. They contain actions that are important,\r\nbut aren’t the primary action in an app.\r\n\r\n### Alternatives\r\n\r\nOutlined buttons are also a lower emphasis alternative to contained buttons,\r\nor a higher emphasis alternative to text buttons.\r\n",hl="\r\n## Contained Buttons\r\n\r\n[Contained buttons](https://material.io/design/components/buttons.html#contained-button)\r\nare high-emphasis, distinguished by their use of elevation and fill.\r\nThey contain actions that are primary to your app.\r\n\r\nThe last example of this demo show how to use an upload button.\r\n",bl="\r\n## Floating Action Buttons\r\n\r\nA [floating action button](https://material.io/design/components/buttons-floating-action-button.html)\r\n(FAB) performs the primary, or most common, action on a screen.\r\nIt appears in front of all screen content, typically as a circular shape with an icon in its center.\r\nFABs come in three types: regular, mini, and extended.\r\n\r\nOnly use a FAB if it is the most suitable way to present a screen’s primary action.\r\n\r\nOnly one floating action button is recommended per screen to represent the most common action.\r\n",yl="\r\nThe floating action button animates onto the screen as an expanding piece of material, by default.\r\n\r\nA floating action button that spans multiple lateral screens (such as tabbed screens) should briefly disappear,\r\nthen reappear if its action changes.\r\n\r\nThe Zoom transition can be used to achieve this. Note that since both the exiting and entering\r\nanimations are triggered at the same time, we use `enterDelay` to allow the outgoing Floating Action Button's\r\nanimation to finish before the new one enters.\r\n",fl="\r\n## Sizes\r\n\r\nFancy larger or smaller buttons? Use the `ButtonProp.Size` or the `ButtonProp.Mini` property.\r\n",gl="\r\n## Icon Buttons\r\n\r\nIcon buttons are commonly found in app bars and toolbars.\r\n\r\nIcons are also appropriate for toggle buttons that allow a single choice to be selected or\r\ndeselected, such as adding or removing a star to an item.\r\n",Cl="\r\n### Buttons with icons and label\r\n\r\nSometimes you might want to have icons for certain button to enhance the UX of the application as we recognize logos more easily than plain text. For example, if you have a delete button you can label it with a dustbin icon.\r\n",Sl="\r\n## Customized Buttons\r\n\r\nIf you have been reading the [overrides documentation page](#/customization/overrides)\r\nbut you are not confident jumping in,\r\nhere are examples of how you can change the main color of a Button using classes,\r\nand using a theme; and of a Bootstrap style Button.\r\n";function Pl(){return jp.createElement.apply(void 0,["div",{}].concat([ui(ml),xi(dl,"./Demos/Buttons/TextButtons.fs",function(){return Ei()}),xi(ul,"./Demos/Buttons/OutlinedButtons.fs",function(){return Vi()}),xi(hl,"./Demos/Buttons/ContainedButtons.fs",function(){return _i()}),xi(bl,"./Demos/Buttons/FloatingActionButtons.fs",function(){return jp.createElement.apply(void 0,[Gi,{}].concat([]))}),xi(yl,"./Demos/Buttons/FloatingActionButtonZoom.fs",function(){return jp.createElement.apply(void 0,[Zi,{}].concat([]))}),xi(fl,"./Demos/Buttons/ButtonSizes.fs",function(){return nl()}),xi(gl,"./Demos/Buttons/IconButtons.fs",function(){return ol()}),xi(Cl,"./Demos/Buttons/IconLabelButtons.fs",function(){return jp.createElement.apply(void 0,[pl,{}].concat([]))}),xi(Sl,"./Demos/Buttons/CustomizedButtons.fs",function(){return jp.createElement.apply(void 0,[cl,{}].concat([]))})]))}var wl=t(220),Tl=t.n(wl);function vl(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Ml=zp([["$","USD"],["€","EUR"],["฿","BTC"],["¥","JPY"]]),Il=x(function(e,n,t,r){this.name=e,this.age=n,this.multiline=t,this.currency=r},k);var xl=x(function(e){jp.Component.call(this,e),this.state=new Il("Cat in the Hat","","Controlled","EUR")},jp.Component);function Al(e,n){var t=Kp(n);e.setState(function(e,n){return new Il(e.name,e.age,e.multiline,t)})}xl.prototype.render=function(){var r=this;return jp.createElement.apply(void 0,["form",{className:r.props.classes.container,noValidate:!0,autoComplete:"off"}].concat([jp.createElement.apply(void 0,[ms,{id:"standard-name",label:"Name",className:r.props.classes.textField,value:r.state.name,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Il(t,e.age,e.multiline,e.currency)})},margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-uncontrolled",label:"Uncontrolled",className:r.props.classes.textField,defaultValue:"foo",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-required",label:"Required",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",required:!0}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-error",label:"Error",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",error:!0}].concat([])),jp.createElement.apply(void 0,[ms,{disabled:!0,id:"standard-disabled",label:"Disabled",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-password-input",label:"Password",className:r.props.classes.textField,type:"password",autoComplete:"current-password",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-read-only-input",label:"Read Only",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",InputProps:{readOnly:!0}}].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","standard-dense"),new Yp(64,"Label","Dense"),qp(zp([[r.props.classes.textField,!0],[r.props.classes.dense,!0]])),new Oe(21,"Margin","dense")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-multiline-flexible",label:"Multiline",multiline:!0,rowsMax:4,value:r.state.multiline,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Il(e.name,e.age,t,e.currency)})},margin:"normal",className:r.props.classes.textField}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-multiline-static",label:"Multiline",className:r.props.classes.textField,rows:4,multiline:!0,defaultValue:"Default Value",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-helperText",label:"Helper text",className:r.props.classes.textField,defaultValue:"Default Value",helperText:"Some important text",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-with-placeholder",label:"With placeholder",placeholder:"Placeholder",className:r.props.classes.textField,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-textarea",label:"With placeholder multiline",placeholder:"Placeholder",className:r.props.classes.textField,multiline:!0,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-number",label:"Number",value:r.state.age,type:"number",onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Il(e.name,t,e.multiline,e.currency)})},InputLabelProps:{shrink:!0},className:r.props.classes.textField,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-search",label:"Search field",className:r.props.classes.textField,type:"search",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-select-currency",label:"Select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){Al(r,e)},helperText:"Please select your currency",select:!0,margin:"normal",SelectProps:{MenuProps:{className:r.props.classes.menu}}}].concat(vl(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[1],value:e[1]}].concat([e[0]]))},Ml)))),jp.createElement.apply(void 0,[ms,{id:"standard-select-currency-native",label:"Native select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){Al(r,e)},helperText:"Please select your currency",select:!0,margin:"normal",SelectProps:{native:!0,MenuProps:{className:r.props.classes.menu}}}].concat(vl(Op(function(e){return jp.createElement.apply(void 0,["option",{key:e[1],value:e[1]}].concat([e[0]]))},Ml)))),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","standard-full-width"),new Yp(64,"Label","Label"),["style",{margin:8}],new Yp(86,"Placeholder","Placeholder"),new Oe(14,"FullWidth",!0),new ze(0,"HelperText","Full width!"),["InputLabelProps",{shrink:!0}],new Oe(21,"Margin","normal")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"standard-bare",className:r.props.classes.textField,defaultValue:"Bare",margin:"normal"}].concat([]))]))};var Fl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("textField",zp([new Jp(223,"MarginLeft",e.spacing.unit),new Jp(224,"MarginRight",e.spacing.unit),new Jp(394,"Width",200)])),Le("dense",new Y(new Jp(225,"MarginTop",19),new Y)),Le("menu",new Y(new Jp(394,"Width",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[xl,e].concat([]))});function Ll(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Hl=zp([["$","USD"],["€","EUR"],["฿","BTC"],["¥","JPY"]]),Dl=x(function(e,n,t,r){this.name=e,this.age=n,this.multiline=t,this.currency=r},k);var Nl=x(function(e){jp.Component.call(this,e),this.state=new Dl("Cat in the Hat","","Controlled","EUR")},jp.Component);function kl(e,n){var t=Kp(n);e.setState(function(e,n){return new Dl(e.name,e.age,e.multiline,t)})}Nl.prototype.render=function(){var r=this;return jp.createElement.apply(void 0,["form",{className:r.props.classes.container,noValidate:!0,autoComplete:"off"}].concat([jp.createElement.apply(void 0,[ms,{id:"outlined-name",label:"Name",className:r.props.classes.textField,value:r.state.name,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Dl(t,e.age,e.multiline,e.currency)})},margin:"normal",variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-uncontrolled",label:"Uncontrolled",className:r.props.classes.textField,defaultValue:"foo",margin:"normal",variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-required",label:"Required",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",required:!0,variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-error",label:"Error",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",error:!0,variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{disabled:!0,id:"outlined-disabled",label:"Disabled",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-email-input",label:"Email",className:r.props.classes.textField,type:"email",autoComplete:"email",margin:"normal",variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-password-input",label:"Password",className:r.props.classes.textField,type:"password",autoComplete:"current-password",margin:"normal",variant:"outlined"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-read-only-input",label:"Read Only",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",variant:"outlined",InputProps:{readOnly:!0}}].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","outlined-dense"),new Yp(64,"Label","Dense"),new ze(2,"Variant","outlined"),qp(zp([[r.props.classes.textField,!0],[r.props.classes.dense,!0]])),new Oe(21,"Margin","dense")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-multiline-flexible",label:"Multiline",multiline:!0,rowsMax:4,value:r.state.multiline,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Dl(e.name,e.age,t,e.currency)})},margin:"normal",variant:"outlined",className:r.props.classes.textField}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-multiline-static",label:"Multiline",className:r.props.classes.textField,rows:4,multiline:!0,defaultValue:"Default Value",variant:"outlined",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-helperText",label:"Helper text",className:r.props.classes.textField,defaultValue:"Default Value",helperText:"Some important text",variant:"outlined",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-with-placeholder",label:"With placeholder",placeholder:"Placeholder",className:r.props.classes.textField,variant:"outlined",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-textarea",label:"Multiline placeholder",placeholder:"Placeholder",className:r.props.classes.textField,variant:"outlined",multiline:!0,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-number",label:"Number",value:r.state.age,type:"number",variant:"outlined",onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Dl(e.name,t,e.multiline,e.currency)})},InputLabelProps:{shrink:!0},className:r.props.classes.textField,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-search",label:"Search field",className:r.props.classes.textField,type:"search",variant:"outlined",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-select-currency",label:"Select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){kl(r,e)},variant:"outlined",helperText:"Please select your currency",select:!0,margin:"normal",SelectProps:{MenuProps:{className:r.props.classes.menu}}}].concat(Ll(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[1],value:e[1]}].concat([e[0]]))},Hl)))),jp.createElement.apply(void 0,[ms,{id:"outlined-select-currency-native",label:"Native select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){kl(r,e)},helperText:"Please select your currency",select:!0,variant:"outlined",margin:"normal",SelectProps:{native:!0,MenuProps:{className:r.props.classes.menu}}}].concat(Ll(Op(function(e){return jp.createElement.apply(void 0,["option",{key:e[1],value:e[1]}].concat([e[0]]))},Hl)))),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","outlined-full-width"),new Yp(64,"Label","Label"),["style",{margin:8}],new Yp(86,"Placeholder","Placeholder"),new Oe(14,"FullWidth",!0),new ze(0,"HelperText","Full width!"),new ze(2,"Variant","outlined"),["InputLabelProps",{shrink:!0}],new Oe(21,"Margin","normal")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"outlined-bare",className:r.props.classes.textField,defaultValue:"Bare",margin:"normal",variant:"outlined"}].concat([]))]))};var Rl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("textField",zp([new Jp(223,"MarginLeft",e.spacing.unit),new Jp(224,"MarginRight",e.spacing.unit),new Jp(394,"Width",200)])),Le("dense",new Y(new Jp(225,"MarginTop",19),new Y)),Le("menu",new Y(new Jp(394,"Width",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[Nl,e].concat([]))});function El(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Bl=zp([["$","USD"],["€","EUR"],["฿","BTC"],["¥","JPY"]]),Ol=x(function(e,n,t,r){this.name=e,this.age=n,this.multiline=t,this.currency=r},k);var Ul=x(function(e){jp.Component.call(this,e),this.state=new Ol("Cat in the Hat","","Controlled","EUR")},jp.Component);function Vl(e,n){var t=Kp(n);e.setState(function(e,n){return new Ol(e.name,e.age,e.multiline,t)})}Ul.prototype.render=function(){var r=this;return jp.createElement.apply(void 0,["form",{className:r.props.classes.container,noValidate:!0,autoComplete:"off"}].concat([jp.createElement.apply(void 0,[ms,{id:"filled-name",label:"Name",className:r.props.classes.textField,value:r.state.name,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ol(t,e.age,e.multiline,e.currency)})},margin:"normal",variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-uncontrolled",label:"Uncontrolled",className:r.props.classes.textField,defaultValue:"foo",margin:"normal",variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-required",label:"Required",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",required:!0,variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-error",label:"Error",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",error:!0,variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{disabled:!0,id:"filled-disabled",label:"Disabled",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-email-input",label:"Email",className:r.props.classes.textField,type:"email",autoComplete:"email",margin:"normal",variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-password-input",label:"Password",className:r.props.classes.textField,type:"password",autoComplete:"current-password",margin:"normal",variant:"filled"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-read-only-input",label:"Read Only",className:r.props.classes.textField,defaultValue:"Hello World",margin:"normal",variant:"filled",InputProps:{readOnly:!0}}].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","filled-dense"),new Yp(64,"Label","Dense"),new ze(2,"Variant","filled"),qp(zp([[r.props.classes.textField,!0],[r.props.classes.dense,!0]])),new Oe(21,"Margin","dense")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-multiline-flexible",label:"Multiline",multiline:!0,rowsMax:4,value:r.state.multiline,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ol(e.name,e.age,t,e.currency)})},margin:"normal",variant:"filled",className:r.props.classes.textField}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-multiline-static",label:"Multiline",className:r.props.classes.textField,rows:4,multiline:!0,defaultValue:"Default Value",variant:"filled",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-helperText",label:"Helper text",className:r.props.classes.textField,defaultValue:"Default Value",helperText:"Some important text",variant:"filled",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-with-placeholder",label:"With placeholder",placeholder:"Placeholder",className:r.props.classes.textField,variant:"filled",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-textarea",label:"Multiline placeholder",placeholder:"Placeholder",className:r.props.classes.textField,variant:"filled",multiline:!0,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-number",label:"Number",value:r.state.age,type:"number",variant:"filled",onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ol(e.name,t,e.multiline,e.currency)})},InputLabelProps:{shrink:!0},className:r.props.classes.textField,margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-search",label:"Search field",className:r.props.classes.textField,type:"search",variant:"filled",margin:"normal"}].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-select-currency",label:"Select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){Vl(r,e)},variant:"filled",helperText:"Please select your currency",select:!0,margin:"normal",SelectProps:{MenuProps:{className:r.props.classes.menu}}}].concat(El(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[1],value:e[1]}].concat([e[0]]))},Bl)))),jp.createElement.apply(void 0,[ms,{id:"filled-select-currency-native",label:"Native select",className:r.props.classes.textField,type:"search",value:r.state.currency,onChange:function(e){Vl(r,e)},helperText:"Please select your currency",select:!0,variant:"filled",margin:"normal",SelectProps:{native:!0,MenuProps:{className:r.props.classes.menu}}}].concat(El(Op(function(e){return jp.createElement.apply(void 0,["option",{key:e[1],value:e[1]}].concat([e[0]]))},Bl)))),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","filled-full-width"),new Yp(64,"Label","Label"),["style",{margin:8}],new Yp(86,"Placeholder","Placeholder"),new Oe(14,"FullWidth",!0),new ze(0,"HelperText","Full width!"),new ze(2,"Variant","filled"),["InputLabelProps",{shrink:!0}],new Oe(21,"Margin","normal")],1)].concat([])),jp.createElement.apply(void 0,[ms,{id:"filled-bare",className:r.props.classes.textField,defaultValue:"Bare",margin:"normal",variant:"filled"}].concat([]))]))};var zl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("textField",zp([new Jp(223,"MarginLeft",e.spacing.unit),new Jp(224,"MarginRight",e.spacing.unit),new Jp(394,"Width",200)])),Le("dense",new Y(new Jp(225,"MarginTop",19),new Y)),Le("menu",new Y(new Jp(394,"Width",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[Ul,e].concat([]))});function jl(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Wl=x(function(e){this.name=e},k);var _l=x(function(e){jp.Component.call(this,e),this.state=new Wl("Composed TextField")},jp.Component);function Gl(e,n){var t=Kp(n);e.setState(function(e,n){return new Wl(t)})}_l.prototype.render=function(){var e,n=this,t=n.props.classes;return jp.createElement.apply(void 0,["div",{className:t.container}].concat([jp.createElement.apply(void 0,[Ja,{className:t.formControl}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"component-simple"}].concat(["Name"])),jp.createElement.apply(void 0,[Qa,{id:"component-simple",value:n.state.name,onChange:function(e){Gl(n,e)}}].concat([]))])),jp.createElement.apply(void 0,[Ja,jl({className:t.formControl},"aria-describedby","component-helper-text")].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"component-helper"}].concat(["Name"])),jp.createElement.apply(void 0,[Qa,{id:"component-helper",value:n.state.name,onChange:function(e){Gl(n,e)}}].concat([])),jp.createElement.apply(void 0,[qa,{id:"component-helper-text"}].concat(["Some important helper text"]))])),jp.createElement.apply(void 0,[Ja,{className:t.formControl,disabled:!0}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"component-disabled"}].concat(["Name"])),jp.createElement.apply(void 0,[Qa,{id:"component-disabled",value:n.state.name,onChange:function(e){Gl(n,e)}}].concat([])),jp.createElement.apply(void 0,[qa,{}].concat(["Disabled"]))])),jp.createElement.apply(void 0,[Ja,(e={className:t.formControl},jl(e,"aria-describedby","component-error-text"),jl(e,"error",!0),e)].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"component-error"}].concat(["Name"])),jp.createElement.apply(void 0,[Qa,{id:"component-error",value:n.state.name,onChange:function(e){Gl(n,e)}}].concat([])),jp.createElement.apply(void 0,[qa,{id:"component-error-text"}].concat(["Error"]))])),jp.createElement.apply(void 0,[Ja,{className:t.formControl,variant:"filled"}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"component-filled"}].concat(["Name"])),jp.createElement.apply(void 0,[Ya,{id:"component-filled",value:n.state.name,onChange:function(e){Gl(n,e)}}].concat([]))]))]))};var Yl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("formControl",new Y(new Jp(217,"Margin",e.spacing.unit),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[_l,e].concat([]))});function Jl(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var ql=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("input",new Y(new Jp(217,"Margin",e.spacing.unit),new Y))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{className:n.container}].concat([jp.createElement.apply(void 0,[Qa,{defaultValue:"Hello world",className:n.input,inputProps:Jl({},"aria-label","Description")}].concat([])),jp.createElement.apply(void 0,[Qa,{placeholder:"Placeholder",className:n.input,inputProps:Jl({},"aria-label","Description")}].concat([])),jp.createElement.apply(void 0,[Qa,{value:"Disabled",className:n.input,disabled:!0,inputProps:Jl({},"aria-label","Description")}].concat([])),jp.createElement.apply(void 0,[Qa,{defaultValue:"Error",className:n.input,error:!0,inputProps:Jl({},"aria-label","Description")}].concat([]))]))});var Kl=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("textField",zp([new Jp(223,"MarginLeft",e.spacing.unit),new Jp(224,"MarginRight",e.spacing.unit),new Jp(394,"Width",200)]))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{className:n.container}].concat([jp.createElement.apply(void 0,[ms,{label:"None",id:"margin-none",defaultValue:"Default value",className:n.textField,helperText:"Some important text"}].concat([])),jp.createElement.apply(void 0,[ms,{label:"Dense",id:"margin-dense",defaultValue:"Default value",className:n.textField,helperText:"Some important text",margin:"dense"}].concat([])),jp.createElement.apply(void 0,[ms,{label:"Normal",id:"margin-normal",defaultValue:"Default value",className:n.textField,helperText:"Some important text",margin:"normal"}].concat([]))]))});function $l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Zl(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Xl=zp([["0-20","0 to 20"],["21-50","21 to 50"],["51-100","51 to 100"]]),Ql=x(function(e,n,t,r,a){this.amount=e,this.password=n,this.weight=t,this.weightRange=r,this.showPassword=a},k);var ec=x(function(e){jp.Component.call(this,e),this.state=new Ql("","","","",!1)},jp.Component);ec.prototype.render=function(){var e,r=this,n=r.props.classes;return jp.createElement.apply(void 0,["div",{className:n.root}].concat([jp.createElement.apply(void 0,[ms,M([new Yp(64,"Label","With normal TextField"),new Yp(57,"Id","simple-start-adornment"),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start"}].concat(["Kg"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new ze(1,"Select",!0),new Yp(64,"Label","With Select"),new Yp(119,"Value",r.state.weightRange),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ql(e.amount,e.password,e.weight,t,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start"}].concat(["Kg"]))}]],1)].concat(Zl(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[0],value:e[0]}].concat([e[1]]))},Xl)))),jp.createElement.apply(void 0,[Ja,{fullWidth:!0,className:n.margin}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"adornment-amount"}].concat(["Amount"])),jp.createElement.apply(void 0,[Qa,{id:"adornment-amount",value:r.state.amount,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ql(t,e.password,e.weight,e.weightRange,e.showPassword)})},startAdornment:jp.createElement.apply(void 0,[es,{position:"start"}].concat(["$"]))}].concat([]))])),jp.createElement.apply(void 0,[Ja,M([qp(zp([[n.margin,!0],[n.withoutLabel,!0],[n.textField,!0]])),["aria-describedby","weight-helper-text"]],1)].concat([jp.createElement.apply(void 0,[Qa,{id:"adornment-weight",value:r.state.weight,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ql(e.amount,e.password,t,e.weightRange,e.showPassword)})},endAdornment:jp.createElement.apply(void 0,[es,{position:"end"}].concat(["Kg"])),inputProps:$l({},"aria-label","Weight")}].concat([])),jp.createElement.apply(void 0,[qa,{id:"weight-helper-text"}].concat(["Weight"]))])),jp.createElement.apply(void 0,[Ja,M([qp(zp([[n.margin,!0],[n.textField,!0]]))],1)].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"adornment-password"}].concat(["Password"])),jp.createElement.apply(void 0,[Qa,{id:"adornment-password",type:r.state.showPassword?"text":"password",value:r.state.password,onChange:function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new Ql(e.amount,t,e.weight,e.weightRange,e.showPassword)})},endAdornment:jp.createElement.apply(void 0,[es,{position:"end"}].concat([jp.createElement.apply(void 0,[Xa,(e={},$l(e,"aria-label","Toggle password visibility"),$l(e,"onClick",function(e){r.setState(function(e,n){return new Ql(e.amount,e.password,e.weight,e.weightRange,!e.showPassword)})}),e)].concat([jp.createElement.apply(void 0,[Za,{}].concat([r.state.showPassword?"visibility_off":"visibility"]))]))]))}].concat([]))]))]))};var nc=ys(function(e){return zp([Le("root",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("withoutLabel",new Y(new Jp(225,"MarginTop",3*e.spacing.unit),new Y)),Le("textField",new Y(new Jp(135,"FlexBasis",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[ec,e].concat([]))});function tc(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function rc(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var ac=zp([["0-20","0 to 20"],["21-50","21 to 50"],["51-100","51 to 100"]]),sc=x(function(e,n,t,r,a){this.amount=e,this.password=n,this.weight=t,this.weightRange=r,this.showPassword=a},k);var oc=x(function(e){jp.Component.call(this,e),this.state=new sc("","","","",!1)},jp.Component);oc.prototype.render=function(){var e,r=this,n=r.props.classes;return jp.createElement.apply(void 0,["div",{className:n.root}].concat([jp.createElement.apply(void 0,[ms,M([new Yp(64,"Label","With filled TextField"),new Yp(57,"Id","filled-simple-start-adornment"),new ze(2,"Variant","filled"),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"filled"}].concat(["Kg"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new ze(1,"Select",!0),new Yp(64,"Label","With Select"),new Yp(119,"Value",r.state.weightRange),new ze(2,"Variant","filled"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new sc(e.amount,e.password,e.weight,t,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"filled"}].concat(["Kg"]))}]],1)].concat(rc(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[0],value:e[0]}].concat([e[1]]))},ac)))),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","filled-adornment-amount"),new Yp(119,"Value",r.state.amount),new Yp(64,"Label","Amount"),new ze(2,"Variant","filled"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new sc(t,e.password,e.weight,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"filled"}].concat(["$"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","filled-adornment-weight"),new Yp(119,"Value",r.state.weight),new Yp(64,"Label","Weight"),new ze(2,"Variant","filled"),new ze(0,"HelperText","Weight"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new sc(e.amount,e.password,t,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{endAdornment:jp.createElement.apply(void 0,[es,{position:"end",variant:"filled"}].concat(["Kg"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","filled-adornment-password"),new Yp(119,"Value",r.state.password),new Yp(64,"Label","Password"),new Yp(117,"Type",r.state.showPassword?"text":"password"),new ze(2,"Variant","filled"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new sc(e.amount,t,e.weight,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{endAdornment:jp.createElement.apply(void 0,[es,{position:"end",variant:"filled"}].concat([jp.createElement.apply(void 0,[Xa,(e={},tc(e,"aria-label","Toggle password visibility"),tc(e,"onClick",function(e){r.setState(function(e,n){return new sc(e.amount,e.password,e.weight,e.weightRange,!e.showPassword)})}),e)].concat([jp.createElement.apply(void 0,[Za,{}].concat([r.state.showPassword?"visibility_off":"visibility"]))]))]))}]],1)].concat([]))]))};var pc=ys(function(e){return zp([Le("root",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("textField",new Y(new Jp(135,"FlexBasis",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[oc,e].concat([]))});function ic(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function lc(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var cc=zp([["0-20","0 to 20"],["21-50","21 to 50"],["51-100","51 to 100"]]),mc=x(function(e,n,t,r,a){this.amount=e,this.password=n,this.weight=t,this.weightRange=r,this.showPassword=a},k);var dc=x(function(e){jp.Component.call(this,e),this.state=new mc("","","","",!1)},jp.Component);dc.prototype.render=function(){var e,r=this,n=r.props.classes;return jp.createElement.apply(void 0,["div",{className:n.root}].concat([jp.createElement.apply(void 0,[ms,M([new Yp(64,"Label","With outlined TextField"),new Yp(57,"Id","outlined-simple-start-adornment"),new ze(2,"Variant","outlined"),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"outlined"}].concat(["Kg"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new ze(1,"Select",!0),new Yp(64,"Label","With Select"),new Yp(119,"Value",r.state.weightRange),new ze(2,"Variant","outlined"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new mc(e.amount,e.password,e.weight,t,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"outlined"}].concat(["Kg"]))}]],1)].concat(lc(Op(function(e){return jp.createElement.apply(void 0,[ss,{key:e[0],value:e[0]}].concat([e[1]]))},cc)))),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","outlined-adornment-amount"),new Yp(119,"Value",r.state.amount),new Yp(64,"Label","Amount"),new ze(2,"Variant","outlined"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new mc(t,e.password,e.weight,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{startAdornment:jp.createElement.apply(void 0,[es,{position:"start",variant:"outlined"}].concat(["$"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","outlined-adornment-weight"),new Yp(119,"Value",r.state.weight),new Yp(64,"Label","Weight"),new ze(2,"Variant","outlined"),new ze(0,"HelperText","Weight"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new mc(e.amount,e.password,t,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{endAdornment:jp.createElement.apply(void 0,[es,{position:"end",variant:"outlined"}].concat(["Kg"]))}]],1)].concat([])),jp.createElement.apply(void 0,[ms,M([new Yp(57,"Id","outlined-adornment-password"),new Yp(119,"Value",r.state.password),new Yp(64,"Label","Password"),new Yp(117,"Type",r.state.showPassword?"text":"password"),new ze(2,"Variant","outlined"),new Gp(9,"OnChange",function(e){var n,t;n=r,t=Kp(e),n.setState(function(e,n){return new mc(e.amount,t,e.weight,e.weightRange,e.showPassword)})}),qp(zp([[n.margin,!0],[n.textField,!0]])),["InputProps",{endAdornment:jp.createElement.apply(void 0,[es,{position:"end",variant:"outlined"}].concat([jp.createElement.apply(void 0,[Xa,(e={},ic(e,"aria-label","Toggle password visibility"),ic(e,"onClick",function(e){r.setState(function(e,n){return new mc(e.amount,e.password,e.weight,e.weightRange,!e.showPassword)})}),e)].concat([jp.createElement.apply(void 0,[Za,{}].concat([r.state.showPassword?"visibility_off":"visibility"]))]))]))}]],1)].concat([]))]))};var uc=ys(function(e){return zp([Le("root",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("textField",new Y(new Jp(135,"FlexBasis",200),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,[dc,e].concat([]))});function hc(e){return M(e,1)}var bc=gs(zp([["typography",{useNextVariants:!0}],["palette",{primary:{main:ke[500]}}]]));var yc=ys(function(e){return zp([Le("container",zp([new Jp(125,"Display","flex"),new Jp(143,"FlexWrap","wrap")])),Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),Le("cssLabel",new Y(["&$cssFocused",hc([new Jp(103,"Color",De[500])])],new Y)),Le("cssFocused",new Y),Le("cssUnderline",new Y(["&:after",hc([new Jp(43,"BorderBottomColor",De[500])])],new Y)),Le("bootstrapRoot",new Y(["label + &",hc([new Jp(225,"MarginTop",3*e.spacing.unit)])],new Y)),Le("bootstrapInput",zp([new Jp(69,"BorderRadius",4),new Jp(21,"BackgroundColor",e.palette.common.white),new Jp(33,"Border","1px solid #ced4da"),new Jp(153,"FontSize",16),new Jp(273,"Padding","10px 12px"),new Jp(372,"Transition",e.transitions.create(zp(["border-color","box-shadow"]))),new Jp(149,"FontFamily",Qo.apply(void 0,[","].concat(["-apple-system","BlinkMacSystemFont",'"Segou UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"']))),["&:focus",hc([new Jp(49,"BorderColor","#80bdff"),new Jp(92,"BoxShadow","0 0 0 0.2rem rgba(0,123,255,.25)")])]])),Le("bootstrapFormLabel",new Y(new Jp(153,"FontSize",18),new Y))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{className:n.container}].concat([jp.createElement.apply(void 0,[Ja,{className:n.margin}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"custom-css-input",FormLabelClasses:{root:n.cssLabel,focused:n.cssFocused}}].concat(["Custom CSS"])),jp.createElement.apply(void 0,[Qa,{id:"custom-css-input",classes:{underline:n.cssUnderline}}].concat([]))])),jp.createElement.apply(void 0,[fs,{theme:bc}].concat([jp.createElement.apply(void 0,[ms,{className:n.margin,label:"MuiThemeProvider",id:"mui-theme-provider-input"}].concat([]))])),jp.createElement.apply(void 0,[Ja,{className:n.margin}].concat([jp.createElement.apply(void 0,[ts,{shrink:!0,htmlFor:"bootstrap-input",className:n.bootstrapFormLabel}].concat(["Bootstrap"])),jp.createElement.apply(void 0,[ns,{id:"bootstrap-input",defaultValue:"react-bootstrap",classes:{root:n.bootstrapRoot,input:n.bootstrapInput}}].concat([]))])),jp.createElement.apply(void 0,[ns,{className:n.margin,defaultValue:"Naked input"}].concat([]))]))});var fc=ys(function(e){return new Y(Le("margin",new Y(new Jp(217,"Margin",e.spacing.unit),new Y)),new Y)},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[Ja,{className:n.margin}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"input-with-icon-adornment"}].concat(["With a start adornment"])),jp.createElement.apply(void 0,[Qa,{id:"input-with-icon-adornment",startAdornment:jp.createElement.apply(void 0,[es,{position:"start"}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["account_circle"]))]))}].concat([]))])),jp.createElement.apply(void 0,[ms,{className:n.margin,id:"input-with-icon-textfield",label:"TextField",InputProps:{startAdornment:jp.createElement.apply(void 0,[es,{position:"start"}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["account_circle"]))]))}}].concat([])),jp.createElement.apply(void 0,["div",{className:n.margin}].concat([jp.createElement.apply(void 0,[Ka,{container:!0,spacing:8,alignItems:"flex-end"}].concat([jp.createElement.apply(void 0,[Ka,{item:!0}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["account_circle"]))])),jp.createElement.apply(void 0,[Ka,{item:!0}].concat([jp.createElement.apply(void 0,[ms,{id:"input-with-icon-grid",label:"With a grid"}].concat([]))]))]))]))]))});var gc=Tl.a,Cc="\r\n## TextField\r\n\r\nThe `TextField` wrapper component is a complete form control including a label, input and help text.\r\n",Sc="\r\n## Outlined\r\n\r\n`TextField` supports outlined styling.\r\n",Pc="\r\n## Filled\r\n\r\n`TextField` supports filled styling.\r\n",wc="\r\n## Components\r\n\r\n`TextField` is composed of smaller components (\r\n`FormControl`,\r\n`Input`,\r\n`InputLabel`,\r\nand `FormHelperText`\r\n) that you can leverage directly to significantly customize your form inputs.\r\n\r\nYou might also have noticed that some native HTML input properties are missing from the `TextField` component.\r\nThis is on purpose.\r\nThe component takes care of the most used properties, then it's up to the user to use the underlying component shown in the following demo. Still, you can use `inputProps` (and `InputProps`, `InputLabelProps` properties) if you want to avoid some boilerplate.\r\n",Tc="\r\n## Layout\r\n\r\n`TextField`, `FormControl` allow the specification of `margin` to alter the vertical spacing of inputs. Using\r\n`none` (default) will not apply margins to the `FormControl`, whereas `dense` and `normal` will as well as alter\r\nother styles to meet the specification.\r\n",vc="\r\n## Input Adornments\r\n\r\n`Input` allows the provision of `InputAdornment`.\r\nThese can be used to add a prefix, a suffix or an action to an input.\r\nFor instance, you can use an icon button to hide or reveal the password.\r\n",Mc="\r\n## Customized inputs\r\n\r\nIf you have been reading the overrides documentation page\r\nbut you are not confident jumping in, here's an example of how you can change the main color of an Input.\r\n",Ic="\r\n## With icon\r\n\r\nIcons can be specified as prepended or appended.\r\n";function xc(){return jp.createElement.apply(void 0,["div",{}].concat([ui(gc),xi(Cc,"./Demos/TextFields/TextField.fs",function(){return jp.createElement.apply(void 0,[Fl,{}].concat([]))}),xi(Sc,"./Demos/TextFields/Outlined.fs",function(){return jp.createElement.apply(void 0,[Rl,{}].concat([]))}),xi(Pc,"./Demos/TextFields/Filled.fs",function(){return jp.createElement.apply(void 0,[zl,{}].concat([]))}),xi(wc,"./Demos/TextFields/Composed.fs",function(){return jp.createElement.apply(void 0,[Yl,{}].concat([]))}),xi("## Input","./Demos/TextFields/Input.fs",function(){return jp.createElement.apply(void 0,[ql,{}].concat([]))}),xi(Tc,"./Demos/TextFields/Layout.fs",function(){return jp.createElement.apply(void 0,[Kl,{}].concat([]))}),xi(vc,"./Demos/TextFields/InputAdornments.fs",function(){return jp.createElement.apply(void 0,[nc,{}].concat([]))}),xi("## Filled Input Adornments","./Demos/TextFields/FilledInputAdornments.fs",function(){return jp.createElement.apply(void 0,[pc,{}].concat([]))}),xi("## Outlined Input Adornments","./Demos/TextFields/OutlinedInputAdornments.fs",function(){return jp.createElement.apply(void 0,[uc,{}].concat([]))}),xi(Mc,"./Demos/TextFields/Customized.fs",function(){return jp.createElement.apply(void 0,[yc,{}].concat([]))}),xi(Ic,"./Demos/TextFields/WithIcon.fs",function(){return jp.createElement.apply(void 0,[fc,{}].concat([]))})]))}function Ac(e){var n,t=e.breakpoints.up(400+3*e.spacing.unit*2);return zp([Le("layout",zp([new Jp(394,"Width","auto"),new Jp(125,"Display","block"),new Jp(223,"MarginLeft",3*e.spacing.unit),new Jp(224,"MarginRight",3*e.spacing.unit),[t,(n=zp([new Jp(394,"Width",400),new Jp(223,"MarginLeft","auto"),new Jp(224,"MarginRight","auto")]),M(n,1))]])),Le("paper",zp([new Jp(225,"MarginTop",8*e.spacing.unit),new Jp(125,"Display","Flex"),new Jp(136,"FlexDirection","column"),new Jp(1,"AlignItems","center"),new Jp(273,"Padding",Zo($o("%ipx %ipx %ipx"))(2*e.spacing.unit)(3*e.spacing.unit)(3*e.spacing.unit))])),Le("avatar",zp([new Jp(217,"Margin",e.spacing.unit),new Jp(21,"BackgroundColor",e.palette.secondary.main)])),Le("form",zp([new Jp(394,"Width","100%"),new Jp(225,"MarginTop",e.spacing.unit)])),Le("submit",new Y(new Jp(225,"MarginTop",3*e.spacing.unit),new Y))])}var Fc=jp.createElement.apply(void 0,[ps,{}].concat([jp.createElement.apply(void 0,["path",{d:"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"}].concat([]))]));function Lc(e){var n=e.classes;return jp.createElement.apply(void 0,["main",{className:n.layout}].concat([jp.createElement.apply(void 0,[os,{className:n.paper}].concat([jp.createElement.apply(void 0,[Ua,{className:n.avatar}].concat([Fc])),jp.createElement.apply(void 0,[hs,{variant:"h5"}].concat(["Sign in"])),jp.createElement.apply(void 0,["form",{className:n.form}].concat([jp.createElement.apply(void 0,[Ja,{margin:"normal",required:!0,fullWidth:!0}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"email"}].concat(["Email Address"])),jp.createElement.apply(void 0,[Qa,{id:"email",name:"email",autoComplete:"email",autoFocus:!0}].concat([]))])),jp.createElement.apply(void 0,[Ja,{margin:"normal",required:!0,fullWidth:!0}].concat([jp.createElement.apply(void 0,[ts,{htmlFor:"password"}].concat(["Password"])),jp.createElement.apply(void 0,[Qa,{name:"password",type:"password",id:"password",autoComplete:"current-password"}].concat([]))])),jp.createElement.apply(void 0,[Va,{type:"submit",fullWidth:!0,variant:"contained",color:"primary",className:n.submit}].concat(["Sign in"]))]))]))]))}function Hc(){return jp.createElement.apply(void 0,[(e=Lc,ys(Ac,new Y,e)),{}].concat([]));var e}var Dc=t(221),Nc=t.n(Dc);function kc(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Rc=ys(new Y(Le("root",zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)")])),new Y),new Y,function(e){return jp.createElement.apply(void 0,[Va,M([qp(zp([[e.classes.root,!0],[e.className,!0]]))],1)].concat(kc(e.children)))});var Ec=ys(zp([Le("root",zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)")])),Le("label",new Y(new Jp(362,"TextTransform","capitalize"),new Y))]),new Y,function(e){return jp.createElement.apply(void 0,[Va,{classes:{root:e.classes.root,label:e.classes.label}}].concat(["classes nesting"]))});var Bc=ys(zp([Le("root",zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)")])),Le("label",new Y(new Jp(362,"TextTransform","capitalize"),new Y))]),new Y,Va);var Oc=ys(zp([Le("root",zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)"),["&$disabled",{background:"rgba(0,0,0,0.12)",color:"white",boxShadow:"none"}]])),Le("disabled",new Y)]),new Y,function(e){return jp.createElement.apply(void 0,[Va,{disabled:!0,classes:{root:e.classes.root,disabled:e.classes.disabled}}].concat(["classes state"]))});var Uc=zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)")]);var Vc=Nc.a,zc="\r\n### Overriding with class names\r\n\r\nThe first way to override the style of a component is to use **class names**.\r\nEvery component provides a `className` property which is always applied to the root element.\r\n\r\nIn this example, we are using the [`withStyles()`](#/customization/css-in-js) higher-order\r\ncomponent to inject custom styles into the DOM, and to pass the class name to the `ClassNames` component via\r\nits `classes` prop. You can choose any other styling solution, or even plain CSS to create the styles, but be sure to\r\nconsider the [CSS injection order](https://material-ui.com/customization/css-in-js/#css-injection-order), as the CSS injected into the DOM\r\nby Material-UI to style a component has the highest specificity possible since the `<link>` is injected at the bottom\r\nof the `<head />` to ensure the components always render correctly.\r\n",jc="\r\n### Overriding with classes\r\n\r\nWhen the `className` property isn't enough, and you need to access deeper elements, you can take advantage of the `classes` property to customize all the CSS injected by Material-UI for a given component.\r\nThe list of  classes for each\r\ncomponent is documented in the **Component API** section.\r\n\r\nThis example also uses `withStyles()` (see above), but here, `ClassesNesting` is using `Button`'s `classes` prop to\r\nprovide an object that maps the **names of classes to override** (keys) to the **CSS class names to apply** (values).\r\nThe component's existing classes will continue to be injected, so it is only necessary to provide the specific styles\r\nyou wish to add or override.\r\n\r\nNotice that in addition to the button styling, the button label's capitalization has been changed:\r\n",Wc='\r\n#### Shorthand\r\n\r\nThe above code example can be condensed by using **the same CSS API** as the child component.\r\nIn this example, the `withStyles()` higher-order component is injecting a `classes` property that is used by the `Button` component.\r\n```fsharp\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Background "linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"\r\n        CSSProp.BorderRadius 3\r\n        CSSProp.Border 0\r\n        CSSProp.Color "white"\r\n        CSSProp.Height 48\r\n        CSSProp.Padding "0 30px"\r\n        CSSProp.BoxShadow "0 3px 5px 2px rgba(255, 105, 135, .3)"\r\n    ]\r\n    Styles.Label [\r\n        CSSProp.TextTransform "capitalize"\r\n    ]\r\n]\r\n\r\nlet styledButton = withStyles (StyleType.Styles styles) [] !!MaterialUI.Button\r\n```\r\n',_c='\r\n#### Internal states\r\n\r\nAside from accessing nested elements, the `classes` property can be used to customize the internal states of Material-UI components.\r\nThe components internal states, like `:hover`, `:focus`, `disabled` and `selected`, are styled with a higher CSS specificity.\r\n[Specificity is a weight](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) that is applied to a given CSS declaration.\r\nIn order to override the components internal states, **you need to increase specificity**.\r\nHere is an example with the `disable` state and the button component:\r\n\r\n```css\r\n.classes-state-root {\r\n  /* ... */\r\n}\r\n.classes-state-root.disabled {\r\n  color: white;\r\n}\r\n```\r\n\r\n```fsharp\r\n\r\nbutton [\r\n    HTMLAttr.Disabled true\r\n    MaterialProp.Classes [\r\n        ClassNames.Root "classes-state-root"\r\n        ClassNames.Disabled "disabled"\r\n    ]\r\n] []\r\n\r\n```\r\n\r\n#### Use `$ruleName` to reference a local rule within the same style sheet\r\n\r\nThe [jss-nested](https://github.com/cssinjs/jss-nested) plugin (available by default) can make the process of increasing specificity easier.\r\n\r\n```fsharp\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.Custom ("&$disabled", [\r\n            CSSProp.Color "white"\r\n        ] |> keyValueList CaseRules.LowerFirst)\r\n    ]\r\n    Styles.Disabled []\r\n]\r\n```\r\n\r\ncompiles to:\r\n\r\n```css\r\n.root-x.disable-x {\r\n  color: white;\r\n}\r\n```\r\n',Gc="\r\n### Overriding with inline-style\r\n\r\nThe second way to override the style of a component is to use the **inline-style** approach.\r\nEvery component provides a `style` property.\r\nThese properties are always applied to the root element.\r\n\r\nYou don't have to worry about CSS specificity as the inline-style takes precedence over the regular CSS.\r\n",Yc='\r\n## 2. Material Design variations\r\n\r\nThe Material Design specification documents different variations of certain components, such as how buttons come in different shapes: [text](https://material.io/design/components/buttons.html#text-button) (formerly "flat"), [contained](https://material.io/design/components/buttons.html#contained-button) (formerly "raised"), [FAB](https://material.io/design/components/buttons-floating-action-button.html) and more.\r\n\r\nMaterial-UI attempts to implement all of these variations.\r\n',Jc="\r\n## 3. Global theme variation\r\n\r\n### Theme variables\r\n\r\nIn order to promote consistency between components, and manage the user interface appearance as a whole, Material-UI provides a mechanism to apply global changes by adjusting the [theme configuration variables](#/customization/themes).\r\n\r\n### Global theme override\r\n\r\nDo you want to customize **all the instances** of a component type?\r\n\r\nWhen the configuration variables aren't powerful enough,\r\nyou can take advantage of the `overrides` key of the `theme` to potentially change every single style injected by Material-UI into the DOM.\r\nLearn more about it in the [themes section](#/customization/themes) of the documentation.\r\n\r\n### Global CSS override\r\n\r\nYou can also customize all instances of a component with CSS.\r\nWe expose a `dangerouslyUseGlobalCSS` option to do so.\r\nLearn more about it in the [CSS in JS section](#/customization/css-in-js) of the documentation. It's very similar to how you would customize Bootstrap.\r\n";function qc(){return jp.createElement.apply(void 0,["div",{}].concat([ui(Vc),xi(zc,"./Customization/Overrides/ClassNames.fs",function(){return jp.createElement.apply(void 0,[Rc,{}].concat(["class names"]))}),xi(jc,"./Customization/Overrides/ClassNesting.fs",function(){return jp.createElement.apply(void 0,[Ec,{}].concat([]))}),xi(Wc,"./Customization/Overrides/ShortlandClasses.fs",function(){return jp.createElement.apply(void 0,[Bc,{}].concat(["Classes Shortland"]))}),xi(_c,"./Customization/Overrides/InternalState.fs",function(){return jp.createElement.apply(void 0,[Oc,{}].concat([]))}),xi(Gc,"./Customization/Overrides/InlineStyle.fs",function(){return jp.createElement.apply(void 0,[Va,M([["style",M(Uc,1)]],1)].concat(["inline-style"]))}),ui("[When should I use inline-style vs classes?](https://material-ui.com/getting-started/faq/#when-should-i-use-inline-style-vs-classes-)"),ui(Yc),ui(Jc)]))}var Kc=t(222),$c=t.n(Kc),Zc=gs(zp([["typography",{useNextVariants:!0}],["palette",{primary:{main:De[500]},secondary:{main:"#11cb5f"}}]]));var Xc=gs(zp([["palette",{type:"dark"}],["typography",{useNextVariants:!0}]]));var Qc=Cs(function(e){var n=e.theme,t=n.palette.text.primary,r=n.palette.primary.main,a=zp([new Jp(21,"BackgroundColor",n.palette.background.default),new Jp(273,"Padding","8px 16px"),new Jp(103,"Color",t)]),s=zp([new Jp(21,"BackgroundColor",r),new Jp(273,"Padding","8px 16px"),new Jp(103,"Color",n.palette.common.white)]);return jp.createElement.apply(void 0,["div",M([["style",{width:300}]],1)].concat([jp.createElement.apply(void 0,[hs,M([["style",M(s,1)]],1)].concat(["Primary color "+r])),jp.createElement.apply(void 0,[hs,M([["style",M(a,1)]],1)].concat(["Primary text "+t]))]))});var em,nm,tm,rm=new Y(Le("root",new Y(new Jp(125,"Display","flex"),new Y)),new Y),am=gs(new Y(["typography",M([new We(6,"UseNextVariants",!0),new We(0,"FontFamily",Qo.apply(void 0,[","].concat(["-apple-system","BlinkMacSystemFont",'"Segou UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"']))),new We(4,"FontWeightMedium",500),(tm=new Y(new je(3,"FontWeight","500"),new Y),["body1",M(tm,1)]),(nm=new Y(new je(2,"FontSize","12"),new Y),["subtitle1",M(nm,1)]),(em=new Y(["fontStyle","italic"],new Y),["button",M(em,1)])],1)],new Y));var sm=ys(rm,new Y,function(e){var n=jp.createElement.apply(void 0,["div",{}].concat([jp.createElement.apply(void 0,[hs,{}].concat(["body1"])),jp.createElement.apply(void 0,[hs,{variant:"subtitle1"}].concat(["subtitle"])),jp.createElement.apply(void 0,[Va,{}].concat(["button"]))]));return jp.createElement.apply(void 0,["div",{className:e.classes.root}].concat([n,jp.createElement.apply(void 0,[fs,{theme:am}].concat([n]))]))});var om=gs(new Y(["typography",{useNextVariants:!0,htmlFontSize:"10"}],new Y));var pm=ys(function(e){return zp([Le("root",zp([new Jp(103,"Color",e.status.danger),["&$checked",{color:e.status.danger}]])),Le("checked",new Y)])},new Y,function(e){return jp.createElement.apply(void 0,[za,{defaultChecked:!0,classes:{root:e.classes.root,checked:e.classes.checked}}].concat([]))}),im=gs(zp([["typography",{useNextVariants:!0}],["status",{danger:Re[500]}]]));var lm=gs(zp([["typography",{useNextVariants:!0}],["overrides",{MuiButton:M([Le("root",zp([new Jp(17,"Background","linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"),new Jp(69,"BorderRadius",3),new Jp(33,"Border",0),new Jp(103,"Color","white"),new Jp(189,"Height",48),new Jp(273,"Padding","0 30px"),new Jp(92,"BoxShadow","0 3px 5px 2px rgba(255, 105, 135, .3)")]))],1)}]]));var cm=gs(zp([["typography",{useNextVariants:!0}],["props",{MuiButtonBase:{disableRipple:!0}}]]));var mm=Cs(function(e){var n=e.theme,t=n.palette.text.primary,r=n.palette.primary.main,a=zp([new Jp(21,"BackgroundColor",n.palette.background.default),new Jp(273,"Padding",Zo($o("%dpx %dpx"))(n.spacing.unit)(2*n.spacing.unit)),new Jp(103,"Color",t)]),s=zp([new Jp(21,"BackgroundColor",r),new Jp(273,"Padding",Zo($o("%dpx %dpx"))(n.spacing.unit)(2*n.spacing.unit)),new Jp(103,"Color",n.palette.common.white)]);return jp.createElement.apply(void 0,["div",M([["style",{width:300}]],1)].concat([jp.createElement.apply(void 0,[hs,M([["style",M(s,1)]],1)].concat(["Primary color "+r])),jp.createElement.apply(void 0,[hs,M([["style",M(a,1)]],1)].concat(["Primary text "+t]))]))});var dm=ys(function(e){return zp([Le("root",zp([new Jp(103,"Color",e.status.color),["&$checked",{color:e.status.color}]])),Le("checked",new Y)])},new Y,function(e){return jp.createElement.apply(void 0,[za,{defaultChecked:!0,classes:{root:e.classes.root,checked:e.classes.checked}}].concat([]))}),um=gs(zp([["typography",{useNextVariants:!0}],["status",{color:Re[500]}]])),hm=gs(zp([["typography",{useNextVariants:!0}],["status",{color:ke[500]}]]));function bm(e){var n=Object.assign({},e);return n.status.color=He[500],n}var ym=$c.a,fm="\r\n#### Color tool\r\n\r\nNeed inspiration? The Material Design team has built an awesome\r\n[palette configuration tool](https://material-ui.com/style/color/#color-tool) to help you.\r\n",gm="\r\n### Type (light /dark theme)\r\n\r\nYou can make the theme dark by setting `PaletteProp.Type` to `PaletteType.Dark`.\r\nWhile it's only a single property value change, internally it modifies the value of the following keys:\r\n- `palette.text`\r\n- `palette.divider`\r\n- `palette.background`\r\n- `palette.action`\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Type PaletteType.Dark\r\n                ]\r\n            ]\r\n```\r\n",Cm="\r\n### Typography\r\n\r\nToo many type sizes and styles at once can spoil any layout.\r\nThe theme provides a **limited set of type sizes** that work well together along with the layout grid.\r\nThese sizes are used across the components.\r\n\r\nHave a look at the following example regarding changing the default values, such as the font family.\r\n",Sm='\r\n### Typography - Font family\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.UseNextVariants true\r\n                    ThemeTypographyProp.FontFamily ([\r\n                        "-apple-system"\r\n                        "BlinkMacSystemFont"\r\n                        "\\"Segou UI\\""\r\n                        "Roboto"\r\n                        "\\"Helvetica Neue\\""\r\n                        "Arial"\r\n                        "sans-serif"\r\n                        "\\"Apple Color Emoji\\""\r\n                        "\\"Segoe UI Emoji\\""\r\n                        "\\"Segoe UI Symbol\\"" ] |> String.concat(","))\r\n                ]\r\n            ]\r\n```\r\n',Pm='\r\n### Typography - Font size\r\n\r\nMaterial-UI uses `rem` units for the font size.\r\nThe browser `<html>` element default font size is `16px`, but browsers have an option to change this value,\r\nso `rem` units allow us to accommodate the user\'s settings, resulting in a much better user experience.\r\nUsers change font size settings for all kinds of reasons, from poor eyesight to choosing optimum settings\r\nfor devices that can be vastly different in size and viewing distance.\r\n\r\nTo change the font-size of Material-UI you can provide a `ThemeTypographyProp.FontSize` property.\r\nThe default value is `14px`.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    ThemeTypographyProp.FontSize "12"\r\n                ]\r\n            ]\r\n```\r\nThe computed font size by the browser follows this mathematical equation:\r\n\r\n![font-size](img/font-size.gif)\r\n',wm="\r\n### Typography - HTML font size\r\n\r\nYou might want to change the `<html>` element default font size. For instance, when using the [10px simplification](https://www.sitepoint.com/understanding-and-using-rem-units-in-css/).\r\nWe provide a `ThemeTypographyProp.HtmlFontSize` theme property for this use case.\r\nIt's telling Material-UI what's the font-size on the `<html>` element is.\r\nIt's used to adjust the `rem` value so the calculated font-size always match the specification.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Typography [\r\n                    // Tell Material-UI what's the font-size on the html element is.\r\n                    ThemeTypographyProp.HtmlFontSize \"12\"\r\n                ]\r\n            ]\r\n```\r\n\r\n```css\r\nhtml {\r\n  font-size: 62.5%; /* 62.5% of 16px = 10px */\r\n}\r\n```\r\n\r\n*You need to apply the above CSS on the html element of this page to see the below demo rendered correctly*\r\n",Tm="\r\n### Custom variables\r\n\r\nWhen using Material-UI's [styling solution](#/customization/css-in-js) with your own components,\r\nyou can also take advantage of the theme.\r\nIt can be convenient to add additional variables to the theme so you can use them everywhere.\r\nFor instance:\r\n",vm='\r\n### Other variables\r\n\r\nIn addition to the palette, dark and light types, and typography, the theme normalizes implementation by providing many more default values, such as breakpoints, shadows, transitions, etc.\r\nYou can check out the \r\n<a href="https://material-ui.com/customization/default-theme/" target="_blank">default theme section</a> to view the default theme in full.\r\n',Mm="\r\n## Customizing all instances of a component type\r\n\r\n### CSS\r\n\r\nWhen the configuration variables aren't powerful enough, you can take advantage of the\r\n`ThemeProp.Overrides` key of the `theme` to potentially change every single **style** injected by Material-UI into the DOM.\r\nThat's a really powerful feature.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Overrides [\r\n                    Overrides.MuiButton [ // Name of the component ⚛️ / style sheet\r\n                        Styles.Root [ // Name of the rule\r\n                            CSSProp.Color \"white\" // Some CSS\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n",Im="\r\n### Properties\r\n\r\nYou can also apply properties on all the instances of a component type.\r\nWe expose a `ThemeProp.Props` key in the `theme` for this use case.\r\n\r\n```fsharp\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Props [\r\n                    // Name of the component ⚛️\r\n                    ThemePropsProp.MuiButtonBase [\r\n                        // The properties to apply\r\n                        MaterialProp.DisableRipple true // No more ripple, on the whole application!\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n",xm="\r\n## Accessing the theme in a component\r\n\r\nYou might need to access the theme variables inside your React components.\r\nLet's say you want to display the value of the primary color, you can use the `withTheme()` higher-order component to do so. Here is an example:\r\n",Am="\r\n## Nesting the theme\r\n\r\nThe theming solution is very flexible, as you can nest multiple theme providers.\r\nThis can be really useful when dealing with different area of your application that have distinct appearance from each other.\r\n",Fm="\r\n#### A note on performance\r\n\r\nThe performance implications of nesting the `MuiThemeProvider` component are linked to JSS's work behind the scenes.\r\nThe main point to understand is that we cache the injected CSS with the following tuple `(styles, theme)`.\r\n- `theme`: If you provide a new theme at each render, a new CSS object will be computed and injected. Both for UI consistency and performance, it's better to render a limited number of theme objects.\r\n- `styles`: The larger the styles object is, the more work is needed.\r\n",Lm="\r\n## API\r\n\r\n### `muiThemeProvider`\r\n\r\nThis component takes a `MuiThemeProviderProp.Theme` property, and makes the `theme` available down the React tree thanks to React context.\r\nIt should preferably be used at **the root of your component tree**.\r\n\r\n\x3c!--You can see the full properties API in [this dedicated page](/api/mui-theme-provider/).--\x3e\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\nlet theme = createMuiTheme []\r\n\r\nlet view () =\r\n    muiThemeProvider [ MuiThemeProviderProp.Theme (ProviderTheme.Theme theme) ] [\r\n        div [] [] // your application components\r\n    ]\r\n```\r\n\r\n### `createMuiTheme (options : ThemeProp list) : ITheme`\r\n\r\nGenerate a theme base on the options received.\r\n\r\n#### Arguments\r\n\r\n1. `options` (*ThemeProp list*): Takes an incomplete list of `ThemeProp`s and adds the missing parts.\r\n\r\n```fsharp\r\ntype ThemeProp =\r\n    | Direction of Themes.TextDirection\r\n    | Shadows of string list\r\n    | [<Erase>] Custom of string*obj\r\n\r\nThemeProp.Palette (props : PaletteProp list) : ThemeProp\r\nThemeProp.Shape (props : ShapeProp list) : ThemeProp\r\nThemeProp.Spacing (props : SpacingProp list) : ThemeProp\r\nThemeProp.Typography (props : ThemeTypographyProp list) : ThemeProp\r\nThemeProp.ZIndex (props : ZIndexProp list) : ThemeProp\r\nThemeProp.Overrides (props : IOverridesProp list) : ThemeProp\r\n```\r\n\r\nYou can find full list of `Theme` options and subprops [here](https://github.com/mvsmal/fable-material-ui/blob/master/src/Fable.Helpers.MaterialUI.Props.fs#L1711-L1962)\r\n\r\n#### Returns\r\n\r\n`theme` (*ITheme*): A complete, ready to use theme object.\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\nopen Fable.MaterialUI\r\n\r\nlet theme = createMuiTheme [\r\n                ThemeProp.Palette [\r\n                    PaletteProp.Primary [\r\n                        PaletteIntentionProp.Main Colors.purple.``500``\r\n                    ]\r\n                    PaletteProp.Secondary [\r\n                        PaletteIntentionProp.Main \"#11cb5f\"\r\n                    ]\r\n                ]\r\n            ]\r\n```\r\n\r\n\r\n### `withTheme<'P when 'P :> IThemeProps> (fn : ('P -> ReactElement)) : ClassComponent<'P>`\r\n\r\nProvide the `theme` object as a property of the input component so it can be used\r\nin the render method.\r\n\r\n#### Arguments\r\n\r\n1. `fn` (*'P -> ReactElement*): The function which expects `props : 'P` argument and returns `ReactElement`.\r\n`'P` should inherit `IThemeProps`\r\n\r\n#### Returns\r\n\r\n`Component` (*ClassComponent<'P>*): The new component created.\r\n\r\n#### Examples\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\nlet myFun (props : IThemeProps) =\r\n    div [] [ str props.theme.palette.primary.main ]\r\n\r\nlet myFunWithTheme = withTheme myFun\r\n\r\nlet myComponent () =\r\n    from myFunWithTheme createEmpty<IThemeProps> []\r\n\r\n```\r\n\r\n```fsharp\r\nopen Fable.Helpers.MaterialUI\r\n\r\ntype MyFunProps =\r\n    abstract foo : string with get,set\r\n    inherit IThemeProps\r\n\r\nlet myFun (props : MyFunProps) =\r\n    div [] [\r\n        str props.theme.palette.primary.main \r\n        str props.foo\r\n    ]\r\n\r\nlet myFunWithTheme = withTheme myFun\r\n\r\nlet myComponent () =\r\n    let props = createEmpty<MyFunProps>\r\n    props.foo <- \"bar\"\r\n    from myFunWithTheme props []\r\n```\r\n";function Hm(){return jp.createElement.apply(void 0,["div",{}].concat([ui(ym),xi("#### Example","./Customization/Themes/Palette.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:Zc}].concat([jp.createElement.apply(void 0,[Va,{color:"primary"}].concat(["Primary"])),jp.createElement.apply(void 0,[Va,{color:"secondary"}].concat(["Secondary"]))]))}),ui(fm),xi(gm,"./Customization/Themes/DarkTheme.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:Xc}].concat([jp.createElement.apply(void 0,[Qc,{}].concat([]))]))}),xi(Cm,"./Customization/Themes/TypographyTheme.fs",function(){return jp.createElement.apply(void 0,[sm,{}].concat([]))}),ui(Sm),ui(Pm),xi(wm,"./Customization/Themes/FontSizeTheme.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:om}].concat([jp.createElement.apply(void 0,[hs,{}].concat(["body1"]))]))}),xi(Tm,"./Customization/Themes/CustomStyles.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:im}].concat([jp.createElement.apply(void 0,[pm,{}].concat([]))]))}),ui(vm),xi(Mm,"./Customization/Themes/OverrideCss.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:lm}].concat([jp.createElement.apply(void 0,[Va,{}].concat(["Override CSS"]))]))}),xi(Im,"./Customization/Themes/OverrideProperties.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:cm}].concat([jp.createElement.apply(void 0,[Va,{}].concat(["Override properties"]))]))}),xi(xm,"./Customization/Themes/WithTheme.fs",function(){return jp.createElement.apply(void 0,[mm,{}].concat([]))}),xi(Am,"./Customization/Themes/Nested.fs",function(){return jp.createElement.apply(void 0,[fs,{theme:um}].concat([jp.createElement.apply(void 0,[dm,{}].concat([])),jp.createElement.apply(void 0,[fs,{theme:hm}].concat([jp.createElement.apply(void 0,[dm,{}].concat([]))])),jp.createElement.apply(void 0,[fs,{theme:bm}].concat([jp.createElement.apply(void 0,[dm,{}].concat([]))]))]))}),ui(Fm),ui(Lm)]))}var Dm=t(223),Nm=t.n(Dm);function km(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Rm=ys(function(e){return zp([Le("root",zp([new Jp(103,"Color","inherit"),new Jp(329,"TextDecoration","inherit"),["&:hover",{textDecoration:"underline"}]])),Le("primary",new Y(new Jp(103,"Color",e.palette.primary.main),new Y))])},new Y,function(e){return jp.createElement.apply(void 0,["a",M([qp(zp([[e.classes.root,!0],[e.classes.primary,"primary"===e.variant],[e.className,!0]])),new Ve(1,"Href",e.href)],1)].concat(km(e.children)))});var Em=Nm.a,Bm="\r\n## Material-UI's styling solution\r\n\r\nIn previous versions, Material-UI has used LESS, then a custom inline-style solution to write the style of the\r\ncomponents, but these approaches have proven to be limited. Most recently, Material-UI has [moved toward](https://github.com/oliviertassinari/a-journey-toward-better-style)\r\na *CSS-in-JS* solution. It **unlocks many great features** (theme nesting, dynamic styles, self-support, etc.).\r\nWe think that it's the future:\r\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\r\n- [The future of component-based styling](https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32)\r\n- [Convert SCSS (Sass) to CSS-in-JS](https://egghead.io/courses/convert-scss-sass-to-css-in-js)\r\n\r\nSo, you may have noticed in the demos what *CSS-in-JS* looks like.\r\nWe use the higher-order component created by `withStyles`\r\nto inject an array of styles into the DOM as CSS, using JSS. Here's an example:\r\n",Om="\r\n## JSS\r\n\r\nMaterial-UI's styling solution uses [JSS](https://github.com/cssinjs/jss) at its core.\r\nIt's a [high performance](https://github.com/cssinjs/jss/blob/master/docs/performance.md) JS to CSS compiler which works at runtime and server-side.\r\nIt is about 8 kB (minified and gzipped) and is extensible via a [plugins](https://github.com/cssinjs/jss/blob/master/docs/plugins.md) API.\r\n\r\nIf you end up using this styling solution in your codebase, you're going to need to *learn the API*.\r\nThe best place to start is by looking at the features that each [plugin](http://cssinjs.org/plugins/) provides. Material-UI uses few of them (see below)\r\nYou can always add new plugins if needed with the [`JssProvider`](https://github.com/cssinjs/react-jss#custom-setup) helper.\r\n\r\nIf you wish to build your own instance of `jss` **and** support *rtl* make sure you also include the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\r\nCheck the jss-rtl [readme](https://github.com/alitaheri/jss-rtl#simple-usage) to learn how.\r\n\r\n⚠️*There are no helpers of JssProvider in this library since it's not part of Material-UI. You would need to import it manually with* `Fable.Core.JsInterop` *helpers*\r\n",Um="\r\n## Plugins\r\n\r\nJSS uses the concept of plugins to extend its core, allowing people to cherry-pick the features they need.\r\nYou pay the performance overhead for only what's you are using.\r\nGiven `withStyles` is Material-UI's internal styling solution, all the plugins aren't available by default. The following list is used:\r\n- [jss-global](http://cssinjs.org/jss-global/)\r\n- [jss-nested](http://cssinjs.org/jss-nested/)\r\n- [jss-camel-case](http://cssinjs.org/jss-camel-case/)\r\n- [jss-default-unit](http://cssinjs.org/jss-default-unit/)\r\n- [jss-vendor-prefixer](http://cssinjs.org/jss-vendor-prefixer/)\r\n- [jss-props-sort](http://cssinjs.org/jss-props-sort/)\r\n\r\nIt's a subset of [jss-preset-default](http://cssinjs.org/jss-preset-default/).\r\n",Vm="\r\n## API\r\n\r\n### `withStyles<'P when 'P :> IClassesProps> (styles : StyleType) (options: StyleOption list) (fn : 'P -> ReactElement) : ComponentClass<'P>`\r\n\r\nLink a style sheet with a component.\r\nIt does not modify the component passed to it; instead, it returns a new component with a `classes` property.\r\nThis `classes` object contains the name of the class names injected in the DOM.\r\n\r\nSome implementation details that might be interesting to being aware of:\r\n- It adds a `classes` property so you can override the injected class names from the outside.\r\n- It adds an `innerRef` property so you can get a reference to the wrapped component. The usage of `innerRef` is identical to `ref`.\r\n- It forwards *non React static* properties so this HOC is more \"transparent\".\r\n\r\n#### Arguments\r\n\r\n1. `styles : StyleType`: A function generating the styles or a list of styles options.\r\n  - `StyleType.Func of (ITheme->IStyles list)`: Use this version if you need to have access to the theme. It's provided as the argument\r\n  - `StyleType.Styles of IStyles list`: Use this option to pass a static list of styles\r\nIt will be linked to the component.\r\n2. `options : StyleOption list`: All options are optional, so you can pass an empty list\r\n  - `StyleOption.WithTheme of bool`: Defaults to `false`. Provide the `theme` object to the component as a property.\r\n  - `StyleOption.Name of string`: The name of the style sheet. Useful for debugging.\r\n    If the value isn't provided, it will try to fallback to the name of the component.\r\n  - `StyleOption.Flip of bool option`: When set to `Some false`, this sheet will opt-out the `rtl` transformation. When set to `Some true`, the styles are inversed. When set to `None`, it follows `theme.direction`.\r\n  - The other keys (`StyleOption.Custom of string*obj`) are forwarded to the options argument of [jss.createStyleSheet([styles], [options])](http://cssinjs.org/js-api/#create-style-sheet).\r\n3. `fn : 'P -> ReactElement`: A function which renders a ReactElement with an argument of type `'P` (has to inherit IClassesProps)\r\n```fsharp\r\ntype IClasses = interface end\r\ntype IClassesProps =\r\n    abstract member classes: IClasses\r\n```\r\n\r\n#### Returns\r\n\r\n`ClassComponent<'P>`: Should be used with `Fable.Helpers.React.from`\r\n\r\n#### Example\r\n```fsharp\r\nopen Fable.Core.JsInterop\r\nopen Fable.Helpers.React\r\nopen Fable.Helpers.React.Props\r\nopen Fable.Helpers.MaterialUI\r\nopen Fable.MaterialUI.Props\r\n\r\nlet styles : IStyles list = [\r\n    Styles.Root [\r\n        CSSProp.BackgroundColor \"red\"\r\n    ]\r\n]\r\n\r\nlet myFun (props : IClassesProps) =\r\n    div [ HTMLAttr.Class !!props.classes?root ] []\r\n\r\nlet withStylesFun = withStyles<IClassesProps> (StyleType.Styles styles) [] myFun\r\n\r\nlet view () =\r\n    from withStylesFun createEmpty []\r\n```\r\n";function zm(){return jp.createElement.apply(void 0,["div",{}].concat([ui(Em),xi(Bm,"./Customization/CssInJs/CssInJs.fs",function(){return e={href:"#/customization/css-in-js"},n={href:"#/customization/css-in-js",variant:"primary"},jp.createElement.apply(void 0,[hs,{variant:"subtitle1"}].concat([jp.createElement.apply(void 0,[Rm,e].concat(["MyLink"]))," - ",jp.createElement.apply(void 0,[Rm,n].concat(["primary"]))]));var e,n}),ui(Om),ui(Um),ui(Vm)]))}var jm=t(224),Wm=t.n(jm).a;var _m=t(539);var Gm=t(225),Ym=t.n(Gm),Jm=t(226),qm=t.n(Jm),Km=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var $m=x(function(e,n,t){this.Title=e,this.Children=n,this.Href=t},k);function Zm(e){switch(e.tag){case 1:return"#/getting-started/installation";case 2:return"#/getting-started/usage";case 3:return"#/getting-started/migration-to-v2";case 4:return"#/demos/app-bar";case 5:return"#/demos/avatars";case 6:return"#/demos/buttons";case 7:return"#/demos/text-fields";case 8:return"#/pagelayout/signin";case 9:return"#/customization/overrides";case 10:return"#/customization/themes";case 11:return"#/customization/css-in-js";case 12:return"#/customization/default-theme";case 13:return"#/api/"+e.fields[0];default:return"#/home"}}function Xm(e){switch(e.tag){case 1:return"Installation";case 2:return"Usage";case 3:return"Migration to version 2";case 4:return"App Bar";case 5:return"Avatars";case 6:return"Buttons";case 7:return"Text Fields";case 8:return"Sign-in";case 9:return"Overrides";case 10:return"Themes";case 11:return"Css in JS (F#)";case 12:return"Default Theme";case 13:var n=e.fields[0];return np((t=n,Array.from(Fo(function(e,n){return 0===e||"-"===t[e-1]?n.toLocaleUpperCase():n},t.split(""))).join("")),"-","");default:return""}var t}function Qm(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var ed=Ym.a,nd=qm.a;var td=ys(function(e){var n=e.breakpoints.only("xs"),t=e.breakpoints.only("sm");return zp([Le("hero",zp([new Jp(250,"MinHeight","80vh"),new Jp(133,"Flex","0 0 auto"),new Jp(125,"Display","flex"),new Jp(200,"JustifyContent","center"),new Jp(1,"AlignItems","center"),new Jp(21,"BackgroundColor",e.palette.background.paper),new Jp(103,"Color",e.palette.primary.dark)])),Le("text",zp([new Jp(125,"Display","flex"),new Jp(136,"FlexDirection","column"),new Jp(200,"JustifyContent","center"),new Jp(1,"AlignItems","center")])),Le("title",zp([new Jp(208,"LetterSpacing",".2rem"),new Jp(343,"TextIndent",".7rem"),new Jp(165,"FontWeight",e.typography.fontWeightLight),new Jp(391,"WhiteSpace","nowrap"),ti(n,[new Jp(153,"FontSize",28)])])),Le("headline",zp([new Jp(279,"PaddingLeft",4*e.spacing.unit),new Jp(280,"PaddingRight",4*e.spacing.unit),new Jp(225,"MarginTop",e.spacing.unit),new Jp(248,"MaxWidth",500),new Jp(325,"TextAlign","center")])),Le("content",zp([new Jp(276,"PaddingBottom",8*e.spacing.unit),new Jp(281,"PaddingTop",8*e.spacing.unit),ti(t,[new Jp(281,"PaddingTop",12*e.spacing.unit)])])),Le("button",new Y(new Jp(225,"MarginTop",3*e.spacing.unit),new Y)),Le("logo",zp([new Jp(225,"MarginTop",3*e.spacing.unit),new Jp(224,"MarginRight",0),new Jp(223,"MarginLeft",0),new Jp(220,"MarginBottom",4*e.spacing.unit),new Jp(394,"Width","100%"),new Jp(189,"Height","35vw"),new Jp(247,"MaxHeight",200)])),Le("support",zp([new Jp(325,"TextAlign","center"),new Jp(220,"MarginBottom",30)]))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,[jp.Fragment,{}].concat([jp.createElement.apply(void 0,["div",{className:n.hero}].concat([jp.createElement.apply(void 0,["div",{className:n.content}].concat([jp.createElement.apply(void 0,["img",{src:nd,alt:"Fable Material-UI Logo",className:n.logo}].concat(Qm(new Y))),jp.createElement.apply(void 0,["div",{className:n.text}].concat([jp.createElement.apply(void 0,[hs,{variant:"h3",align:"center",component:"h1",color:"inherit",gutterBottom:!0,className:n.title}].concat(["FABLE MATERIAL-UI"])),jp.createElement.apply(void 0,[hs,{variant:"h5",component:"h2",color:"inherit",gutterBottom:!0,className:n.headline}].concat(["Fable bindings for Material-UI React components"])),jp.createElement.apply(void 0,[Va,{component:"a",href:"/"+Zm(new Km(1,"Installation")),className:n.button,variant:"outlined",color:"primary"}].concat(["Get Started"]))]))]))])),jp.createElement.apply(void 0,["div",{className:n.support}].concat([ui(ed)]))]))});var rd=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);var ad=x(function(e,n,t){this.currentPage=e,this.isLanding=n,this.menuOpen=t},k);var sd=x(function(e,n,t){this.model=e,this.render=n,this.equal=t},k);var od=x(function(e){jp.Component.call(this,e)},jp.Component);function pd(e,n,t,r){return jp.createElement.apply(void 0,[od,new sd(t,function(){return n(t,r)},e)].concat([]))}function id(t){return function(n){return function(e){return pd(f,t,n,e)}}}od.prototype.shouldComponentUpdate=function(e,n){return!this.props.equal(this.props.model,e.model)},od.prototype.render=function(){return this.props.render()};var ld=jp.createElement.apply(void 0,[ps,{}].concat([jp.createElement.apply(void 0,["path",{d:"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3"}].concat([]))]));function cd(e,n){var t=jp.createElement.apply(void 0,[Xa,{color:"inherit",onClick:function(e){n(new rd(0,"OpenMenu",!0))}}].concat([jp.createElement.apply(void 0,[Za,{}].concat(["menu"]))]));return e.isLanding?t:jp.createElement.apply(void 0,[$a,{lgUp:!0}].concat([t]))}var md=ys(function(e){return zp([Le("appBar",new Y(ti(e.breakpoints.up("lg"),[new Jp(207,"Left",250),new Jp(394,"Width","calc(100% - 250px)")]),new Y)),Le("landingAppBar",zp([new Jp(207,"Left",0),new Jp(394,"Width","100vw"),new Jp(92,"BoxShadow","unset")]))])},new Y,function(e){var n=e.classes;return jp.createElement.apply(void 0,[Oa,{position:"fixed",className:ni(zp([[n.appBar,!0],[n.landingAppBar,e.model.isLanding]]))}].concat([jp.createElement.apply(void 0,[ds,{}].concat([id(cd)(e.model)(e.dispatch),jp.createElement.apply(void 0,[hs,{variant:"h6",color:"inherit"}].concat([Xm(e.model.currentPage)])),jp.createElement.apply(void 0,["div",{className:"flex"}].concat([])),jp.createElement.apply(void 0,[us,{title:"Github",enterDelay:300}].concat([jp.createElement.apply(void 0,[Xa,{color:"inherit",component:"a",target:"_blank",href:"https://github.com/mvsmal/fable-material-ui"}].concat([ld]))]))]))]))});function dd(e,n){var t={};return t.model=e,t.dispatch=n,jp.createElement.apply(void 0,[md,t].concat([]))}function ud(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function hd(e){return zp([Le("button",zp([new Jp(200,"JustifyContent","flex-start"),new Jp(208,"LetterSpacing",0),new Jp(279,"PaddingLeft",24),new Jp(362,"TextTransform","none"),new Jp(394,"Width","100%"),new Jp(165,"FontWeight",e.typography.fontWeightMedium)])),Le("collapse",zp([new Jp(273,"Padding",0),new Jp(217,"Margin",0)]))])}var bd=x(function(e){this.opened=e},k);var yd=x(function(e){jp.PureComponent.call(this,e),this.state=new bd(e.opened)},jp.PureComponent);function fd(e){return jp.createElement.apply(void 0,[yd,e].concat([]))}yd.prototype.render=function(){var n=this,e=n.props.classes;return jp.createElement.apply(void 0,[jp.Fragment,{}].concat([jp.createElement.apply(void 0,[Va,{onClick:function(e){n.setState(function(e,n){return new bd(!e.opened)})},classes:{root:e.button}}].concat([n.props.title])),jp.createElement.apply(void 0,[ja,{in:n.state.opened,unmountOnExit:!0,className:e.collapse}].concat([jp.createElement.apply(void 0,[rs,{}].concat(ud(n.props.childItems)))]))]))};var gd=ys(function(e){return zp([Le("listItem",zp([new Jp(125,"Display","block"),new Jp(281,"PaddingTop",0),new Jp(276,"PaddingBottom",0)])),Le("bold",new Y(new Jp(165,"FontWeight",500),new Y)),Le("button",zp([new Jp(200,"JustifyContent","flex-start"),new Jp(208,"LetterSpacing",0),new Jp(362,"TextTransform","none"),new Jp(394,"Width","100%"),new Jp(165,"FontWeight",e.typography.fontWeightRegular)])),Le("selected",zp([new Jp(103,"Color",e.palette.primary.main),new Jp(165,"FontWeight",e.typography.fontWeightMedium)]))])},new Y,function(n){var e=new Y(new Jp(279,"PaddingLeft",8*(3+2*n.depth)),new Y),t=n.href;if(null==t){var r={};return r.opened=n.opened,r.title=n.title,r.childItems=n.childItems,jp.createElement.apply(void 0,[as,{disableGutters:!0,className:n.classes.listItem}].concat([jp.createElement.apply(void 0,[ys(hd,new Y,fd),r].concat([]))]))}var a=t,s=ni(new Y([n.classes.selected,f(n.currentPage,a)],new Y));return jp.createElement.apply(void 0,[as,{disableGutters:!0,className:n.classes.listItem}].concat([jp.createElement.apply(void 0,[Va,M([new Oe(10,"DisableRipple",!0),new Oe(4,"Component","a"),["style",M(e,1)],new Yp(23,"className",s),["classes",{root:n.classes.button}],new Yp(52,"Href",Zm(a)),new Gp(40,"OnClick",function(e){n.dispatch(new rd(0,"OpenMenu",!1))})],1)].concat([n.title]))]))});function Cd(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Sd=zp([new $m("Getting Started",zp([new $m("Installation",new Y,new Km(1,"Installation")),new $m("Usage",new Y,new Km(2,"Usage")),new $m("Migration to version 2",new Y,new Km(3,"MigrationToV2"))]),null),new $m("Component demos",zp([new $m("App Bar",new Y,new Km(4,"AppBar")),new $m("Buttons",new Y,new Km(6,"Buttons")),new $m("Text Fields",new Y,new Km(7,"TextFields"))]),null),new $m("Customization",zp([new $m("Themes",new Y,new Km(10,"Themes")),new $m("Overrides",new Y,new Km(9,"Overrides")),new $m("CSS in JS (F#)",new Y,new Km(11,"CssInJs")),new $m("Default Theme",new Y,new Km(12,"DefaultTheme"))]),null),new $m("Components API",zp([new $m("AppBar",new Y,new Km(13,"Api","app-bar")),new $m("Avatar",new Y,new Km(13,"Api","avatar")),new $m("Backdrop",new Y,new Km(13,"Api","backdrop")),new $m("Badge",new Y,new Km(13,"Api","badge")),new $m("BottomNavigation",new Y,new Km(13,"Api","bottom-navigation")),new $m("BottomNavigationAction",new Y,new Km(13,"Api","bottom-navigation-action")),new $m("Button",new Y,new Km(13,"Api","button")),new $m("ButtonBase",new Y,new Km(13,"Api","button-base")),new $m("Card",new Y,new Km(13,"Api","card")),new $m("CardActionArea",new Y,new Km(13,"Api","card-action-area")),new $m("CardActions",new Y,new Km(13,"Api","card-actions")),new $m("CardContent",new Y,new Km(13,"Api","card-content")),new $m("CardHeader",new Y,new Km(13,"Api","card-header")),new $m("CardMedia",new Y,new Km(13,"Api","card-media")),new $m("Checkbox",new Y,new Km(13,"Api","checkbox")),new $m("Chip",new Y,new Km(13,"Api","chip")),new $m("CircularProgress",new Y,new Km(13,"Api","circular-progress")),new $m("ClickAwayListener",new Y,new Km(13,"Api","click-away-listener")),new $m("Collapse",new Y,new Km(13,"Api","collapse")),new $m("CssBaseline",new Y,new Km(13,"Api","css-baseline")),new $m("Dialog",new Y,new Km(13,"Api","dialog")),new $m("DialogActions",new Y,new Km(13,"Api","dialog-actions")),new $m("DialogContentText",new Y,new Km(13,"Api","dialog-content-text")),new $m("DialogContent",new Y,new Km(13,"Api","dialog-content")),new $m("DialogTitle",new Y,new Km(13,"Api","dialog-title")),new $m("Divider",new Y,new Km(13,"Api","divider")),new $m("Drawer",new Y,new Km(13,"Api","drawer")),new $m("ExpansionPanel",new Y,new Km(13,"Api","expansion-panel")),new $m("ExpansionPanelActions",new Y,new Km(13,"Api","expansion-panel-actions")),new $m("ExpansionPanelDetails",new Y,new Km(13,"Api","expansion-panel-details")),new $m("ExpansionPanelSummary",new Y,new Km(13,"Api","expansion-panel-summary")),new $m("Fab",new Y,new Km(13,"Api","fab")),new $m("Fade",new Y,new Km(13,"Api","fade")),new $m("FilledInput",new Y,new Km(13,"Api","filled-input")),new $m("FormControl",new Y,new Km(13,"Api","form-control")),new $m("FormControlLabel",new Y,new Km(13,"Api","form-control-label")),new $m("FormGroup",new Y,new Km(13,"Api","form-group")),new $m("FormHelperText",new Y,new Km(13,"Api","form-helper-text")),new $m("FormLabel",new Y,new Km(13,"Api","form-label")),new $m("Grid",new Y,new Km(13,"Api","grid")),new $m("GridList",new Y,new Km(13,"Api","grid-list")),new $m("GridListTile",new Y,new Km(13,"Api","grid-list-tile")),new $m("GridListTileBar",new Y,new Km(13,"Api","grid-list-tile-bar")),new $m("Grow",new Y,new Km(13,"Api","grow")),new $m("Hidden",new Y,new Km(13,"Api","hidden")),new $m("Icon",new Y,new Km(13,"Api","icon")),new $m("IconButton",new Y,new Km(13,"Api","icon-button")),new $m("Input",new Y,new Km(13,"Api","input")),new $m("InputAdornment",new Y,new Km(13,"Api","input-adornment")),new $m("InputBase",new Y,new Km(13,"Api","input-base")),new $m("InputLabel",new Y,new Km(13,"Api","input-label")),new $m("LinearProgress",new Y,new Km(13,"Api","linear-progress")),new $m("List",new Y,new Km(13,"Api","list")),new $m("ListItem",new Y,new Km(13,"Api","list-item")),new $m("ListItemAvatar",new Y,new Km(13,"Api","list-item-avatar")),new $m("ListItemIcon",new Y,new Km(13,"Api","list-item-icon")),new $m("ListItemSecondaryAction",new Y,new Km(13,"Api","list-item-secondary-action")),new $m("ListItemText",new Y,new Km(13,"Api","list-item-text")),new $m("ListSubheader",new Y,new Km(13,"Api","list-subheader")),new $m("Menu",new Y,new Km(13,"Api","menu")),new $m("MenuItem",new Y,new Km(13,"Api","menu-item")),new $m("MenuList",new Y,new Km(13,"Api","menu-list")),new $m("MobileStepper",new Y,new Km(13,"Api","mobile-stepper")),new $m("Modal",new Y,new Km(13,"Api","modal")),new $m("MuiThemeProvider",new Y,new Km(13,"Api","mui-theme-provider")),new $m("NativeSelect",new Y,new Km(13,"Api","native-select")),new $m("OutlinedInput",new Y,new Km(13,"Api","outlined-input")),new $m("Paper",new Y,new Km(13,"Api","paper")),new $m("Popover",new Y,new Km(13,"Api","popover")),new $m("Popper",new Y,new Km(13,"Api","popper")),new $m("Portal",new Y,new Km(13,"Api","portal")),new $m("Radio",new Y,new Km(13,"Api","radio")),new $m("RadioGroup",new Y,new Km(13,"Api","radio-group")),new $m("Select",new Y,new Km(13,"Api","select")),new $m("Slide",new Y,new Km(13,"Api","slide")),new $m("Snackbar",new Y,new Km(13,"Api","snackbar")),new $m("SnackbarContent",new Y,new Km(13,"Api","snackbar-content")),new $m("Step",new Y,new Km(13,"Api","step")),new $m("StepButton",new Y,new Km(13,"Api","step-button")),new $m("StepConnector",new Y,new Km(13,"Api","step-connector")),new $m("StepContent",new Y,new Km(13,"Api","step-content")),new $m("StepIcon",new Y,new Km(13,"Api","step-icon")),new $m("StepLabel",new Y,new Km(13,"Api","step-label")),new $m("Stepper",new Y,new Km(13,"Api","stepper")),new $m("SvgIcon",new Y,new Km(13,"Api","svg-icon")),new $m("SwipeableDrawer",new Y,new Km(13,"Api","swipeable-drawer")),new $m("Switch",new Y,new Km(13,"Api","switch")),new $m("Tab",new Y,new Km(13,"Api","tab")),new $m("Table",new Y,new Km(13,"Api","table")),new $m("TableBody",new Y,new Km(13,"Api","table-body")),new $m("TableCell",new Y,new Km(13,"Api","table-cell")),new $m("TableFooter",new Y,new Km(13,"Api","table-footer")),new $m("TableHead",new Y,new Km(13,"Api","table-head")),new $m("TablePagination",new Y,new Km(13,"Api","table-pagination")),new $m("TableRow",new Y,new Km(13,"Api","table-row")),new $m("TableSortLabel",new Y,new Km(13,"Api","table-sort-label")),new $m("Tabs",new Y,new Km(13,"Api","tabs")),new $m("TextField",new Y,new Km(13,"Api","text-field")),new $m("Toolbar",new Y,new Km(13,"Api","toolbar")),new $m("Tooltip",new Y,new Km(13,"Api","tooltip")),new $m("TouchRipple",new Y,new Km(13,"Api","touch-ripple")),new $m("Typography",new Y,new Km(13,"Api","typography")),new $m("Zoom",new Y,new Km(13,"Api","zoom"))]),null),new $m("Page layout demos",new Y(new $m("Sign-in",new Y,new Km(8,"SignIn")),new Y),null)]);function Pd(n,t,r,e){var a,s,o,p,i,l,c,m=null!=e.Children.tail&&function(e,n){for(;;){var t=e,r=n;if(null==r.tail)return!1;var a=r.tail;if(t(r.head))return!0;e=t,n=a}}(function(e){return f(e.Href,n)},e.Children),d=Op(function(e){return Pd(n,t,r+1,e)},e.Children);return s=r,o=m,p=n,i=d,l=t,(c={}).title=(a=e).Title,c.href=a.Href,c.depth=s,c.currentPage=p,c.opened=o,c.childItems=i,c.dispatch=l,jp.createElement.apply(void 0,[gd,c].concat([]))}function wd(n,t){return jp.createElement.apply(void 0,[rs,{}].concat(Cd(Op(function(e){return Pd(n,t,0,e)},Sd))))}function Td(e){return zp([Le("title",zp([new Jp(103,"Color",e.palette.text.secondary),new Jp(220,"MarginBottom",~~(e.spacing.unit/2))])),Le("root",new Y(new Jp(394,"Width",250),new Y)),Le("toolbar",zp([new Jp(125,"Display","flex"),new Jp(136,"FlexDirection","column"),new Jp(200,"JustifyContent","center"),new Jp(1,"AlignItems","flex-start")])),Le("headerLink",zp([new Jp(372,"Transition","color .2s ease-in-out"),ti("&:hover",[new Jp(103,"Color",e.palette.primary.main),new Jp(329,"TextDecoration","underline")])]))])}function vd(n){var e=n.classes;return jp.createElement.apply(void 0,["div",{className:e.root}].concat([jp.createElement.apply(void 0,[ds,{className:e.toolbar}].concat([jp.createElement.apply(void 0,["a",{className:e.title,href:Zm(new Km(0,"Home")),onClick:function(e){n.dispatch(new rd(0,"OpenMenu",!1))}}].concat([jp.createElement.apply(void 0,[hs,{variant:"h6",className:e.headerLink,color:"inherit"}].concat(["Fable Material-UI"]))])),jp.createElement.apply(void 0,["a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/mvsmal/fable-material-ui/releases"}].concat([jp.createElement.apply(void 0,[hs,{variant:"caption",className:e.headerLink}].concat(["v2.5.0"]))]))])),jp.createElement.apply(void 0,[Wa,{}].concat([])),id(wd)(n.currentPage)(n.dispatch)]))}function Md(e,n){var t={};return t.currentPage=e,t.dispatch=n,jp.createElement.apply(void 0,[ys(Td,new Y,vd),t].concat([]))}function Id(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var xd=ys(zp([Le("root",new Y(new Jp(394,"Width",250),new Y)),Le("paper",new Y(new Jp(394,"Width",250),new Y))]),new Y,function(n){return jp.createElement.apply(void 0,["nav",{}].concat(Id(Ep(Mo(function(){return To(Lo(jp.createElement.apply(void 0,[$a,{lgUp:!n.isLanding,implementation:"js"}].concat([jp.createElement.apply(void 0,[is,{variant:"temporary",open:n.menuOpen,onOpen:function(e){n.dispatch(new rd(0,"OpenMenu",!0))},onClose:function(e){n.dispatch(new rd(0,"OpenMenu",!1))},ModalProps:{keepMounted:!0},classes:{paper:n.classes.paper}}].concat([id(Md)(n.currentPage)(n.dispatch)]))]))),Mo(function(){return n.isLanding?Io():Lo(jp.createElement.apply(void 0,[$a,{mdDown:!0,implementation:"js"}].concat([jp.createElement.apply(void 0,[_a,{variant:"permanent",open:!0,className:n.classes.root,classes:{paper:n.classes.paper}}].concat([id(Md)(n.currentPage)(n.dispatch)]))])))}))})))))});function Ad(e,n){var t={};return t.currentPage=e.currentPage,t.isLanding=e.isLanding,t.menuOpen=e.menuOpen,t.dispatch=n,jp.createElement.apply(void 0,[xd,t].concat([]))}var Fd=gs(zp([["typography",{useNextVariants:!0}],["palette",{type:"light",primary:{main:Ne[500]},secondary:{main:Ss(He.A400,.08)}}]]));var Ld=ys(function(e){var n=e.breakpoints.up("lg"),t=e.breakpoints.up("sm");return zp([Le("root",zp([new Jp(125,"Display","flex"),new Jp(276,"PaddingBottom",40)])),Le("menuButton",zp([new Jp(223,"MarginLeft",-12),new Jp(224,"MarginRight",20)])),Le("main",zp([new Jp(281,"PaddingTop",80),new Jp(133,"Flex","1 1 100%"),new Jp(248,"MaxWidth","100%"),new Jp(217,"Margin","0 auto"),new Jp(279,"PaddingLeft",2*e.spacing.unit),new Jp(280,"PaddingRight",2*e.spacing.unit),new Jp(149,"FontFamily",e.typography.fontFamily),new Jp(153,"FontSize",16),ti(t,[new Jp(279,"PaddingLeft",4*e.spacing.unit),new Jp(280,"PaddingRight",4*e.spacing.unit)]),ti(n,[new Jp(279,"PaddingLeft",5*e.spacing.unit),new Jp(280,"PaddingRight",9*e.spacing.unit),new Jp(248,"MaxWidth","calc(100% - 250px)")])])),Le("landingMain",zp([new Jp(273,"Padding",0),new Jp(248,"MaxWidth","100vw"),new Jp(223,"MarginLeft",0)]))])},new Y,function(r){var e=r.classes,n=ni(zp([[e.main,!0],[e.landingMain,r.model.isLanding]]));return jp.createElement.apply(void 0,[fs,{theme:Fd}].concat([jp.createElement.apply(void 0,["div",{className:e.root}].concat([id(dd)(r.model)(r.dispatch),id(Ad)(r.model)(r.dispatch),jp.createElement.apply(void 0,["main",{className:n}].concat([function(e){switch(e.tag){case 1:return ui(hi);case 3:return ui(yi);case 2:return ui(gi);case 4:return Li();case 5:return jp.createElement.apply(void 0,["div",{}].concat(["avatars"]));case 6:return Pl();case 7:return xc();case 8:return Hc();case 9:return qc();case 10:return Hm();case 11:return zm();case 12:return jp.createElement.apply(void 0,["div",{}].concat([ui(Wm)]));case 13:return function(e){var n=Zo($o("./%s.md"))(e);try{return ui(_m(n))}catch(e){return jp.createElement.apply(void 0,["div",{}].concat(["not found"]))}}(e.fields[0]);default:return n=r.dispatch,(t={}).dispatch=n,jp.createElement.apply(void 0,[td,t].concat([]))}var n,t}(r.model.currentPage)]))]))]))});function Hd(e,n){try{return Ts(e(n))}catch(e){return null}}var Dd=x(function(e,n,t,r){this.visited=e,this.unvisited=n,this.args=t,this.value=r},k);function Nd(e,n,t,r){return new Dd(e,n,t,r)}function kd(e,l){return function(e){var n=e.visited,t=e.value,r=e.unvisited,a=e.args;if(null==r.tail)return new Y;var s=r.tail,o=r.head,p=l(o);if(1===p.tag)return p.fields[0],new Y;var i=p.fields[0];return new Y(Nd(new Y(o,n),s,a,t(i)),new Y)}}function Rd(e){return kd(0,function(e){return new xs(0,"Ok",e)})(e)}function Ed(p){return function(e){var n=e.visited,t=e.value,r=e.unvisited,a=e.args;if(null==r.tail)return new Y;var s=r.tail,o=r.head;return o===p?new Y(Nd(new Y(o,n),s,a,t),new Y):new Y}}function Bd(a,s){return function(e){var n=e.visited,p=e.value,t=e.unvisited,r=e.args;return Op(function(e){return n=p,r=(t=e).visited,a=t.value,s=t.unvisited,o=t.args,new Dd(r,s,o,n(a));var n,t,r,a,s,o},s(new Dd(n,t,r,a)))}}function Od(e,n,t){return function(e){e:for(;;){if(null==e.tail)return null;var n=e.head,t=e.tail;switch(null!=n.unvisited.tail?""===n.unvisited.head&&null==n.unvisited.tail.tail?1:2:0){case 0:case 1:return Ts(n.value);case 2:e=t;continue e}break}}(e(new Dd(new Y,function(e){var n,t,r,a=zp(e.split("/"));switch(null!=a.tail&&""===a.head?(n=0,t=a.tail):(n=1,r=a),n){case 0:return t;case 1:return r}}(n),t,function(e){return e})))}function Ud(e){var n=e.split("=");if(0===function(e,n,t){if(null==n)return null==t?0:-1;if(null==t)return 1;var r=0,a=0,s=0|n.length,o=0|t.length;if(o<s)return 1;if(s<o)return-1;for(;r<s&&0===a;)a=e(n[r],t[r]),r+=1;return 0|a}(w,n,null)||2!==n.length)return null;var t=n[1],r=n[0];return function(e,n){var t,r,a,s=[e,n];switch(null!=s[0]&&null!=s[1]?(r=vs(s[t=0]),a=vs(s[1])):t=1,t){case 0:return[r,a];case 1:return null}}(Hd(decodeURI,r),Hd(decodeURI,t))}function Vd(e){return r=function(e){return e},a=Ao(Ud,e.substr(1).split("&")),n=Mo(function(){return Ho(function(e){for(var n=e.next();!n.done;){var t=r(n.value);if(null!=t)return[vs(t),e];n=e.next()}return null},a[Symbol.iterator]())}),fp(t={Compare:C},lp(t,n));var n,t,r,a}function zd(e){return(zd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jd(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Wd(e,n,t){return n&&jd(e.prototype,n),t&&jd(e,t),e}function _d(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function Gd(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Yd(e){var r="function"==typeof Map?new Map:void 0;return(Yd=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(e))return r.get(e);r.set(e,t)}function t(){return Jd(e,arguments,Kd(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),qd(t,e)})(e)}function Jd(e,n,t){return(Jd=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var a=new(Function.bind.apply(e,r));return t&&qd(a,t.prototype),a}).apply(null,arguments)}function qd(e,n){return(qd=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Kd(e){return(Kd=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $d=function(e){function r(){var e,n,t;return _d(this,r),n=this,e=!(t=Kd(r).call(this,"The operation was canceled"))||"object"!==zd(t)&&"function"!=typeof t?Gd(n):t,Object.setPrototypeOf(Gd(Gd(e)),r.prototype),e}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&qd(e,n)}(r,Yd(Error)),r}(),Zd=function(){function e(){_d(this,e),this.callCount=0}return Wd(e,null,[{key:"maxTrampolineCallCount",get:function(){return 2e3}}]),Wd(e,[{key:"incrementAndCheck",value:function(){return this.callCount++>e.maxTrampolineCallCount}},{key:"hijack",value:function(e){this.callCount=0,setTimeout(e,0)}}]),e}();function Xd(e){return function(n){if(n.cancelToken.isCancelled)n.onCancel(new $d);else if(n.trampoline.incrementAndCheck())n.trampoline.hijack(function(){try{e(n)}catch(e){n.onError(e)}});else try{e(n)}catch(e){n.onError(e)}}}function Qd(e,t){return Xd(function(n){e({onSuccess:function(e){try{t(e)(n)}catch(e){n.onError(e)}},onError:n.onError,onCancel:n.onCancel,cancelToken:n.cancelToken,trampoline:n.trampoline})})}function eu(n){return Xd(function(e){return e.onSuccess(n)})}var nu=new(function(){function e(){_d(this,e)}return Wd(e,[{key:"Bind",value:function(e,n){return Qd(e,n)}},{key:"Combine",value:function(e,n){return this.Bind(e,function(){return n})}},{key:"Delay",value:function(n){return Xd(function(e){return n()(e)})}},{key:"For",value:function(e,n){var t=e[Symbol.iterator](),r=t.next();return this.While(function(){return!r.done},this.Delay(function(){var e=n(r.value);return r=t.next(),e}))}},{key:"Return",value:function(e){return eu(e)}},{key:"ReturnFrom",value:function(e){return e}},{key:"TryFinally",value:function(e,t){return Xd(function(n){e({onSuccess:function(e){t(),n.onSuccess(e)},onError:function(e){t(),n.onError(e)},onCancel:function(e){t(),n.onCancel(e)},cancelToken:n.cancelToken,trampoline:n.trampoline})})}},{key:"TryWith",value:function(e,t){return Xd(function(n){e({onSuccess:n.onSuccess,onCancel:n.onCancel,cancelToken:n.cancelToken,trampoline:n.trampoline,onError:function(e){try{t(e)(n)}catch(e){n.onError(e)}}})})}},{key:"Using",value:function(e,n){return this.TryFinally(n(e),function(){return e.Dispose()})}},{key:"While",value:function(e,n){var t=this;return e()?this.Bind(n,function(){return t.While(e,n)}):this.Return(void 0)}},{key:"Zero",value:function(){return Xd(function(e){return e.onSuccess(void 0)})}}]),e}());function tu(e){}var ru={isCancelled:!1};function au(n){return Xd(function(e){return n([e.onSuccess,e.onError,e.onCancel])})}function su(e,n){return ou(e,n)}function ou(e,n,t,r,a){"function"!=typeof n&&(a=n,n=null);var s=new Zd;e({onSuccess:n||tu,onError:t||tu,onCancel:r||tu,cancelToken:a||ru,trampoline:s})}function pu(n,e){Vp(function(e){e(n)},e)}function iu(){return new Y}function lu(t,e){return Op(function(e){return function(n){e(function(e){n(t(e))})}},e)}function cu(e){return n=e,Rp(xo(function(e,n){return kp(function(e,n){return new Y(n,e)},e,n)},new Y,n));var n}function mu(e,n){console.error(e,n)}function du(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function uu(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var hu=function e(n){uu(this,e),this.value=n},bu=function(){function e(){uu(this,e)}var n,t,r;return n=e,(t=[{key:"add",value:function(e){var n=new hu(e);this.firstAndLast?(this.firstAndLast[1].next=n,this.firstAndLast=[this.firstAndLast[0],n]):this.firstAndLast=[n,n]}},{key:"tryGet",value:function(){if(this.firstAndLast){var e=this.firstAndLast[0].value;return this.firstAndLast[0].next?this.firstAndLast=[this.firstAndLast[0].next,this.firstAndLast[1]]:delete this.firstAndLast,e}}}])&&du(n.prototype,t),r&&du(n,r),e}(),yu=function e(n,t){uu(this,e),this.body=n,this.cancellationToken=t||ru,this.messages=new bu};function fu(e){if(e.continuation){var n=e.messages.tryGet();if(n){var t=e.continuation;delete e.continuation,t(n)}}}function gu(e,n){e.messages.add(n),fu(e)}function Cu(e,n){var t,r=new yu(e,n);return su((t=r).body(t),t.cancellationToken),r}var Su=x(function(e,n,t,r,a,s){this.init=e,this.update=n,this.subscribe=t,this.view=r,this.setState=a,this.onError=s},k);function Pu(e,i){var n,t,r=i.init(e),a=Cu(function(p){return function a(s){var o=nu;return o.Delay(function(){return o.Bind((n=p,au(function(e){if(n.continuation)throw new Error("Receive can only be called once!");n.continuation=e[0],fu(n)})),function(e){var n,t=e;try{var r=i.update(t,s);i.setState(r[0],function(e){gu(p,e)}),pu(function(e){gu(p,e)},r[1]),n=r[0]}catch(e){i.onError(["Unable to process a message:",e]),n=s}return o.ReturnFrom(a(n))});var n})}(r[0])});i.setState(r[0],function(e){gu(a,e)});try{n=i.subscribe(r[0])}catch(e){i.onError(["Unable to subscribe:",e]),n=iu()}pu(function(e){gu(a,e)},(t=n,kp(function(e,n){return new Y(n,e)},r[1],Rp(t))))}var wu=x(function(e,n){for(var t=arguments.length,r=new Array(2<t?t-2:0),a=2;a<t;a++)r[a-2]=arguments[a];L.call.apply(L,[this,e,n].concat(r))},L);function Tu(e){throw new Error("`onChangeRef` has not been itialized.\nPlease make sure you used Elmish.Browser.Navigation.Program.Internal.subscribe")}function vu(t){var r=null;Tu=function(e){var n;switch(null!=r&&r===window.location.href?n=0:n=1,n){case 0:break;case 1:r=window.location.href,t(new wu(0,"Change",window.location))}return null},window.addEventListener("popstate",function(e){return Tu(e)}),window.addEventListener("hashchange",function(e){return Tu(e)}),window.addEventListener("NavigatedEvent",Tu)}function Mu(e){return n=zp([Bd(new Km(0,"Home"),Ed("/")),Bd(new Km(0,"Home"),Ed("home")),Bd(new Km(1,"Installation"),function(e){return Bp(Ed("installation"),Ed("getting-started")(e))}),Bd(new Km(2,"Usage"),function(e){return Bp(Ed("usage"),Ed("getting-started")(e))}),Bd(new Km(3,"MigrationToV2"),function(e){return Bp(Ed("migration-to-v2"),Ed("getting-started")(e))}),Bd(new Km(4,"AppBar"),function(e){return Bp(Ed("app-bar"),Ed("demos")(e))}),Bd(new Km(5,"Avatars"),function(e){return Bp(Ed("avatars"),Ed("demos")(e))}),Bd(new Km(6,"Buttons"),function(e){return Bp(Ed("buttons"),Ed("demos")(e))}),Bd(new Km(7,"TextFields"),function(e){return Bp(Ed("text-fields"),Ed("demos")(e))}),Bd(new Km(8,"SignIn"),function(e){return Bp(Ed("signin"),Ed("pagelayout")(e))}),Bd(new Km(9,"Overrides"),function(e){return Bp(Ed("overrides"),Ed("customization")(e))}),Bd(new Km(10,"Themes"),function(e){return Bp(Ed("themes"),Ed("customization")(e))}),Bd(new Km(11,"CssInJs"),function(e){return Bp(Ed("css-in-js"),Ed("customization")(e))}),Bd(new Km(12,"DefaultTheme"),function(e){return Bp(Ed("default-theme"),Ed("customization")(e))}),Bd(function(e){return new Km(13,"Api",e)},function(e){return Bp(Rd,Ed("api")(e))})]),t=e,Bp(function(e){return e(t)},n);var n,t}function Iu(e,n){if(null==e)return[n,(t=Zm(n.currentPage),new Y(function(e){history.replaceState(null,"",t)},new Y))];var t;return[new ad(e,f(e,new Km(0,"Home")),n.menuOpen),new Y(function(e){window.scroll(0,0)},new Y)]}var xu,Au,Fu,Lu,Hu,Du,Nu,ku,Ru,Eu,Bu,Ou,Uu,Vu,zu,ju=t(16);function Wu(e,n){return t=n,(r={}).model=e,r.dispatch=t,jp.createElement.apply(void 0,[Ld,r].concat([]));var t,r}xu="app",Nu=function(e){return function(e,n){var t,r=n.hash.substr(1);if(0<=r.indexOf("?")){var a=r.substr(0,r.indexOf("?"));t=[a,r.substr(a.length)]}else t=[r,"?"];return Od(e,t[0],Vd(t[1]))}(Mu,e)},ku=Iu,Ru=new Su(function(e){var n=Iu(e,new ad(new Km(0,"Home"),!0,!1));return[n[0],cu(new Y(n[1],new Y))]},function(e,n){var t=e.fields[0];return[new ad(n.currentPage,n.isLanding,t),new Y]},function(e){return iu()},zu=Wu,function(e,n){zu(e,n)},function(e){mu(e[0],e[1])}),Eu=Nu,Bu=ku,Uu=vu,Vu=function(e){return[e[0],lu(function(e){return new wu(1,"UserMsg",e)},e[1])]},Au=new Su(function(){return Vu(Ou.init(Eu(window.location)))},function(e,n){var t,r;return Vu(1===e.tag?(t=e.fields[0],Ou.update(t,n)):(r=e.fields[0],Bu(Eu(r),n)))},function(e){return cu(zp([new Y(Uu,new Y),lu(function(e){return new wu(1,"UserMsg",e)},Ou.subscribe(e))]))},function(e,n){return Ou.view(e,function(e){n(new wu(1,"UserMsg",e))})},function(e,n){Ou.setState(e,function(e){n(new wu(1,"UserMsg",e))})},(Ou=Ru).onError),Fu=pd,Lu=xu,Pu(Du=null,new Su((Hu=Au).init,Hu.update,Hu.subscribe,Hu.view,function(n,t){if(null!=Du){var e=Du;window.cancelAnimationFrame(e)}Du=window.requestAnimationFrame(function(e){Object(ju.render)(Fu(function(e,n){return e===n},Hu.view,n,t),document.getElementById(Lu))})},Hu.onError)),t.d(n,"root",function(){return Wu})},function(e,n){}]));